---
title: "MATH167R: Data visualization"
author: "Peter Gao"
format: 
  revealjs:
    theme: [./slides.scss, ../theme.scss]
editor: visual
---

## Warm-up

1.  What does the following code do?

    ```{r, echo = T, eval = F}
    library(palmerpenguins)
    library(ggplot2)
    data(penguins)
    ggplot(penguins, 
           aes(x = flipper_length_mm, 
               y = body_mass_g, 
               color = species)) + 
      geom_point()
    ```

## Warm-up

```{r, echo = T, eval = T, warning = F}
library(palmerpenguins)
library(ggplot2)
data(penguins)
ggplot(penguins, 
       aes(x = flipper_length_mm, 
           y = body_mass_g, 
           color = species)) + 
  geom_point()
```

## Overview of today

-   Advanced data visualization
-   Data transformation for visualization

# Advanced Data Visualization

## Example: Egg production in the United States

Today we'll start using the [The Humane League's US Egg Production dataset](https://thehumaneleague.org/article/E008R01-us-egg-production-data), which we can load using the following code:

```{r, echo = T, eval = T}
library(tidyverse)
eggproduction  <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-11/egg-production.csv')
head(eggproduction)
```

## Data Dictionary {.smaller}

::: {style="height:500px;overflow:auto;"}
| variable       | class     | description                                                                                                                                             |
|:----------|:----------|:--------------------------------------------------|
| observed_month | double    | Month in which report observations are collected,Dates are recorded in ISO 8601 format YYYY-MM-DD                                                       |
| prod_type      | character | type of egg product: hatching, table eggs                                                                                                               |
| prod_process   | character | type of production process and housing: cage-free (organic), cage-free (non-organic), all. The value 'all' includes cage-free and conventional housing. |
| n_hens         | double    | number of hens produced by hens for a given month-type-process combo                                                                                    |
| n_eggs         | double    | number of eggs producing eggs for a given month-type-process combo                                                                                      |
| source         | character | Original USDA report from which data are sourced. Values correspond to titles of PDF reports. Date of report is included in title.                      |
:::

## Building up a visualization

```{r}
#| echo: TRUE
#| eval: FALSE
#| code-line-numbers: "2"
eggproduction |> 
  filter(prod_type == "table eggs") 
```

```{r, echo = FALSE, eval = T, fig.height = 4, fig.width = 8}
eggproduction |> 
  filter(prod_type == "table eggs") 
```

## Building up a visualization

```{r}
#| echo: TRUE
#| eval: FALSE
#| code-line-numbers: "3"
eggproduction |> 
  filter(prod_type == "table eggs") |>
  ggplot(aes(x = observed_month, y = n_eggs))
```

```{r, echo = FALSE, eval = T, fig.height = 4, fig.width = 8}
eggproduction |> 
  filter(prod_type == "table eggs") |>
  ggplot(aes(x = observed_month, y = n_eggs))
```

## Building up a visualization

```{r}
#| echo: TRUE
#| eval: FALSE
#| code-line-numbers: "3-4"
eggproduction |> 
  filter(prod_type == "table eggs") |>
  ggplot(aes(x = observed_month, y = n_eggs)) +
  geom_point()
```

```{r, echo = FALSE, eval = T, fig.height = 4, fig.width = 8}
eggproduction |> 
  filter(prod_type == "table eggs") |>
  ggplot(aes(x = observed_month, y = n_eggs)) +
  geom_point()
```

## Building up a visualization

```{r}
#| echo: TRUE
#| eval: FALSE
#| code-line-numbers: "3-4"
eggproduction |> 
  filter(prod_type == "table eggs") |>
  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +
  geom_point()
```

```{r, echo = FALSE, eval = T, fig.height = 4, fig.width = 8}
eggproduction |> 
  filter(prod_type == "table eggs") |>
  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +
  geom_point()
```

## Building up a visualization

```{r}
#| echo: TRUE
#| eval: FALSE
#| code-line-numbers: "3-4"
eggproduction |> 
  filter(prod_type == "table eggs") |>
  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +
  geom_line()
```

```{r, echo = FALSE, eval = T, fig.height = 4, fig.width = 8}
eggproduction |> 
  filter(prod_type == "table eggs") |>
  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +
  geom_line()
```

## Labels and legends

`theme` can be added to change options including axis labels and legend position

```{r}
#| echo: TRUE
#| eval: FALSE
#| code-line-numbers: "5-6"
eggproduction |> 
  filter(prod_type == "table eggs") |>
  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +
  geom_line() +
  xlab("Date") + ylab("# eggs") +
  theme(legend.position = "bottom")
```

```{r, echo = FALSE, eval = T, fig.height = 4, fig.width = 8}
eggproduction |> 
  filter(prod_type == "table eggs") |>
  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +
  geom_line() +
  xlab("Date") + ylab("# eggs") +
  theme(legend.position = "bottom")
```

## Colors

`scale_color_viridis_d` swaps colors to the `viridis` discrete color palette, which is optimized for accessibility.

```{r}
#| echo: TRUE
#| eval: FALSE
#| code-line-numbers: "6"
eggproduction |> 
  filter(prod_type == "table eggs") |>
  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +
  geom_line() +
  xlab("Date") + ylab("# eggs") +
  scale_color_viridis_d() +
  theme(legend.position = "bottom")
```

```{r, echo = FALSE, eval = T, fig.height = 4, fig.width = 8}
eggproduction |> 
  filter(prod_type == "table eggs") |>
  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +
  geom_line() +
  xlab("Date") + ylab("# eggs") +
  scale_color_viridis_d() +
  theme(legend.position = "bottom")
```

## Remember!

Learning `ggplot` takes a lot of time--use your peers, me, and the internet as a resource!

**General strategy**

1.  Clean and tidy data into the appropriate format.

2.  Map **variables** to **aesthetics**.

3.  Use `geom_` functions to draw **markings** with the appropriate aesthetics.

4.  Add labels and titles with `xlab`, `ylab`, and `ggtitle`.

5.  Adjust text size, legend position with `theme`.

## Adding even more dimensions

```{r}
#| echo: TRUE
#| eval: FALSE
#| code-line-numbers: "4"
eggproduction |> 
  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +
  geom_line() +
  facet_wrap(~prod_type) +
  xlab("Date") + ylab("# eggs") +
  scale_color_viridis_d() +
  theme(legend.position = "bottom")
```

```{r, echo = FALSE, eval = T, fig.height = 4, fig.width = 8}
eggproduction |> 
  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +
  geom_line() +
  facet_wrap(~prod_type) +
  xlab("Date") + ylab("# eggs") +
  scale_color_viridis_d() +
  theme(legend.position = "bottom")
```

# Manipulating data for visualization

## US population data, 2010-2020

```{r, echo = T, eval = F}
state_population <- readr::read_csv("https://www2.census.gov/programs-surveys/popest/datasets/2010-2020/national/totals/nst-est2020.csv")

# code to print the data
library(knitr)
kable(state_population, digits = 3, row.names = F) |>
  kableExtra::kable_styling("striped", full_width = T) |> 
  kableExtra::scroll_box(height = "560px")
```

## US population data, 2010-2020

```{r, echo = F, eval = T}
state_population <- readr::read_csv("https://www2.census.gov/programs-surveys/popest/datasets/2010-2020/national/totals/nst-est2020.csv")

# code to print the data
library(knitr)
kable(state_population, digits = 3, row.names = F) |>
  kableExtra::kable_styling("striped", full_width = T) |> 
  kableExtra::scroll_box(height = "560px")
```

## National population data

We can use the `SUMLEV` variable to obtain only national data:

```{r, echo = T, eval = T}
US_pop <- state_population |>
  filter(SUMLEV == "010")

# code to print the data
kable(US_pop, digits = 3, row.names = F) |>
  kableExtra::kable_styling("striped", full_width = T)
```

## National population data

How can we generate the following plot?

```{r, echo = F, eval = T}
US_pop |> 
  select(-POPESTIMATE042020) |>
  pivot_longer(contains("POPESTIMATE"), names_to = "Year", values_to = "Population") |>
  mutate(Year = as.numeric(stringr::str_sub(Year, start = 12))) |>
  ggplot(aes(x = Year, y = Population)) + 
  geom_line()
```

## National population data

Note that our data cannot be readily used with `ggplot` to generate the previous plot. Ideally, we would like two vectors of the same length: one representing `Year` and one representing `Population`. Today, we'll discuss how to do this in both **base R** and the **tidyverse**.

```{r, echo = T, eval = F, error = T}
# base R
plot_dat <- data.frame(
  Year = 2010:2020,
  Population = US_pop[1, 8:19]
)
head(plot_dat)
```

```{r, echo = F, eval = T, error = T}
# base R
plot_dat <- data.frame(
  Year = 2010:2020,
  Population = US_pop[1, 8:19]
)
head(plot_dat)
```

## National population data

What went wrong? `US_pop[1, 8:19]` is a tibble, and we need a numeric.

```{r, echo = T, eval = F, error = T}
plot_dat <- data.frame(
  Year = 2010:2020,
  Population = as.numeric(US_pop[1, 8:19])
)
```

```{r, echo = F, eval = T, error = T}
# base R
plot_dat <- data.frame(
  Year = 2010:2020,
  Population = as.numeric(US_pop[1, 8:19])
)
```

## National population data

Now what? `US_pop` has an extra column `POPESTIMATE042020` which we need to remove.

```{r, echo = T, eval = T, error = T}
# base R
plot_dat <- data.frame(
  Year = 2010:2020,
  Population = as.numeric(US_pop[, c(8:17, 19)])
)
head(plot_dat)
```

## National population data

Finally, we can use the `plot` function to get our desired visualization:

```{r, echo = T, eval = T, error = T}
plot(plot_dat$Year, plot_dat$Population)
```

## Tidyverse strategy

Now let's see how we might approach the same task in the tidyverse. Our strategy will be to "tidy" the data so we have one row for each observation and one column for each observation.

First, let's remove the unnecessary column using the `select()` function. Here the `kable` function is used to print out our table.

::: {style="height:500px;overflow:auto;"}
```{r}
#| echo: TRUE
#| eval: TRUE
#| code-line-numbers: "2"
US_pop |> 
  select(-POPESTIMATE042020)  |>
  kable()
```
:::

## Tidyverse strategy

Now let's use the `pivot_longer` function to combine the `POPESTIMATE` columns into two variables: `Year` and `Population`:

::: {style="height:500px;overflow:auto;"}
```{r}
#| echo: TRUE
#| eval: TRUE
#| code-line-numbers: "3-5"
US_pop |> 
  select(-POPESTIMATE042020) |>
  pivot_longer(contains("POPESTIMATE"), 
               names_to = "Year",
               values_to = "Population") |>
  kable()
```
:::

What do we need to do next?

## Tidyverse strategy

Finally, we need to use the `str_sub()` function to shorten our `Year` variable before turning it into a numeric.
```{r}
#| echo: TRUE
#| eval: FALSE
#| code-line-numbers: "6"
US_pop |> 
  select(-POPESTIMATE042020) |>
  pivot_longer(contains("POPESTIMATE"), 
               names_to = "Year",
               values_to = "Population") |>
  mutate(Year = as.numeric(stringr::str_sub(Year, start = 12))) |>
  kable()
```
::: {style="height:450px;overflow:auto;"}
```{r}
#| echo: FALSE
#| eval: TRUE
#| code-line-numbers: "6"
US_pop |> 
  select(-POPESTIMATE042020) |>
  pivot_longer(contains("POPESTIMATE"), 
               names_to = "Year",
               values_to = "Population") |>
  mutate(Year = as.numeric(stringr::str_sub(Year, start = 12))) |>
  kable()
```
:::

## Tidyverse strategy

Now we can `|>` it to `ggplot`:

```{r, echo = F, eval = T, fig.height = 4, fig.width = 8}
#| echo: TRUE
#| eval: TRUE
#| code-line-numbers: "7-8"
US_pop |> 
  select(-POPESTIMATE042020) |>
  pivot_longer(contains("POPESTIMATE"), 
               names_to = "Year",
               values_to = "Population") |>
  mutate(Year = as.numeric(stringr::str_sub(Year, start = 12))) |>
  ggplot(aes(x = Year, y = Population)) + 
  geom_line()
```

## Tidyverse strategy: More complicated plots

We can map the `color` aesthetic to the region:

```{r}
#| echo: TRUE
#| eval: TRUE
#| code-line-numbers: "2, 7-8"
state_population |> 
  filter(SUMLEV == "020") |>
  select(-POPESTIMATE042020) |>
  pivot_longer(contains("POPESTIMATE"), 
               names_to = "Year",
               values_to = "Population") |>
  mutate(Year = as.numeric(stringr::str_sub(Year, start = 12))) |>
  ggplot(aes(x = Year, y = Population, color = NAME)) + 
  geom_line()
```

## `pivot_longer()` and `pivot_wider()`

The `pivot_longer()` and `pivot_wider()` functions are useful for reshaping data: `pivot_longer()` "lengthens" datasets and `pivot_wider()` does the opposite.

They are challenging to use because you need to have a clear vision of the data frame you want, not because they are complicated in R.

## Example: `pivot_longer()`

```{r, echo = T}
relig_income
```

## Example: `pivot_longer()`

```{r, echo = T}
relig_income |>
  pivot_longer(!religion, names_to = "income", values_to = "count")
```

## Example: `pivot_longer()`

```{r, echo = T}
billboard

```

## Example: `pivot_longer()`

```{r, echo = T}
billboard |>
  pivot_longer(
    cols = starts_with("wk"),
    names_to = "week",
    names_prefix = "wk",
    values_to = "rank",
    values_drop_na = TRUE
  )
```

## Example: `pivot_wider()`

```{r, echo = T}
fish_encounters
```

## Example: `pivot_wider()`

```{r, echo = T}
fish_encounters |>
  pivot_wider(names_from = station, values_from = seen)
```

## Example: `pivot_wider()`

```{r, echo = T}
us_rent_income
```

## Example: `pivot_wider()`

```{r, echo = T}
us_rent_income |>
  pivot_wider(
    names_from = variable,
    values_from = c(estimate, moe)
  )
```
