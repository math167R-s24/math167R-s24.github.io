---
title: "MATH167R: Vectorization and recursion"
author: "Peter Gao"
format: 
  revealjs:
    theme: [./slides.scss, ../theme.scss]
editor: visual
---

## Overview of today

-   Vectorization
-   Recursion
-   Lab time

## Vectorization

Last class, we saw how to use `for` and `while` loops to repeat tasks. However, often in R, functions or operations are vectorized, meaning they automatically act on every entry in a vector.

```{r}
#| echo: TRUE
#| eval: TRUE
x <- 1:4
x * 2
```

## Vectorization

```{r}
#| echo: TRUE
#| eval: TRUE
x <- 1:4
x < 2
```

. . .

```{r}
#| echo: TRUE
#| eval: TRUE
x <- 1:4
y <- 4:1
x + y
```

## Vectorization with data

We often rely on vectorization when working with columns of a data frame.

```{r}
#| echo: TRUE
#| eval: TRUE
#| message: FALSE
library(palmerpenguins)
library(tidyverse)
data(penguins)
penguins <- penguins |>
  mutate(bill_len_dep_ratio = bill_length_mm / bill_depth_mm)
penguins$bill_len_dep_ratio
```

## Vectorization in functions

Often we desire our function to be vectorized: so that it can take in vectors as inputs and perform an operation/task for each entry of the vector(s).

For this reason, it is important to begin remembering which functions are vectorized/vectorizable.

## Absolute error

```{r}
#| echo: TRUE
#| eval: TRUE
#| message: FALSE
weather_forecasts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-12-20/weather_forecasts.csv')
weather_forecasts <- weather_forecasts |>
  mutate(abs_err_precip = abs(observed_temp - forecast_temp))
```

**Exercise**: Write a function that takes as input two vectors of length $n$, `observed` and `predicted` and returns a vector of length $n$ of the absolute errors.

## Absolute error

```{r}
#| echo: TRUE
#| eval: TRUE
absolute_error <- function(observed, predicted) {
  return(abs(observed - predicted))
}
```

## Squared error

**Exercise**: Write a function that takes as input two vectors of length $n$, `observed` and `predicted` and returns a vector of length $n$ of the squared errors.

. . .

```{r}
#| echo: TRUE
#| eval: TRUE
squared_error <- function(observed, predicted) {
  return((observed - predicted)^2)
}
```

## Why not vectorize?

-   modifying in place
-   `while` loops
-   recursive functions

## Modifying in place

Sometimes we wish to change the value of some object iteratively. In such cases, vectorizing code may not be possible.

What do you expect the output of this code to be?

```{r}
#| echo: TRUE
#| eval: FALSE
x <- 1:10
for (i in 10:1) {
  x[i] <- sum(x[1:i])
}
x
```

. . .

```{r}
#| echo: FALSE
#| eval: TRUE
x <- 1:10
for (i in 10:1) {
  x[i] <- sum(x[1:i])
}
x
```

. . .

These are known as the triangular numbers.

## Recursion

Recursion is a method for solving a problem where the solution can be divided into simpler or smaller versions of the same problem.

**Example**: Factorial function

. . .

**Example**: Fractals

![](https://mathworld.wolfram.com/images/eps-svg/Fractal1_1000.svg){fig-align="center"}

## Recursive functions: factorial

Recursive functions are those that call themselves to solve problems.

```{r}
#| echo: TRUE
#| eval: FALSE
fact <- function(x) {
  if (x == 0 | x == 1) {
    return(1)
  } else {
    return(x * fact(x - 1))
  }
}
fact(4)
```

. . .

```{r}
#| echo: FALSE
#| eval: TRUE
fact <- function(x) {
  if (x == 0 | x == 1) {
    return(1)
  } else {
    return(x * fact(x - 1))
  }
}
fact(4)
```

## Recursive functions: Fibonacci

Exercise: write a function `fibonacci()` that takes as input a natural number `n` and returns the $n$th Fibonacci number.

. . .

```{r}
#| echo: TRUE
#| eval: TRUE
fibonacci <- function(n) {
  if (n == 1 | n == 2) {
    return(1)
  } else {
    return(fibonacci(n - 1) + fibonacci(n - 2))
  }
}
fibonacci(10)
```

## Recursive functions: Prime factorization

Challenge: write a function `factorize()` that takes as input a natural number `n` and returns its prime factorization.

. . .

How might we get started with this question?
