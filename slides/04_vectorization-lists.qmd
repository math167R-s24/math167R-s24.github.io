---
title: "MATH167R: Overview"
author: "Peter Gao"
format: 
  revealjs:
    theme: [./slides.scss, ../theme.scss]
editor: visual
---

## Warm-up

Whaa

## Introductions

## Overview of today

-   Types of data
-   Basic definitions: objects, expressions, values, functions
-   R Markdown and file management

# Types of data

## Types of data

We saw last class that we can use R to perform basic mathematical operations:

```{r, eval = T, echo = T}
3 + 5
```

. . .

We can also save these values as objects/variables and perform math on the objects:

```{r, eval = T, echo = T}
x <- 3
y <- 5
x + y
```

## Non-numerical data

Today we'll see that R can handle objects that are not numbers:

```{r, eval = T, echo = T, error = T}
z <- "Hello"
```

. . .

However, we need to be careful because not all operations work with all types of data:

```{r, eval = T, echo = T, error = T}
x + z
```

## Atomic vectors

-   logical
-   integer
-   double
-   character

## Atomic vectors

```{r, eval = T, out.width = 500, fig.align="center", echo = F}
knitr::include_graphics("https://d33wubrfki0l68.cloudfront.net/eb6730b841e32292d9ff36b33a590e24b6221f43/57192/diagrams/vectors/summary-tree-atomic.png")
```

from *Advanced R*, Hadley Wickham.

## Atomic vectors

```{r, eval = T, echo = T}
example_logical <- T
example_integer <- 1L
example_double <- 1.0
example_character <- "Hello"
```

. . .

```{r, eval = T, echo = T}
class(example_logical)
class(example_integer)
class(example_double)
class(example_character)
```

## Coercion

```{r, eval = T, echo = T}
as.numeric(example_logical)
as.numeric(example_character)
```

## Vectors

-   A **vector** is a set of atomic vectors of the same type
-   We create vectors using the function `c()`

```{r}
c(16, 3, 0, 7, -2)
```

-   We can shorthand vectors counting up (or down) using `:`

```{r}
1:5
```

## Vectors

-   We index vectors using `[index]` after the vector name

```{r}
x <- 1:5
x[3]
```

-   If we use a negative index, we return the vector with that element removed

```{r}
x[-4]
```

## Vector Data Types

Note that vectors can only have one type of data. So we can do

```{r}
c(1, 2, 3)
c("a", "b", "c")
```
but when we try

```{r}
c(1, "b", 3)
```
R will force the entries in our vector to be of the same type! This is a common source of bugs.

## Useful functions for vectors

* `max()`, `min()`, `mean()`, `median()`, `sum()`, `sd()`, `var()` 
* `length()` returns the number of elements in the vector
* `head()` and `tail()` return the beginning and end vectors
* `sort()` will sort
* `summary()` returns a 5-number summary
* `any()` and `all()` to check conditions on Boolean vectors
* `hist()` will return a crude histogram (we'll learn how to make this nicer later)

You will need some of these for Lab 1! 

If you are unclear about what any of them do, use `?` before the function name to read the documentation. You should get in the habit of checking function documentation a lot!


# Commenting Code

## What is a comment?

* Computers completely ignore comments (in R, any line preceded by `#`)
* Comments do not impact the functionality of your code at all.

## So why do them...

* Commenting a code allows you to write notes for readers of your code only
* Usually, that reader is you!
* Coding without comments is ill-advised, bordering on impossible

* Sneak peak at functions...

## Example

```{r}
#' Wald-type t test
#' @param mod an object of class \code{bbdml}
#' @return Matrix with wald test statistics and p-values. Univariate tests only.
waldt <- function(mod) {
  # Covariance matrix
  covMat <- try(chol2inv(chol(hessian(mod))), silent = TRUE)
  if (class(covMat) == "try-error") {
    warning("Singular Hessian! Cannot calculate p-values in this setting.")
    np <- length(mod$param)
    se <- tvalue <- pvalue <- rep(NA, np)
  } else {
    # Standard errors
    se <- sqrt(diag(covMat))
    # test statistic
    tvalue <- mod$param/se
    # P-value
    pvalue <- 2*stats::pt(-abs(tvalue), mod$df.residual)
  }
  # make table
  coef.table <- cbind(mod$param, se, tvalue, pvalue)
  dimnames(coef.table) <- list(names(mod$param),
                               c("Estimate", "Std. Error", "t value", "Pr(>|t|)"))
  return(coef.table)
}
```

## Comment Style Guide

* When starting out, you should comment most lines
* Frequent use of comments should allow most comments to be restricted to one line for 
readability
* A comment should go above its corresponding line, be indented equally with the next line, and use a single `#` to mark a comment
* Use a string of `-` or `=` to break your code into easily noticeable chunks
  * Example: `# Data Manipulation -----------`
  * RStudio allows you to collapse chunks marked like this to help with clutter

--
* There are exceptions to every rule! Usually, comments are to help **you**!


## Example of breaking rules

* Here's a snippet of a long mathematical function (lots of code omitted with ellipses for space).
* Code is divided into major steps marked by easily visible comments


## Example of breaking rules

```{r, eval = FALSE}
objfun <- function(theta, W, M, X, X_star, np, npstar, link, phi.link) {

  ### STEP 1 - Negative Log-likelihood

  # extract matrix of betas (np x 1), first np entries
  b      <- utils::head(theta, np)
  # extract matrix of beta stars (npstar x 1), last npstar entries
  b_star <- utils::tail(theta, npstar)

  ...

  ### STEP 2 - Gradient

  # define gam
  gam <- phi/(1 - phi)
```


## A final plea

* Being a successful programmer *requires* commenting your code
* Want to understand code you wrote >24 hours ago without comments?

## A final plea


* If you still aren't convinced...

--
* Clear commenting is required for this course


## Who are you to tell me how to type?

We will be using a mix of the [Tidyverse Style Guide](https://style.tidyverse.org/) by Hadley Wickham and the [Google Style Guide](https://google.github.io/styleguide/Rguide.html). Please see the links for details, but I will summarize some main points here and throughout the class as we learn more functionality, such as functions and packages.

You will be graded on following good code style!


## Object Names

Use either underscores (`_`) or big camel case (`BigCamelCase`) to separate words within an object name.
Do not use dots `.` to separate words in R functions!

```{r, eval = FALSE}
# Good
day_one
day_1
DayOne

# Bad
dayone
```


## Object Names

Names should be concise, meaningful, and (generally) nouns.

```{r, eval = FALSE}
# Good
day_one

# Bad
first_day_of_the_month
djm1
```


## Object Names

It is *very* important that object names do not write over common functions!

```{r, eval = FALSE}
# Very extra super bad
c <- 7
t <- 23
T <- FALSE
mean <- "something"
```

Note: `T` and `F` are R shorthand for `TRUE` and `FALSE`, respectively. In general, spell them 
out to be as clear as possible.


## Spacing

Put a space after every comma, just like in English writing.

```{r, eval = FALSE}
# Good
x[, 1]

# Bad
x[,1]
x[ ,1]
x[ , 1]
```

Do not put spaces inside or outside parentheses for regular function calls.

```{r, eval = FALSE}
# Good
mean(x, na.rm = TRUE)

# Bad
mean (x, na.rm = TRUE)
mean( x, na.rm = TRUE )
```


---

## Spacing with Operators

Most of the time when you are doing math, conditionals, logicals, or assignment, your operators should be surrounded by spaces. (e.g. for `==`, `+`, `-`, `<-`, etc.)

```{r, eval = FALSE}
# Good
height <- (feet * 12) + inches
mean(x, na.rm = 10)

# Bad
height<-feet*12+inches
mean(x, na.rm=10)
```

There are some exceptions we will learn more about later, such as the power symbol `^`. 
See the [Tidyverse Style Guide](https://style.tidyverse.org/) for more details!

---

## Extra Spacing

Adding extra spaces ok if it improves alignment of `=` or `<-`.

```{r, eval = FALSE}
# Good
list(
  total = a + b + c,
  mean  = (a + b + c) / n
)

# Also fine
list(
  total = a + b + c,
  mean = (a + b + c) / n
)
```


---

## Long Lines of Code

Strive to limit your code to 80 characters per line. This fits comfortably on a printed page with a reasonably sized font. 

If a function call is too long to fit on a single line, use one line each for the function name, each argument, and the closing `)`. This makes the code easier to read and to change later.


```{r, eval = FALSE}
# Good
do_something_very_complicated(
  something = "that",
  requires = many,
  arguments = "some of which may be long"
)

# Bad
do_something_very_complicated("that", requires, many, arguments,
                              "some of which may be long"
                              )
```

*Tip! Try RStudio > Preferences > Code > Display > Show Margin with Margin column 
80 to give yourself a visual cue!*


## Assignment

We use `<-` instead of `=` for assignment. 
This is moderately controversial if you find yourself in the right (wrong?) communities.

```{r, eval = FALSE}
# Good
x <- 5

# Bad
x = 5
```


## Semicolons

In R, semi-colons (`;`) are used to execute pieces of R code on a single line.
In general, this is bad practice and should be avoided. 
Also, you never need to end lines of code with semi-colons!

```{r, eval = FALSE}
# Bad
a <- 2; b <- 3

# Also bad
a <- 2;
b <- 3;

# Good
a <- 2
b <- 3
```


## Quotes and Strings

Use `"`, not `'`, for quoting text. The only exception is when the text already contains double quotes and no single quotes.

```{r, eval = FALSE}
# Bad
'Text'
'Text with "double" and \'single\' quotes'

# Good
"Text"
'Text with "quotes"'
'<a href="http://style.tidyverse.org">A link</a>'
```
