---
title: "MATH167R: Hypothesis Testing"
author: "Peter Gao"
format: 
  revealjs:
    theme: [./slides.scss, ../theme.scss]
editor: visual
---

## Overview of today

-   Review of basic hypothesis tests
-   Designing your own hypothesis test
-   Permutation tests

## Summary: hypothesis testing

1.  Define null and alternative hypotheses.

    -   ex. $H_0:\mu = 0$ and $H_a:\mu\neq 0$

2.  Compute a test statistic for which the null sampling distribution is known (based on assumptions about the population/sample).

    -   ex. $T=(\overline{X}_n-\mu)/(S^2/\sqrt{n})\sim t_{n-1}$

3.  Compare the test statistic with the null distribution to obtain a P-value.

    -   ex. $P(|T|>|t|)$ where $t$ is the observed test statistic.

## Example: Two-sample $z$-test

**Assumptions**:

1.  $X_1, \ldots, X_m$ is a random sample from a distribution with mean $\mu_1$ and variance $\sigma_1^2$.
2.  $Y_1, \ldots, Y_n$ is a random sample from a distribution with mean $\mu_2$ and variance $\sigma_2^2$.
3.  The $X$ and $Y$ samples are independent of one another.
4.  The sample sizes are adequately large (usually appropriate if $m>40$ and $n>40$.

## Example: Two-sample $z$-test

**Hypotheses**:

-   H_0: $\mu_1=\mu_2$
-   H_a: $\mu_1\not=\mu_2$

## Example: Two-sample $z$-test

Under these assumptions, $\overline{X}-\overline{Y}$ is approximately normal and the test statistic $$Z=\frac{\overline{X}-\overline{Y}-(\mu_1-\mu_2)}{\sqrt{\frac{S_1^2}{m}+\frac{S_2^2}{n}}}$$ has approximately a standard normal distribution when $H_0$ is true.

## Example: Two-sample $t$-test

When the samples are small, but the population distributions are approximately normal, the standardized test statistic $$T=\frac{\overline{X}-\overline{Y}-(\mu_1-\mu_2)}{\sqrt{\frac{S_1^2}{m}+\frac{S_2^2}{n}}}$$ has approximately a $t$ distribution with df $v$ estimated from the data by

$$\nu =\frac{\left(\frac{s_1^2}{m}+\frac{s_2^2}{n}\right)^2}{\frac{(s_1^2/m)^2}{m-1}+\frac{(s_2^2/n)^2}{n-1}}$$

## Example: Two-sample $t$-test

We can use the `sleep` data in R, which contains Student's example data on the effect of two sleeping drugs on 10 patients, to test out the `t.test()` function.

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
t.test(extra ~ group, data = sleep)
```

## "There is only one test"

![Image by [Allen Downey](https://allendowney.github.io/ElementsOfDataScience/13_hypothesis.html)](images/hypothesis_testing.png)

## "There is only one test": Tim and Bob

![[Lea et al. (2007)](https://link.springer.com/article/10.3758/BF03194119)](images/tim_bob.png)

## "There is only one test": Tim and Bob

![Image by [Allen Downey](https://allendowney.github.io/ElementsOfDataScience/13_hypothesis.html)](images/hypothesis_testing.png){fig-align="right" width="20"}

What is the data? Test statistic? Model of $H_0$? P-value?

## Designing your own hypothesis test

\small

Suppose we have five sequences of 200 coin flips.

```{r load_flips}
#| echo: false
#| eval: true
#| cache: true
#| message: false
#| warning: false
#| fig-width: 6
#| fig-height: 5
#| out.width: "70%"
#| fig.align: "center"
#| fig-cap: ""
library(tidyverse)
flips <- read_csv("~/Dropbox/teaching/math167R-s24/math167R-s24.github.io/static/flips.csv")
head(flips)
```

Only one sequence is generated by flipping a fair coin, using the code `sample(c("H", "T"), 200, replace = T)`.

Can we design a hypothesis test to help us identify the true sequence?

This activity adapted from a blog post from [Alex Hayes](https://www.alexpghayes.com/post/2022-11-02-hypothesis-testing-by-example).

## Designing your own hypothesis test

First, load the flips using the following code.

```{r load_flips_dummy}
#| echo: true
#| eval: true
#| cache: true
#| message: false
#| warning: false
#| fig-width: 6
#| fig-height: 5
#| out.width: "70%"
#| fig.align: "center"
#| fig-cap: ""
library(tidyverse)
flips <- read_csv("https://math167r-s24.github.io/static/flips.csv")
head(flips)
```

Can you tell which is real and which are fake?

## Visual inspection

```{r visualize_flips}
#| echo: false
#| eval: true
#| cache: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 5
#| out.width: "100%"
#| fig.align: "center"
#| fig-cap: ""
flips_long <- flips |>
  mutate(id = 1:200) |>
  pivot_longer(-id,  names_to = "Sequence", values_to = "Flip")

flips_long |> 
  ggplot(aes(x = id, y = Flip, group = Sequence)) +
  geom_line() +
  geom_point(aes(color = Flip)) +
  facet_grid(rows = vars(Sequence)) + 
  theme(
    legend.position = "none",
    axis.title = element_blank()
  )
```

## Visual inspection

```{r visualize_flips_dummy}
#| echo: true
#| eval: false
#| cache: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 5
#| out.width: "100%"
#| fig.align: "center"
#| fig-cap: ""
flips_long <- flips |>
  mutate(id = 1:200) |>
  pivot_longer(-id,  names_to = "Sequence", values_to = "Flip")

flips_long |> 
  ggplot(aes(x = id, y = Flip, group = Sequence)) +
  geom_line() +
  geom_point(aes(color = Flip)) +
  facet_grid(rows = vars(Sequence)) + 
  theme(
    legend.position = "none",
    axis.title = element_blank()
  )
```

## A simple test: Counting the number of heads

We can use the test we discussed last class for a sample proportion:

```{=tex}
\begin{align}
H_0: p&=1/2\\
H_a: p&\neq 1/2
\end{align}
```
where we **assume** that the flips $X_1,...,X_n$ are iid $X_i \stackrel{iid}{\sim} \mathrm{Binomial}(1, p)$ with probability of heads $p$.

## A simple test: Counting the number of heads

What are the test statistics for each of our sequences? One option is to use the total number of heads.

```{r test_stats}
#| echo: false
#| eval: true
#| cache: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 5
#| out.width: "100%"
#| fig.align: "center"
#| fig-cap: ""
flips_long |>
  group_by(Sequence) |>
  summarize(nHeads = sum(Flip == "H"))
```

## A simple test: Counting the number of heads

Do any of these indicate that certain sequences are fake? How could we get corresponding P-values?

**Approach one**: Use the normal approximation: $$\widehat{p}\sim N\left(p, \sqrt{\frac{p(1-p)}{n}}\right)$$

```{r Pvalues}
#| echo: true
#| eval: true
#| cache: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 5
#| out.width: "100%"
#| fig.align: "center"
#| fig-cap: ""
phats <- flips_long |>
  group_by(Sequence) |>
  summarize(phat = mean(Flip == "H"))
# two-sided p-values
(1 - pnorm(abs(phats$phat - .5), sd = sqrt(.5 * .5 / 200))) * 2
```

This suggests that sequence C has too many heads.

## A simple test: Counting the number of heads

**Approach two**: Use simulations to estimate the distribution of number of heads **under the null**:

```{r Pvalues_sim}
#| echo: false
#| eval: true
#| cache: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 5
#| out.width: "100%"
#| fig.align: "center"
#| fig-cap: ""
sim_totals <- data.frame(x = rbinom(30000, 200, .5))
flip_totals <- flips_long |>
  group_by(Sequence) |>
  summarize(nHeads = sum(Flip == "H"))
ggplot() +
  geom_histogram(data = sim_totals, aes(x = x)) +
  geom_vline(data = flip_totals, aes(color = Sequence, xintercept = nHeads)) +
  xlab("Number of heads")
```

## A simple test: Counting the number of heads

**Approach two**: Use simulations to estimate the distribution of number of heads **under the null**:

```{r Pvalues_sim_dummy_hist}
#| echo: true
#| eval: false
#| cache: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 5
#| out.width: "100%"
#| fig.align: "center"
#| fig-cap: ""
sim_totals <- data.frame(x = rbinom(30000, 200, .5))
flip_totals <- flips_long |>
  group_by(Sequence) |>
  summarize(nHeads = sum(Flip == "H"))
ggplot() +
  geom_histogram(data = sim_totals, aes(x = x)) +
  geom_vline(data = flip_totals, aes(color = Sequence, xintercept = nHeads)) +
  xlab("Number of heads")
```

## A simple test: Counting the number of heads

**Approach two**: Use simulations to estimate the distribution of number of heads **under the null**:

```{r Pvalues_sim_dummy}
#| echo: true
#| eval: true
#| cache: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 5
#| out.width: "100%"
#| fig.align: "center"
#| fig-cap: ""
p_vals <- sapply(flip_totals$nHeads,
                 function(x) mean(abs(sim_totals - 100) >= (x - 100)))
p_vals
```

## A slightly different test: streak length

We can also consider a different test statistic: longest streak.

```{r streaks}
#| echo: true
#| eval: true
#| cache: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 5
#| out.width: "100%"
#| fig.align: "center"
#| fig-cap: ""
flip_streaks <- flips_long |>
  group_by(Sequence) |>
  summarize(longest_streak = max(rle(Flip)$length))
flip_streaks
```

## A slightly different test: streak length

We can then simulate the null distribution of streak length.

```{r streaks_sim_dummy}
#| echo: true
#| eval: false
#| cache: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 5
#| out.width: "100%"
#| fig.align: "center"
#| fig-cap: ""
#| 
sim_streaks <- 
  data.frame(
    x = replicate(10000, 
                  max(rle(sample(c("H", "T"), size = 200, replace = T))$length)
    )
  )
ggplot() +
  geom_histogram(data = sim_streaks, aes(x = x), binwidth = 1) +
  geom_vline(data = flip_streaks,
             aes(color = Sequence, xintercept = longest_streak)) +
  xlab("Longest streak")
```

## A slightly different test: streak length

```{r streaks_sim}
#| echo: false
#| eval: true
#| cache: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 5
#| out.width: "100%"
#| fig.align: "center"
#| fig-cap: ""
#| 
sim_streaks <- 
  data.frame(
    x = replicate(10000, 
                  max(rle(sample(c("H", "T"), size = 200, replace = T))$length)
    )
  )
ggplot() +
  geom_histogram(data = sim_streaks, aes(x = x)) +
  geom_vline(data = flip_streaks,
             aes(color = Sequence, xintercept = longest_streak)) +
  xlab("Longest streak")
```

## A slightly different test: streak length

Note that calculating the P-value is tricky here--a one-sided test may make the most sense.

```{r Pvalues_streak}
#| echo: true
#| eval: true
#| cache: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 5
#| out.width: "100%"
#| fig.align: "center"
#| fig-cap: ""
p_vals <- sapply(flip_streaks$longest_streak,
                 function (x) mean(sim_streaks$x > x))
p_vals
```

This suggests that the longest streaks are too long for sequence B. Note that we could try other test statistics. What about average streak length?

## Designing your own hypothesis test

1.  Come up with your own test statistic.
2.  Simulate the null distribution of your test statistic.
3.  Can you identify which sequence is the real one?

## P-Hacking: Designing a test after seeing the data

In principle, we should decide which test to use **before** seeing the data. Why?

I could use the following test statistic: number of times the exact sequence $D$ is obtained. What is the P-value for each sequence?

```{r}
knitr::knit_exit()
```

```{r flips_code}
#| echo: true
#| eval: false
#| cache: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 5
#| out.width: "100%"
#| fig.align: "center"
#| fig-cap: ""
library(stringr)
set.seed(555)
n <- 200
A <- paste0(sample(c("HTHT", "THTH", "HTHT"), 50, replace = T), collapse = "") |>
  str_split_1("") 
B <-  paste0(sample(c("HHHHH", "HHHHT", "TTTTH",
                      "TTTTT", "TTTHH", "HHHTT",
                      "HTTTT", "THHHH", "HHTTT",
                      "TTHHH"), 40, replace = T), collapse = "") |>
  str_split_1("")
C <- paste0(sample(c("HT", "TH", "HH", "TT"), 100, replace = T, 
                   prob = c(.2, .2, .4, .2)), collapse = "") |>
  str_split_1("") 
D <- paste0(sample(c("H", "T"), 200, replace = T), collapse = "") |>
  str_split_1("") 
E <- "H"
for (i in 2:n) {
  p <- ifelse(E[i-1] == "H", 1/3, 2/3)
  E[i] <- sample(c("H", "T"), size = 1, prob = c(p, 1-p))
} 
flips <- data.frame(
  A = A,
  B = B,
  C = C,
  D = D,
  E = E
)
flips_long <- flips |>
  mutate(id = 1:200) |>
  pivot_longer(-id,  names_to = "Sequence", values_to = "Flip")
flips_long |>
  group_by(Sequence) |>
  summarize(nHeads = sum(Flip == "H"))
write_csv(flips, "~/Dropbox/teaching/math167R-s24/math167R-s24.github.io/static/flips.csv")
flips <- read_csv("~/Dropbox/teaching/math167R-s24/math167R-s24.github.io/static/flips.csv")
```
