---
title: "MATH167R: Functions and Loops"
author: "Peter Gao"
format: 
  revealjs:
    theme: [./slides.scss, ../theme.scss]
editor: visual
---

## Overview of today

-   Writing R functions

-   Loops

## Anatomy of a function

Recall the structure of a function:

```{r}
#| echo: TRUE
#| eval: FALSE
function_name <- function(param1, param2 = "default") {
  # body of the function
  return(output)
}
```

-   `function_name`: the name you want to give your function, what you will use to call it
-   `function()`: call this to define a function
-   `param1`, `param2`: formal arguments input by the user. You can assign default values by setting them equal to something in the call to `function()`
-   **body**: the actual code that is executed
-   `return()`: the output value **returned** to the user

## Exercise: degrees to radians

<br>

Write a function `degreesToRadians` that takes as input one number, `degrees`, and returns its value in radians. You do not need to check the data type of the input.

## Exercise: degrees to radians

<br>

```{r}
#| echo: TRUE
#| eval: TRUE
degreesToRadians <- function(degrees) {
  return((degrees / 360) * 2 * pi)
}
degreesToRadians(180)
```

## Additional notes on functions

<br>

-   *How do I know if a function is working*?

    -   Test it on easy examples for which you know the results
    -   When using `if`, test all the possible cases

## Loops

<br>

**Loops** enable us to repeat a line/lines of code many times.

R provides three types of explicit loops: `for`, `while`, and `repeat`. We will focus on `for` and `while`.

## `for` loops

<br>

`for` loops repeat a chunk of code for each value of a vector.

::: center
`for (name in vector) {body}`
:::

<br>

. . .

```{r}
#| echo: TRUE
#| eval: FALSE
for (i in 1:8) {
  print(i)
}
```

. . .

```{r}
#| echo: FALSE
#| eval: TRUE
for (i in 1:8) {
  print(i)
}
```

## Example: Vector sum

```{r}
#| echo: TRUE
#| eval: TRUE
x <- c(1:10)
sum(x)

total_sum <- 0
for (i in x) {
  total_sum <- total_sum + i
}
print(total_sum)
```

## Example: Fibonacci sequence

```{r}
#| echo: TRUE
#| eval: TRUE
# code to compute the first 10 Fibonacci numbers
fib_10 <- numeric(10) # empty numeric vector of length 10
fib_10[1] <- 1
fib_10[2] <- 1
for (i in 3:10) {
  fib_10[i] <- fib_10[i - 1] + fib_10[i - 2]
}
fib_10
```

## `while` loops

<br>

`while` loops continuously evaluate the inner code chunk until the condition is `FALSE`.

Be careful here: It is possible to get stuck in an infinite loop!

```{r}
#| echo: TRUE
#| eval: TRUE
x <- 0
while (x < 5) {
  cat("x is currently", x, ". Let's increase it by 1.")
  x <- x + 1
}
```

## `while` loops

<br>

Let's see if we can clean up that output. Add `"\n"` to a string to force a line break.

```{r}
#| echo: TRUE
#| eval: TRUE
x <- 0
while (x < 5) {
  cat("x is currently ", x, ". Let's increase it by 1! \n", sep = "")
  x <- x + 1
}
```

## Example: String input

```{r}
#| echo: TRUE
#| eval: TRUE
string_vector <- c("a", "b", "c", "d", "e")
for (mystring in string_vector) {
  print(mystring)
}
```

## Nested Loops

In nested loops, the innermost loop iterates most quickly.

```{r}
#| echo: TRUE
#| eval: TRUE
counter <- 0
for (i in 1:3) {
  for (j in 1:2) {
    counter <- counter + 1
    cat("i = ", i, ", j = ", j, ", counter = ", counter, "\n", sep = "")
  }
}
```

## Nested Loops

```{r}
#| echo: TRUE
#| eval: TRUE
for (i in 1:3) {
  for (j in 1:2) {
    print(i * j)
  }
}
```

## Filling in a vector

Note: Usually, this is an inefficient way to do this. We will see a faster way to work with vectors next class.

```{r}
#| echo: TRUE
#| eval: TRUE
# Inefficient
x <- rep(NA, 5)
for (i in 1:5) {
  x[i] <- i * 2
}
x

# Much better
x <- seq(2, 10, by = 2)
x
```

## Filling in a vector

```{r}
#| echo: TRUE
#| eval: TRUE
library(stringr)
x <- rep(NA, 5)
my_strings <- c("a", "a ", "a c", "a ca", "a cat")
for (i in 1:5) {
  x[i] <- str_length(my_strings[i])
  print(x)
}
```

## Filling in a matrix

Note: Usually, this is an inefficient way to do this. We will see a faster way to work with vectors next class.

```{r}
#| echo: TRUE
#| eval: TRUE
x <- matrix(NA, nrow = 4, ncol = 3)
for (i in 1:4) {
  for (j in 1:3) {
    x[i, j] <- i * j
  }
}
x
```

## Continue until positive sample

```{r}
#| echo: TRUE
#| eval: TRUE
set.seed(3)
x <- -1
while (x < 0) {
  x <- rnorm(1)
  print(x)
}
x
```

## Combining Loops and Conditional Evaluation

Consider the following code. What do you think it does?

```{r}
#| echo: TRUE
#| eval: FALSE
for (i in 1:10) {
  if (i %% 2 == 1) {
    print("odd")
  } else {
    print("even")
  }
}
```

. . .

```{r}
#| echo: FALSE
#| eval: TRUE
for (i in 1:10) {
  if (i %% 2 == 1) {
    print("odd")
  } else {
    print("even")
  }
}
```

## Fizz Buzz

Let's play Fizz Buzz.

1.  Everyone takes turns to count incrementally.
2.  Any number divisible by three is replaced with the word "fizz."
3.  Any number divisible by five is replaced with the word "buzz."
4.  Any number divisible by both three and five is replaced with the word "fizzbuzz."

## Fizz Buzz

Can we write code for a computer to play fizz buzz with itself? Suppose we want the computer to play Fizz Buzz up to 100.

. . .

```{r}
#| echo: TRUE
#| eval: FALSE
for (i in 1:100) {
  if (i %% 3 == 0 & i %% 5 == 0) {
    print("fizzbuzz")
  } else if (i %% 3 == 0) {
    print("fizz")
  } else if (i %% 5 == 0) {
    print("buzz")
  } else {
    print(i)
  }
}
```

. . .

```{r}
#| echo: FALSE
#| eval: TRUE 
for (i in 1:100) {
  if (i %% 3 == 0 & i %% 5 == 0) {
    print("fizzbuzz")
  } else if (i %% 3 == 0) {
    print("fizz")
  } else if (i %% 5 == 0) {
    print("buzz")
  } else {
    print(i)
  }
}
```

## Coding challenges

-   Project Euler
-   HackerRank
-   LeetCode (doesn't support R)
