---
title: "MATH167R: Functions and Loops"
author: "Peter Gao"
format: 
  revealjs:
    theme: [./slides.scss, ../theme.scss]
editor: visual
---

## Overview of today

-   Writing R functions
-   Loops
-   Vectorization
-   Recursion

## Anatomy of a function

Recall the structure of a function:

```{r}
#| echo: TRUE
#| eval: FALSE
function_name <- function(param1, param2 = "default") {
  # body of the function
  return(output)
}
```

-   `function_name`: the name you want to give your function, what you will use to call it
-   `function()`: call this to define a function
-   `param1`, `param2`: formal arguments input by the user. You can assign default values by setting them equal to something in the call to `function()`
-   **body**: the actual code that is executed
-   `return()`: the output value **returned** to the user

## Exercise: degrees to radians

Write a function `degreesToRadians` that takes as input one number, `degrees`, and returns its value in radians. You do not need to check the data type of the input.

## Exercise: degrees to radians

```{r}
#| echo: TRUE
#| eval: TRUE
degreesToRadians <- function(degrees) {
  return((degrees / 360) * 2 * pi)
}
degreesToRadians(180)
```

## Additional notes on functions

-   *How do I know if a function is working*?

    -   Test it on easy examples for which you know the results
    -   When using `if`, test all the possible cases

## Loops

**Loops** enable us to repeat a line/lines of code many times.

R provides three types of explicit loops: `for`, `while`, and `repeat`. We will focus on `for` and `while`.

## `for` loops

`for` loops repeat a chunk of code for each value of a vector.

::: center
`for (name in vector) {body}`
:::

. . .

```{r}
#| echo: TRUE
#| eval: FALSE
for (i in 1:8) {
  print(i)
}
```

. . .

```{r}
#| echo: FALSE
#| eval: TRUE
for (i in 1:8) {
  print(i)
}
```

## Example: Vector sum

```{r}
#| echo: TRUE
#| eval: TRUE
x <- c(1:10)
sum(x)

total_sum <- 0
for (i in x) {
  total_sum <- total_sum + i
}
print(total_sum)
```

## Example: Fibonacci sequence

```{r}
#| echo: TRUE
#| eval: TRUE
# code to compute the first 10 Fibonacci numbers
fib_10 <- numeric(10) # empty numeric vector of length 10
fib_10[1] <- 1
fib_10[2] <- 1
for (i in 3:10) {
  fib_10[i] <- fib_10[i - 1] + fib_10[i - 2]
}
fib_10
```

## `while` loops

`while` loops continuously evaluate the inner code chunk until the condition is `FALSE`.

Be careful here: It is possible to get stuck in an infinite loop!

```{r}
#| echo: TRUE
#| eval: TRUE
x <- 0
while (x < 5) {
  cat("x is currently", x, ". Let's increase it by 1.")
  x <- x + 1
}
```

## `while` loops

Let's see if we can clean up that output. Add `"\n"` to a string to force a line break.

```{r}
#| echo: TRUE
#| eval: TRUE
x <- 0
while (x < 5) {
  cat("x is currently ", x, ". Let's increase it by 1! \n", sep = "")
  x <- x + 1
}
```

## Example: String input

```{r}
#| echo: TRUE
#| eval: TRUE
string_vector <- c("a", "b", "c", "d", "e")
for (mystring in string_vector) {
  print(mystring)
}
```

## Nested Loops

In nested loops, the innermost loop iterates most quickly.

```{r}
#| echo: TRUE
#| eval: TRUE
counter <- 0
for (i in 1:3) {
  for (j in 1:2) {
    counter <- counter + 1
    cat("i = ", i, ", j = ", j, ", counter = ", counter, "\n", sep = "")
  }
}
```

## Nested Loops

```{r}
#| echo: TRUE
#| eval: TRUE
for (i in 1:3) {
  for (j in 1:2) {
    print(i * j)
  }
}
```

## Filling in a vector

Note: Usually, this is an inefficient way to do this. We will see a faster way to work with vectors next class.

```{r}
#| echo: TRUE
#| eval: TRUE
# Inefficient
x <- rep(NA, 5)
for (i in 1:5) {
  x[i] <- i * 2
}
x

# Much better
x <- seq(2, 10, by = 2)
x
```

## Filling in a vector

```{r}
#| echo: TRUE
#| eval: TRUE
library(stringr)
x <- rep(NA, 5)
my_strings <- c("a", "a ", "a c", "a ca", "a cat")
for (i in 1:5) {
  x[i] <- str_length(my_strings[i])
  print(x)
}
```

## Filling in a matrix

Note: Usually, this is an inefficient way to do this. We will see a faster way to work with vectors next class.

```{r}
#| echo: TRUE
#| eval: TRUE
x <- matrix(NA, nrow = 4, ncol = 3)
for (i in 1:4) {
  for (j in 1:3) {
    x[i, j] <- i * j
  }
}
x
```

## Continue until positive sample

```{r}
#| echo: TRUE
#| eval: TRUE
set.seed(3)
x <- -1
while (x < 0) {
  x <- rnorm(1)
  print(x)
}
x
```

## Combining Loops and Conditional Evaluation

Consider the following code. What do you think it does?

```{r}
#| echo: TRUE
#| eval: FALSE
for (i in 1:10) {
  if (i %% 2 == 1) {
    print("odd")
  } else {
    print("even")
  }
}
```

. . .

```{r}
#| echo: FALSE
#| eval: TRUE
for (i in 1:10) {
  if (i %% 2 == 1) {
    print("odd")
  } else {
    print("even")
  }
}
```

## Fizz Buzz

1.  Everyone takes turns to count incrementally.
2.  Any number divisible by three is replaced with the word "fizz."
3.  Any number divisible by five is replaced with the word "buzz."
4.  Any number divisible by both three and five is replaced with the word "fizzbuzz."

Can we write code for a computer to play fizz buzz with itself? Suppose we want the computer to play Fizz Buzz up to 100.

## Fizz Buzz

```{r}
#| echo: TRUE
#| eval: FALSE
for (i in 1:100) {
  if (i %% 3 == 0 & i %% 5 == 0) {
    print("fizzbuzz")
  } else if (i %% 3 == 0) {
    print("fizz")
  } else if (i %% 5 == 0) {
    print("buzz")
  } else {
    print(i)
  }
}
```

. . .

```{r}
#| echo: FALSE
#| eval: TRUE 
for (i in 1:100) {
  if (i %% 3 == 0 & i %% 5 == 0) {
    print("fizzbuzz")
  } else if (i %% 3 == 0) {
    print("fizz")
  } else if (i %% 5 == 0) {
    print("buzz")
  } else {
    print(i)
  }
}
```

## Coding challenges

-   Project Euler
-   HackerRank
-   LeetCode (doesn't support R)

## Vectorization

Last class, we saw how to use `for` and `while` loops to repeat tasks. However, often in R, functions or operations are vectorized, meaning they automatically act on every entry in a vector.

```{r}
#| echo: TRUE
#| eval: TRUE
x <- 1:4
x * 2
```

## Vectorization

```{r}
#| echo: TRUE
#| eval: TRUE
x <- 1:4
x < 2
```

```{r}
#| echo: TRUE
#| eval: TRUE
x <- 1:4
y <- 4:1
x + y
```

## Vectorization with data

We often rely on vectorization when working with columns of a data frame.

```{r}
#| echo: TRUE
#| eval: TRUE
#| message: FALSE
library(palmerpenguins)
library(tidyverse)
data(penguins)
penguins <- penguins |>
  mutate(bill_len_dep_ratio = bill_length_mm / bill_depth_mm)
penguins$bill_len_dep_ratio
```

## Vectorization in functions

Often we desire our function to be vectorized: so that it can take in vectors as inputs and perform an operation/task for each entry of the vector(s).

For this reason, it is important to begin remembering which functions are vectorized/vectorizable.

## Absolute error

```{r}
#| echo: TRUE
#| eval: TRUE
#| message: FALSE
weather_forecasts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-12-20/weather_forecasts.csv')
weather_forecasts <- weather_forecasts |>
  mutate(abs_err_temp = abs(observed_temp - forecast_temp))
```

**Exercise**: Write a function that takes as input two vectors of length $n$, `observed` and `predicted` and returns a vector of length $n$ of the absolute errors.

## Absolute error

```{r}
#| echo: TRUE
#| eval: TRUE
absolute_error <- function(observed, predicted) {
  return(abs(observed - predicted))
}
```

## Squared error

**Exercise**: Write a function that takes as input two vectors of length $n$, `observed` and `predicted` and returns a vector of length $n$ of the squared errors.

. . .

```{r}
#| echo: TRUE
#| eval: TRUE
squared_error <- function(observed, predicted) {
  return((observed - predicted)^2)
}
```

## Why not vectorize?

-   modifying in place
-   `while` loops
-   recursive functions

## Modifying in place

Sometimes we wish to change the value of some object iteratively. In such cases, vectorizing code may not be possible.

What do you expect the output of this code to be?

```{r}
#| echo: TRUE
#| eval: FALSE
x <- 1:10
for (i in 10:1) {
  x[i] <- sum(x[1:i])
}
x
```

. . .

```{r}
#| echo: FALSE
#| eval: TRUE
x <- 1:10
for (i in 10:1) {
  x[i] <- sum(x[1:i])
}
x
```

. . .

These are known as the triangular numbers.

## Recursion

Recursion is a method for solving a problem where the solution can be divided into simpler or smaller versions of the same problem.

**Example**: Factorial function

. . .

**Example**: Fractals

![](https://mathworld.wolfram.com/images/eps-svg/Fractal1_1000.svg){fig-align="center"}

## Recursive functions: factorial

Recursive functions are those that call themselves to solve problems.

```{r}
#| echo: TRUE
#| eval: FALSE
fact <- function(x) {
  if (x == 0 | x == 1) {
    return(1)
  } else {
    return(x * fact(x - 1))
  }
}
fact(4)
```

. . .

```{r}
#| echo: FALSE
#| eval: TRUE
fact <- function(x) {
  if (x == 0 | x == 1) {
    return(1)
  } else {
    return(x * fact(x - 1))
  }
}
fact(4)
```

## Recursive functions: Fibonacci

Exercise: write a function `fibonacci()` that takes as input a natural number `n` and returns the $n$th Fibonacci number.

. . .

```{r}
#| echo: TRUE
#| eval: TRUE
fibonacci <- function(n) {
  if (n == 1 | n == 2) {
    return(1)
  } else {
    return(fibonacci(n - 1) + fibonacci(n - 2))
  }
}
fibonacci(10)
```

## Recursive functions: Prime factorization

Write a function `factorize()` that takes as input a natural number `n` and returns its prime factorization.

. . .

How might we get started with this question?
