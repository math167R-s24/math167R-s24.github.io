{
  "hash": "e52ccb2d1687da2b54b808609de37246",
  "result": {
    "markdown": "---\ntitle: \"Lab 5\"\nauthor: \"YOUR NAME HERE\"\ndate: \"2023-09-20\"\nformat: \n  html:\n    embed-resources: true\n    code-tools: true\n    code-summary: \"Code\"\n---\n\n\nRemember, you must submit *both* your .Rmd and the compiled .html in order to receive full credit! In addition, to receive full credit, your code output and plots must be correctly formatted.\n\n### Collaborators\n\nFor this lab, please work with one to two other students. List their names here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# LOAD ANY RELEVANT PACKAGES HERE\n```\n:::\n\n\n## A. Basic functions\n\n1. Write a function `is_even()` that takes as input a single integer `x` and returns a logical that represents whether `x` is an even number or not. This function should check to make sure the input is an integer. If the input is not an integer, the function should stop with an informative error message.\n\n2. Evaluate your function with even numeric input.\n\n3. Evaluate your function with odd numeric input.\n\n4. Trigger your custom error message. Note: You will need to add the chunk option `error = TRUE` to your R Markdown code chunk. If you do not, your document will not compile.\n\n5. Write a function `get_factors()` that takes a single positive integer input `x` and outputs all of its factors as a vector. For example, since 10 is divisible by 1, 2, 5, and 10 itself, `get_factors(10)` should return a numeric vector containing 1, 2, 5, and 10.\n\n## B. Thresholding functions\n\n6. The hard-threshold function is defined as\n\n$$f_\\lambda(x) =\\begin{cases}\nx & |x|\\geq \\lambda\\\\\n0 & |x|<\\lambda\n\\end{cases}$$\n\nWrite an R function that takes two arguments as input: a numeric input `x` and a threshold `lambda`. Your function should return the value of $f_\\lambda(x)$ and work for vector input `x` of any length.\n\n7. For $\\lambda=4$, demonstrate your function on the vector c(-5, -3, 0, 3, 5).\n\n(Hint: the output should be the vector `-5, 0, 0, 0, 5`)\n\n8. For $\\lambda=2$,  demonstrate your function on the vector c(-7, -5, -3, 0, 3, 5, 7).\n\n\n## C. Skewness and Kurtosis\n\nSkewness describes how asymmetrical the distribution of a numerical variable is around its mean. Given observations $x_1,\\ldots, x_n$, we can calculate the sample skewness $s$ of a variable using the following formula:\n\n$$s = \\frac{\\frac{1}{n}\\sum\\limits_{i=1}^n(x_i-\\overline{x})^3}{\\left[\\frac{1}{n}\\sum\\limits_{i=1}^n(x_i-\\overline{x})^2\\right]^{3/2}}$$\nKurtosis is a measure of the \"tailedness\" of the distribution of a numerical variable is around its mean. Higher values of kurtosis indicate more extreme outliers. Given observations $x_1,\\ldots, x_n$, we can calculate the sample kurtosis $k$ of a variable using the following formula:\n\n$$k = \\frac{\\frac{1}{n}\\sum\\limits_{i=1}^n(x_i-\\overline{x})^4}{\\left[\\frac{1}{n}\\sum\\limits_{i=1}^n(x_i-\\overline{x})^2\\right]^{2}}-3$$\n\n9. Write a function `skewness()` that takes as input a numeric vector `x` and returns the sample skewness. There are functions in R that compute skewness, but you cannot use any of them--write your own implementation.\n\n10. Write a function `kurtosis()` that takes as input a numeric vector `x` and returns the sample skewness. There are functions in R that compute kurtosis, but you cannot use any of them--write your own implementation.\n\n11. Use your function to compute the sample skewness of the `arr_delay` variable in the `flights` dataset contained in the `nycflights13` package.\n\n12. Use your function to compute the sample kurtosis of the `arr_delay` variable in the `flights` dataset contained in the `nycflights13` package.\n\n\n## D. Finding an error\n\nSuppose you have two teams of runners participating in a 5k. We wish to write a function that takes as input two vectors representing the times of the runners in each team and returns a list of two vectors representing the ranks of each team's runners.\n\nFor example, if the first team's times are `c(16.8, 21.2, 19.1)` and the second team's times are `c(17.2, 18.1, 20.0)`, the function should return `c(1, 6, 4)` for the first team and `c(2, 3, 5)` for the second team. \n\nBelow is a draft version of the function `get_runner_ranks()`. However, there is an error somewhere. Use any method we discussed in class to identify the error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_runner_ranks <- function(x, y) {\n  # combine all runner times\n  combined_times <- c(x, y) \n  \n  # sort all runner times from fastest to slowest\n  sort(combined_times, decreasing = T)\n  \n  # create ranks vectors\n  ranks_x <- numeric(length(x))\n  ranks_y <- numeric(length(y))\n  \n  for (i in seq_along(ranks_x)) {\n    # look up rank of time i in x in combined_times\n    ranks_x[i] <- match(x[i], combined_times)\n  }\n  \n  for (i in seq_along(ranks_y)) {\n    # look up rank of time i in y in combined_times\n    ranks_y[i] <- match(y[i], combined_times)\n  }\n  \n  # return a list of first team and second team ranks\n  return(list(x = ranks_x, y = ranks_y))\n}\n```\n:::\n\n\n13. Below, write a corrected version of `get_runner_ranks()` and compute `get_runner_ranks(c(16.8, 21.2, 19.1), c(17.2, 18.1, 20.0))`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_runner_ranks <- function(x, y) {\n  # YOUR CODE HERE\n}\n```\n:::\n\n\n14. Explain in your own words what the error was.\n\n## E. Download data from an API\n\n\n",
    "supporting": [
      "06_lab_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}