{
  "hash": "e0f61e12d7cbae35f5933cef7ade170b",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Simulations\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: visual\n---\n\n\n## Overview of today\n\n-   Random variables in R\n-   The `r`, `p`, `d`, and `q` functions\n-   `replicate()`\n-   Writing simulations\n\n## Random variables in R\n\nWe have already seen a number of functions for generating random variables such as `sample()` and `rnorm()`.\n\nToday, we will expand on these functions and related functions for studying random variables and begin using them to write various simulations.\n\n## Random variables in R\n\nRemember that we can use the `sample()` function as follows to draw at random from a finite set with and without replacement:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(0:9, 10, replace = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 4 3 6 5 1 7 9 9 6 8\n```\n:::\n:::\n\n\nWhat if we want to generate $n$ samples from a normal distribution? Or a binomial distribution?\n\n## Simulating a coin-flipping game\n\nCan we write code to simulate this game?\n\n![](images/alice-bob.jpeg)\n\n## Simulating a coin-flipping game\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 100\nflips <- sample(x = c(\"H\", \"T\"), size = n, replace = T)\nHH_score <- 0\nHT_score <- 0\nfor (i in 2:n) {\n  if (flips[i-1] == \"H\" & flips[i] == \"H\") {\n    HH_score <- HH_score + 1\n  } \n  if (flips[i-1] == \"H\" & flips[i] == \"T\") {\n    HT_score <- HT_score + 1\n  }\n}\nHH_score\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 27\n```\n:::\n\n```{.r .cell-code}\nHT_score\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23\n```\n:::\n:::\n\n\n## Simulating a coin-flipping game\n\nWhat if we want to simulate this game many times? One approach is to wrap our code in a function, which we can run many times.\n\n## Simulating a coin-flipping game {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrun_one_sim <- function(seed, n) {\n  set.seed(seed)\n  flips <- sample(x = c(\"H\", \"T\"), size = n, replace = T)\n  HH_score <- 0\n  HT_score <- 0\n  for (i in 2:n) {\n    if (flips[i-1] == \"H\" & flips[i] == \"H\") {\n      HH_score <- HH_score + 1\n    } \n    if (flips[i-1] == \"H\" & flips[i] == \"T\") {\n      HT_score <- HT_score + 1\n    }\n  }\n  return(list(HH = HH_score, HT = HT_score))\n}\n# run 100000 simulations with n = 100\nresults <- lapply(1:10000, run_one_sim, n = 100)\n\nHH_scores <- sapply(results, function(x) x$HH)\nHT_scores <- sapply(results, function(x) x$HT)\n```\n:::\n\n\n## Simulating a coin-flipping game\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# proportion of Alice wins\nmean(HH_scores > HT_scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4567\n```\n:::\n\n```{.r .cell-code}\n# proportion of Bob wins\nmean(HT_scores > HH_scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4906\n```\n:::\n\n```{.r .cell-code}\n# proportion of ties\nmean(HH_scores == HT_scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0527\n```\n:::\n:::\n\n\n## Simulating a coin-flipping game\n\nWhy does Bob win more often? Intuitively, both \"HH\" and \"HT\" are equally likely when we flip a fair coin twice.\n\n## Simulating a coin-flipping game\n\nHere's a histogram of Alice and Bob's scores across the simulations. What do you notice? How might this explain our results?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](17_simulations_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Simulating a coin-flipping game\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot() +\n  geom_histogram(aes(x = HH_scores, fill = \"HH\"), \n                 alpha = .5, binwidth = 1) +\n  geom_histogram(aes(x = HT_scores, fill = \"HT\"), \n                 alpha = .5, binwidth = 1) + \n  ggtitle(\"Histogram of scores for Alice and Bob\") +\n  xlab(\"Score\")\n```\n:::\n\n\n## The `r`, `p`, `d`, and `q` functions\n\nWhat if we want to generate $n$ samples from a normal distribution? Or a binomial distribution?\n\nR provides functions for working with a variety of probability distributions. For most distributions, there are four functions: `r`, `p`, `d`, and `q`. As an example, let's look at the normal distribution.\n\n`rnorm()` can be used to generate `n` random observations from a normal distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(n = 5, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.25945096  0.03504629  1.45587714 -0.85642600 -0.06646623\n```\n:::\n:::\n\n\n## The `r`, `p`, `d`, and `q` functions\n\n`pnorm()` can be used to compute the distribution function at a value `q`. In other words, if $Z$ is a standard normal, pnorm returns the value of $$F(q)= P\\left(Z \\leq \\frac{q-\\mu}{\\sigma}\\right)$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(q = 1, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8413447\n```\n:::\n\n```{.r .cell-code}\npnorm(q = 1, mean = 1, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5\n```\n:::\n:::\n\n\n## The `r`, `p`, `d`, and `q` functions\n\n`qnorm()` can be used to compute the quantile function at a percentile `p`. In other words, if $Z$ is a standard normal the quantile function returns the value $x$ such that $$P\\left(Z\\leq \\frac{x-\\mu}{\\sigma}\\right)=p$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqnorm(p = .75, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6744898\n```\n:::\n\n```{.r .cell-code}\nqnorm(p = .5, mean = 1, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n## The `r`, `p`, `d`, and `q` functions\n\n`dnorm()` can be used to compute the density function at a value `x`: $$ f(x)={\\frac {1}{\\sigma {\\sqrt {2\\pi }}}}\\exp\\left\\{-{\\frac {1}{2}}\\left({\\frac {x-\\mu }{\\sigma }}\\right)^{2}\\right\\}$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndnorm(x = .5, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3520653\n```\n:::\n:::\n\n\n## Exercise\n\nCreate a histogram of 1000 samples from a normal distribution with mean 10 and standard deviation 20.\n\n## Exercise\n\nSuppose we perform a two-sided hypothesis test using a normal distribution and obtain a z-score of 1.24. How would we compute the p-value?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 * (1 - pnorm(q = 1.24, mean = 0, sd = 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2149754\n```\n:::\n:::\n\n\n. . .\n\nSuppose we perform a two-sided hypothesis test using a normal distribution and obtain a z-score of -2.12. How would we compute the p-value?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 * pnorm(q = -2.12, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.03400605\n```\n:::\n:::\n\n\n## The `r`, `p`, `d`, and `q` functions: binomial distribution\n\nPractice with the `rbinom()`, `pbinom()`, `dbinom()` and `qbinom()` functions:\n\n1.  If I flip a coin with probability of heads = 0.6 ten times, what is the probability of observing **exactly** 6 heads?\n\n2.  If I flip a coin with probability of heads = 0.6 ten times, what is the probability of observing 6 or fewer heads?\n\n3.  Consider an experiment where you flip a coin with a probability of heads = .6 ten times. Simulate this experiment 1000 times and create a histogram of your results.\n\n## Random seeds\n\nRemember that `set.seed()` can be used to ensure that you obtain the same results each time you run your code.\n\nFor example, if you include the command `x <- rnorm(1)` in an .Rmd document with running `set.seed()`, each time you knit, you will produce a different value of `x`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1022)\nrnorm(n = 1, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.6303919\n```\n:::\n:::\n\n\n## Monte Carlo methods\n\nMonte Carlo methods or Monte Carlo experiments use repeated random sampling to obtain numerical results or to approximate quantities of interest.\n\nMonte Carlo experiments are often used to:\n\n-   approximate integrals\n-   generate draws from a probability distribution\n-   optimize functions stochastically\n\n## Example: Transformations of random variables\n\nSuppose $X\\sim N(0, 1)$. What is $E(e^X)$?\n\nWe could use the change of variable formula to compute the expectation. Or we could use simulation to approximate this quantity. Asymptotic analysis is needed to study the convergence of our approximation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_sim <- 1000\nx <- rnorm(n_sim)\nexp_X <- exp(x)\nmean(exp_X)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.696632\n```\n:::\n:::\n\n\n## Example: Maximum of random variables\n\nSuppose $X_i\\sim \\mathrm{Exponential}(1)$ for $1\\leq i\\leq n$, for some $n$.\n\n-   What is $E(\\mathrm{max}(X_1,\\ldots, X_n))?$\n-   How does $E(\\mathrm{max}(X_1,\\ldots, X_n))$ change for different values of $n$?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1022)\nn_sim <- 1000\nn <- 10\nmaxes <- numeric(n_sim)\nfor (i in 1:n_sim) {\n  maxes[i] <- max(rexp(n, rate = 1))\n}\nmean(maxes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.931317\n```\n:::\n:::\n\n\n. . .\n\nWhat about for $n=100$? Should the expected maximum be larger or smaller?\n\n## Example: Maximum of random variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_sim <- 1000\nn <- 100\nmaxes <- numeric(n_sim)\nfor (i in 1:n_sim) {\n  maxes[i] <- max(rexp(n, rate = 1))\n}\nmean(maxes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.133737\n```\n:::\n:::\n\n\n## `replicate()` for repeated evaluation\n\nIn the previous code, we have been using `for` loops, which explicitly and repeatedly change global variables.\n\nWe can alternatively use the `replicate()` function to repeatedly evaluate an expression and in particular to repeatedly generate data. The data will be automatically organized into a matrix or vector.\n\n## `replicate()` for repeated evaluation\n\nFor example, we can repeatedly generate `n` exponential random variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreplicate(10, rexp(10)) # matrix output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            [,1]      [,2]      [,3]         [,4]       [,5]       [,6]\n [1,] 1.13043124 0.1479812 2.2223548 2.1268942156 2.39868030 0.14031279\n [2,] 0.55534004 1.9936832 1.5308543 0.3856013802 0.27843227 0.07257534\n [3,] 4.04774410 1.5802471 0.8427089 0.0285170421 0.08422752 0.16672644\n [4,] 0.95041912 1.2540541 2.3257087 1.2683416223 2.16567578 0.17816958\n [5,] 1.58876652 1.6758615 1.4261630 0.2769027893 0.74726688 0.17021181\n [6,] 1.99796987 2.0187209 2.4609051 0.2171987002 0.35444081 0.24326570\n [7,] 1.14231095 0.7548254 0.3966859 1.9520977567 0.15842032 1.31846979\n [8,] 0.02341325 1.8892792 2.2973738 0.3193784612 3.23298183 0.70573159\n [9,] 0.52699221 1.0601018 1.3775838 0.0007783933 1.68575293 0.21282549\n[10,] 0.02605074 1.1210718 7.7896914 0.9947959780 1.43672665 0.03251952\n            [,7]      [,8]       [,9]      [,10]\n [1,] 0.37598461 1.5698594 0.48767041 0.25788083\n [2,] 1.54188526 0.5463632 0.03341924 3.22056431\n [3,] 2.28019306 1.8544470 2.48718778 0.33689904\n [4,] 1.92829873 0.5781632 1.08695817 1.36571108\n [5,] 0.61021502 0.2839260 3.15368645 0.02273778\n [6,] 0.91375634 0.3061268 0.79635850 2.84436475\n [7,] 2.00932145 2.6931977 1.10894887 0.40095700\n [8,] 0.06227634 0.7167511 0.18378884 1.30463719\n [9,] 0.06959291 0.1803800 0.02571177 0.87495361\n[10,] 5.63161431 0.2733862 0.06480147 0.19743542\n```\n:::\n:::\n\n\n## `replicate()` for repeated evaluation\n\nAlternatively, we can repeatedly generate `n` exponential random variables and then take their maximum:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreplicate(10, max(rexp(10))) # vector output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2.084471 2.306936 3.248953 4.007540 1.415286 2.849782 2.835310 3.580029\n [9] 2.302169 1.573989\n```\n:::\n:::\n\n\n## `replicate()` for repeated evaluation\n\nUsing `replicate()`, the previous simulation is just:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaxes <- replicate(1000, max(rexp(n)))\nmean(maxes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.222014\n```\n:::\n:::\n\n\n## Example: Maximum of random variables\n\nWe can repeat this for many different values of `n`.\n\n\n::: {.cell hash='17_simulations_cache/revealjs/declarative.sim_57ac2668ff154adb256c8fb77bff8c58'}\n\n```{.r .cell-code}\nn_sim <- 1000\nn_values <- c(10, 25, 50, 100, 250, 500, 1000)\nmax_by_n <- c()\nfor (n in n_values) {\n  maxes <- numeric(n_sim)\n  for (i in 1:n_sim) {\n    maxes[i] <- max(rexp(n, rate = 1))\n  }\n  max_by_n <- c(max_by_n, mean(maxes))\n}\nmax_by_n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.998409 3.817743 4.514192 5.227332 6.073570 6.830615 7.484341\n```\n:::\n:::\n\n\n## Example: Maximum of random variables\n\nNote that we can write the maximum of exponentials simulation using `replicate()`:\n\n\n::: {.cell hash='17_simulations_cache/revealjs/functional.sim_73b3f5a1d55c972f189a1a6fca3c77c7'}\n\n```{.r .cell-code}\nmax_by_n <- vapply(\n  n_values, \n  function(n) mean(replicate(n_sim, max(rexp(n, rate = 1)))), \n  numeric(1)\n)\nmax_by_n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.915269 3.825054 4.561750 5.212782 6.098579 6.719019 7.448086\n```\n:::\n:::\n\n\n## Example: Maximum of random variables\n\nIt turns out that $\\mathrm{max}(X_1,\\ldots, X_n)$ can be modeled using a Gumbel distribution (after being transformed). Below, we plot the empirical mean and approximate the theoretical expectation (for large $n$).\n\n\n::: {.cell hash='17_simulations_cache/revealjs/plot_results_2efe9c3cd4ab858bbfd9daad6ce67db4'}\n\n```{.r .cell-code}\nplot(n_values, max_by_n,\n     type = \"l\",\n     xlab = \"n\", ylab = \"Maximum\",\n     main = paste0(\"Sample mean of maximums (black)\",\n                   \"and theoretical expectation (red)\"))\nlines(n_values, -digamma(1) + log(n_values), col = \"red\")\n```\n:::\n\n\n## Example: Maximum of random variables\n\n\n::: {.cell hash='17_simulations_cache/revealjs/plot_results2_8a236ca848ec5bdbed43b2bebeff8872'}\n::: {.cell-output-display}\n![](17_simulations_files/figure-revealjs/plot_results2-1.png){width=960}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}