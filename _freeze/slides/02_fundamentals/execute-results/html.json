{
  "hash": "8197328090e997233db2d9eff298b7f0",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Overview\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: visual\n---\n\n\n## Warm-up\n\nWhaa\n\n## Introductions\n\n## Overview of today\n\n-   Types of data\n-   Basic definitions: objects, expressions, values, functions\n-   R Markdown and file management\n\n# Types of data\n\n## Types of data\n\nWe saw last class that we can use R to perform basic mathematical operations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n. . .\n\nWe can also save these values as objects/variables and perform math on the objects:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\ny <- 5\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n## Non-numerical data\n\nToday we'll see that R can handle objects that are not numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- \"Hello\"\n```\n:::\n\n\n. . .\n\nHowever, we need to be careful because not all operations work with all types of data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx + z\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in x + z: non-numeric argument to binary operator\n```\n:::\n:::\n\n\n## Atomic vectors\n\n-   logical\n-   integer\n-   double\n-   character\n\n## Atomic vectors\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://d33wubrfki0l68.cloudfront.net/eb6730b841e32292d9ff36b33a590e24b6221f43/57192/diagrams/vectors/summary-tree-atomic.png){fig-align='center' width=500}\n:::\n:::\n\n\nfrom *Advanced R*, Hadley Wickham.\n\n## Atomic vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_logical <- T\nexample_integer <- 1L\nexample_double <- 1.0\nexample_character <- \"Hello\"\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(example_logical)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nclass(example_integer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nclass(example_double)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(example_character)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n## Coercion\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(example_logical)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nas.numeric(example_character)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n## Vectors\n\n-   A **vector** is a set of atomic vectors of the same type\n-   We create vectors using the function `c()`\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16  3  0  7 -2\n```\n:::\n:::\n\n\n-   We can shorthand vectors counting up (or down) using `:`\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\n## Vectors\n\n-   We index vectors using `[index]` after the vector name\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n-   If we use a negative index, we return the vector with that element removed\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 5\n```\n:::\n:::\n\n\n## Vector Data Types\n\nNote that vectors can only have one type of data. So we can do\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"b\" \"c\"\n```\n:::\n:::\n\nbut when we try\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"b\" \"3\"\n```\n:::\n:::\n\nR will force the entries in our vector to be of the same type! This is a common source of bugs.\n\n## Useful functions for vectors\n\n* `max()`, `min()`, `mean()`, `median()`, `sum()`, `sd()`, `var()` \n* `length()` returns the number of elements in the vector\n* `head()` and `tail()` return the beginning and end vectors\n* `sort()` will sort\n* `summary()` returns a 5-number summary\n* `any()` and `all()` to check conditions on Boolean vectors\n* `hist()` will return a crude histogram (we'll learn how to make this nicer later)\n\nYou will need some of these for Lab 1! \n\nIf you are unclear about what any of them do, use `?` before the function name to read the documentation. You should get in the habit of checking function documentation a lot!\n\n\n# Commenting Code\n\n## What is a comment?\n\n* Computers completely ignore comments (in R, any line preceded by `#`)\n* Comments do not impact the functionality of your code at all.\n\n## So why do them...\n\n* Commenting a code allows you to write notes for readers of your code only\n* Usually, that reader is you!\n* Coding without comments is ill-advised, bordering on impossible\n\n* Sneak peak at functions...\n\n## Example\n\n\n::: {.cell}\n\n:::\n\n\n## Comment Style Guide\n\n* When starting out, you should comment most lines\n* Frequent use of comments should allow most comments to be restricted to one line for \nreadability\n* A comment should go above its corresponding line, be indented equally with the next line, and use a single `#` to mark a comment\n* Use a string of `-` or `=` to break your code into easily noticeable chunks\n  * Example: `# Data Manipulation -----------`\n  * RStudio allows you to collapse chunks marked like this to help with clutter\n\n--\n* There are exceptions to every rule! Usually, comments are to help **you**!\n\n\n## Example of breaking rules\n\n* Here's a snippet of a long mathematical function (lots of code omitted with ellipses for space).\n* Code is divided into major steps marked by easily visible comments\n\n\n## Example of breaking rules\n\n\n::: {.cell}\n\n:::\n\n\n\n## A final plea\n\n* Being a successful programmer *requires* commenting your code\n* Want to understand code you wrote >24 hours ago without comments?\n\n## A final plea\n\n\n* If you still aren't convinced...\n\n--\n* Clear commenting is required for this course\n\n\n## Who are you to tell me how to type?\n\nWe will be using a mix of the [Tidyverse Style Guide](https://style.tidyverse.org/) by Hadley Wickham and the [Google Style Guide](https://google.github.io/styleguide/Rguide.html). Please see the links for details, but I will summarize some main points here and throughout the class as we learn more functionality, such as functions and packages.\n\nYou will be graded on following good code style!\n\n\n## Object Names\n\nUse either underscores (`_`) or big camel case (`BigCamelCase`) to separate words within an object name.\nDo not use dots `.` to separate words in R functions!\n\n\n::: {.cell}\n\n:::\n\n\n\n## Object Names\n\nNames should be concise, meaningful, and (generally) nouns.\n\n\n::: {.cell}\n\n:::\n\n\n\n## Object Names\n\nIt is *very* important that object names do not write over common functions!\n\n\n::: {.cell}\n\n:::\n\n\nNote: `T` and `F` are R shorthand for `TRUE` and `FALSE`, respectively. In general, spell them \nout to be as clear as possible.\n\n\n## Spacing\n\nPut a space after every comma, just like in English writing.\n\n\n::: {.cell}\n\n:::\n\n\nDo not put spaces inside or outside parentheses for regular function calls.\n\n\n::: {.cell}\n\n:::\n\n\n\n---\n\n## Spacing with Operators\n\nMost of the time when you are doing math, conditionals, logicals, or assignment, your operators should be surrounded by spaces. (e.g. for `==`, `+`, `-`, `<-`, etc.)\n\n\n::: {.cell}\n\n:::\n\n\nThere are some exceptions we will learn more about later, such as the power symbol `^`. \nSee the [Tidyverse Style Guide](https://style.tidyverse.org/) for more details!\n\n---\n\n## Extra Spacing\n\nAdding extra spaces ok if it improves alignment of `=` or `<-`.\n\n\n::: {.cell}\n\n:::\n\n\n\n---\n\n## Long Lines of Code\n\nStrive to limit your code to 80 characters per line. This fits comfortably on a printed page with a reasonably sized font. \n\nIf a function call is too long to fit on a single line, use one line each for the function name, each argument, and the closing `)`. This makes the code easier to read and to change later.\n\n\n\n::: {.cell}\n\n:::\n\n\n*Tip! Try RStudio > Preferences > Code > Display > Show Margin with Margin column \n80 to give yourself a visual cue!*\n\n\n## Assignment\n\nWe use `<-` instead of `=` for assignment. \nThis is moderately controversial if you find yourself in the right (wrong?) communities.\n\n\n::: {.cell}\n\n:::\n\n\n\n## Semicolons\n\nIn R, semi-colons (`;`) are used to execute pieces of R code on a single line.\nIn general, this is bad practice and should be avoided. \nAlso, you never need to end lines of code with semi-colons!\n\n\n::: {.cell}\n\n:::\n\n\n\n## Quotes and Strings\n\nUse `\"`, not `'`, for quoting text. The only exception is when the text already contains double quotes and no single quotes.\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}