{
  "hash": "c8e0551c5c34d5586e3525bcfc22b1a6",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Merging Data\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: source\n---\n\n\n## Overview of today\n\n-   Merging data\n-   Exploratory data analysis and workflow\n-   Organizing output and saving images\n-   Lab time\n\n## Joining data\n\nOften we will want to combine two data frames. To do so, we typically need a **key** variable which exists in both data frames.\n\n## Example: Flights data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\ndata(flights)\ndata(airlines)\nhead(flights)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div style=\"border: 1px solid #ddd; padding: 0px; overflow-y: scroll; height:350px; \"><table class=\"table table-striped\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> year </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> month </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> day </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> dep_time </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> sched_dep_time </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> dep_delay </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> arr_time </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> sched_arr_time </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> arr_delay </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> carrier </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> flight </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> tailnum </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> origin </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> dest </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> air_time </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> distance </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> hour </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> minute </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> time_hour </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 517 </td>\n   <td style=\"text-align:right;\"> 515 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 830 </td>\n   <td style=\"text-align:right;\"> 819 </td>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:left;\"> UA </td>\n   <td style=\"text-align:right;\"> 1545 </td>\n   <td style=\"text-align:left;\"> N14228 </td>\n   <td style=\"text-align:left;\"> EWR </td>\n   <td style=\"text-align:left;\"> IAH </td>\n   <td style=\"text-align:right;\"> 227 </td>\n   <td style=\"text-align:right;\"> 1400 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:left;\"> 2013-01-01 05:00:00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 533 </td>\n   <td style=\"text-align:right;\"> 529 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 850 </td>\n   <td style=\"text-align:right;\"> 830 </td>\n   <td style=\"text-align:right;\"> 20 </td>\n   <td style=\"text-align:left;\"> UA </td>\n   <td style=\"text-align:right;\"> 1714 </td>\n   <td style=\"text-align:left;\"> N24211 </td>\n   <td style=\"text-align:left;\"> LGA </td>\n   <td style=\"text-align:left;\"> IAH </td>\n   <td style=\"text-align:right;\"> 227 </td>\n   <td style=\"text-align:right;\"> 1416 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 29 </td>\n   <td style=\"text-align:left;\"> 2013-01-01 05:00:00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 542 </td>\n   <td style=\"text-align:right;\"> 540 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 923 </td>\n   <td style=\"text-align:right;\"> 850 </td>\n   <td style=\"text-align:right;\"> 33 </td>\n   <td style=\"text-align:left;\"> AA </td>\n   <td style=\"text-align:right;\"> 1141 </td>\n   <td style=\"text-align:left;\"> N619AA </td>\n   <td style=\"text-align:left;\"> JFK </td>\n   <td style=\"text-align:left;\"> MIA </td>\n   <td style=\"text-align:right;\"> 160 </td>\n   <td style=\"text-align:right;\"> 1089 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 40 </td>\n   <td style=\"text-align:left;\"> 2013-01-01 05:00:00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 544 </td>\n   <td style=\"text-align:right;\"> 545 </td>\n   <td style=\"text-align:right;\"> -1 </td>\n   <td style=\"text-align:right;\"> 1004 </td>\n   <td style=\"text-align:right;\"> 1022 </td>\n   <td style=\"text-align:right;\"> -18 </td>\n   <td style=\"text-align:left;\"> B6 </td>\n   <td style=\"text-align:right;\"> 725 </td>\n   <td style=\"text-align:left;\"> N804JB </td>\n   <td style=\"text-align:left;\"> JFK </td>\n   <td style=\"text-align:left;\"> BQN </td>\n   <td style=\"text-align:right;\"> 183 </td>\n   <td style=\"text-align:right;\"> 1576 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 45 </td>\n   <td style=\"text-align:left;\"> 2013-01-01 05:00:00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 554 </td>\n   <td style=\"text-align:right;\"> 600 </td>\n   <td style=\"text-align:right;\"> -6 </td>\n   <td style=\"text-align:right;\"> 812 </td>\n   <td style=\"text-align:right;\"> 837 </td>\n   <td style=\"text-align:right;\"> -25 </td>\n   <td style=\"text-align:left;\"> DL </td>\n   <td style=\"text-align:right;\"> 461 </td>\n   <td style=\"text-align:left;\"> N668DN </td>\n   <td style=\"text-align:left;\"> LGA </td>\n   <td style=\"text-align:left;\"> ATL </td>\n   <td style=\"text-align:right;\"> 116 </td>\n   <td style=\"text-align:right;\"> 762 </td>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> 2013-01-01 06:00:00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 554 </td>\n   <td style=\"text-align:right;\"> 558 </td>\n   <td style=\"text-align:right;\"> -4 </td>\n   <td style=\"text-align:right;\"> 740 </td>\n   <td style=\"text-align:right;\"> 728 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:left;\"> UA </td>\n   <td style=\"text-align:right;\"> 1696 </td>\n   <td style=\"text-align:left;\"> N39463 </td>\n   <td style=\"text-align:left;\"> EWR </td>\n   <td style=\"text-align:left;\"> ORD </td>\n   <td style=\"text-align:right;\"> 150 </td>\n   <td style=\"text-align:right;\"> 719 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 58 </td>\n   <td style=\"text-align:left;\"> 2013-01-01 05:00:00 </td>\n  </tr>\n</tbody>\n</table></div>\n\n`````\n:::\n:::\n\n\n## Keys\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(airlines)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div style=\"border: 1px solid #ddd; padding: 0px; overflow-y: scroll; height:350px; \"><table class=\"table table-striped\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> carrier </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> name </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 9E </td>\n   <td style=\"text-align:left;\"> Endeavor Air Inc. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> AA </td>\n   <td style=\"text-align:left;\"> American Airlines Inc. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> AS </td>\n   <td style=\"text-align:left;\"> Alaska Airlines Inc. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B6 </td>\n   <td style=\"text-align:left;\"> JetBlue Airways </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> DL </td>\n   <td style=\"text-align:left;\"> Delta Air Lines Inc. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> EV </td>\n   <td style=\"text-align:left;\"> ExpressJet Airlines Inc. </td>\n  </tr>\n</tbody>\n</table></div>\n\n`````\n:::\n:::\n\n\n## Joining Data\n\nWe can use SQL-like join statements in R:\n\n-   `inner_join(x, y, by = \"key\")`: match observations only when exact keys are equal\n-   `left_join(x, y, by = \"key\")`: keep all observations in `x`, match observations in `y` by keys, `NA` otherwise\n-   `right_join(x, y, by = \"key\")`: keep all observations in `y`, match observations in `x` by keys, `NA` otherwise\n-   `outer_join(x, y, by = \"key\")`: keep all observations in `x` and `y`, match keys where possible, `NA` otherwise\n\nUsually, `left_join()` will suffice.\n\n## Example: Band members\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nband_members\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  name  band   \n  <chr> <chr>  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n```\n:::\n\n```{.r .cell-code}\nband_instruments\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n:::\n:::\n\n\n## Example: Band members\n\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members |> inner_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n```\n:::\n\n```{.r .cell-code}\nband_members |> left_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n:::\n:::\n\n\n## Example: Band members\n\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members |> right_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith <NA>    guitar\n```\n:::\n\n```{.r .cell-code}\nband_members |> full_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n:::\n:::\n\n\n## Example: Band members\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To suppress the message about joining variables, supply `by`\nband_members |> inner_join(band_instruments, by = join_by(name))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n```\n:::\n:::\n\n\n## Inner join vs. outer join\n\n<img src=\"images/join-inner.png\" height=\"90\"/>\n\n<img src=\"images/join-outer.png\" height=\"360\"/>\n\nImages courtesy of Hadley Wickham. [(Link)](https://r4ds.had.co.nz/relational-data.html)\n\n## Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# inner join\nmerge(band_members, band_instruments, by.x = \"name\", by.y = \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  name    band  plays\n1 John Beatles guitar\n2 Paul Beatles   bass\n```\n:::\n\n```{.r .cell-code}\n# outer join\nmerge(band_members, band_instruments, by.x = \"name\", by.y = \"name\", all = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   name    band  plays\n1  John Beatles guitar\n2 Keith    <NA> guitar\n3  Mick  Stones   <NA>\n4  Paul Beatles   bass\n```\n:::\n:::\n\n\n## Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# left join\nmerge(band_members, band_instruments, by.x = \"name\", by.y = \"name\", all.x = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  name    band  plays\n1 John Beatles guitar\n2 Mick  Stones   <NA>\n3 Paul Beatles   bass\n```\n:::\n\n```{.r .cell-code}\n# right join\nmerge(band_members, band_instruments, by.x = \"name\", by.y = \"name\", all.y = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   name    band  plays\n1  John Beatles guitar\n2 Keith    <NA> guitar\n3  Paul Beatles   bass\n```\n:::\n:::\n\n\n## Exercise: Flights data\n\nHow can we combine the `flights` and `airlines` data? \n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  left_join(airlines, by = \"carrier\") |>\n  head()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div style=\"border: 1px solid #ddd; padding: 0px; overflow-y: scroll; height:350px; \"><table class=\"table table-striped\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> year </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> month </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> day </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> dep_time </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> sched_dep_time </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> dep_delay </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> arr_time </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> sched_arr_time </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> arr_delay </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> carrier </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> flight </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> tailnum </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> origin </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> dest </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> air_time </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> distance </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> hour </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> minute </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> time_hour </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> name </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 517 </td>\n   <td style=\"text-align:right;\"> 515 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 830 </td>\n   <td style=\"text-align:right;\"> 819 </td>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:left;\"> UA </td>\n   <td style=\"text-align:right;\"> 1545 </td>\n   <td style=\"text-align:left;\"> N14228 </td>\n   <td style=\"text-align:left;\"> EWR </td>\n   <td style=\"text-align:left;\"> IAH </td>\n   <td style=\"text-align:right;\"> 227 </td>\n   <td style=\"text-align:right;\"> 1400 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:left;\"> 2013-01-01 05:00:00 </td>\n   <td style=\"text-align:left;\"> United Air Lines Inc. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 533 </td>\n   <td style=\"text-align:right;\"> 529 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 850 </td>\n   <td style=\"text-align:right;\"> 830 </td>\n   <td style=\"text-align:right;\"> 20 </td>\n   <td style=\"text-align:left;\"> UA </td>\n   <td style=\"text-align:right;\"> 1714 </td>\n   <td style=\"text-align:left;\"> N24211 </td>\n   <td style=\"text-align:left;\"> LGA </td>\n   <td style=\"text-align:left;\"> IAH </td>\n   <td style=\"text-align:right;\"> 227 </td>\n   <td style=\"text-align:right;\"> 1416 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 29 </td>\n   <td style=\"text-align:left;\"> 2013-01-01 05:00:00 </td>\n   <td style=\"text-align:left;\"> United Air Lines Inc. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 542 </td>\n   <td style=\"text-align:right;\"> 540 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 923 </td>\n   <td style=\"text-align:right;\"> 850 </td>\n   <td style=\"text-align:right;\"> 33 </td>\n   <td style=\"text-align:left;\"> AA </td>\n   <td style=\"text-align:right;\"> 1141 </td>\n   <td style=\"text-align:left;\"> N619AA </td>\n   <td style=\"text-align:left;\"> JFK </td>\n   <td style=\"text-align:left;\"> MIA </td>\n   <td style=\"text-align:right;\"> 160 </td>\n   <td style=\"text-align:right;\"> 1089 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 40 </td>\n   <td style=\"text-align:left;\"> 2013-01-01 05:00:00 </td>\n   <td style=\"text-align:left;\"> American Airlines Inc. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 544 </td>\n   <td style=\"text-align:right;\"> 545 </td>\n   <td style=\"text-align:right;\"> -1 </td>\n   <td style=\"text-align:right;\"> 1004 </td>\n   <td style=\"text-align:right;\"> 1022 </td>\n   <td style=\"text-align:right;\"> -18 </td>\n   <td style=\"text-align:left;\"> B6 </td>\n   <td style=\"text-align:right;\"> 725 </td>\n   <td style=\"text-align:left;\"> N804JB </td>\n   <td style=\"text-align:left;\"> JFK </td>\n   <td style=\"text-align:left;\"> BQN </td>\n   <td style=\"text-align:right;\"> 183 </td>\n   <td style=\"text-align:right;\"> 1576 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 45 </td>\n   <td style=\"text-align:left;\"> 2013-01-01 05:00:00 </td>\n   <td style=\"text-align:left;\"> JetBlue Airways </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 554 </td>\n   <td style=\"text-align:right;\"> 600 </td>\n   <td style=\"text-align:right;\"> -6 </td>\n   <td style=\"text-align:right;\"> 812 </td>\n   <td style=\"text-align:right;\"> 837 </td>\n   <td style=\"text-align:right;\"> -25 </td>\n   <td style=\"text-align:left;\"> DL </td>\n   <td style=\"text-align:right;\"> 461 </td>\n   <td style=\"text-align:left;\"> N668DN </td>\n   <td style=\"text-align:left;\"> LGA </td>\n   <td style=\"text-align:left;\"> ATL </td>\n   <td style=\"text-align:right;\"> 116 </td>\n   <td style=\"text-align:right;\"> 762 </td>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> 2013-01-01 06:00:00 </td>\n   <td style=\"text-align:left;\"> Delta Air Lines Inc. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2013 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 554 </td>\n   <td style=\"text-align:right;\"> 558 </td>\n   <td style=\"text-align:right;\"> -4 </td>\n   <td style=\"text-align:right;\"> 740 </td>\n   <td style=\"text-align:right;\"> 728 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:left;\"> UA </td>\n   <td style=\"text-align:right;\"> 1696 </td>\n   <td style=\"text-align:left;\"> N39463 </td>\n   <td style=\"text-align:left;\"> EWR </td>\n   <td style=\"text-align:left;\"> ORD </td>\n   <td style=\"text-align:right;\"> 150 </td>\n   <td style=\"text-align:right;\"> 719 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 58 </td>\n   <td style=\"text-align:left;\"> 2013-01-01 05:00:00 </td>\n   <td style=\"text-align:left;\"> United Air Lines Inc. </td>\n  </tr>\n</tbody>\n</table></div>\n\n`````\n:::\n:::\n\n\n\n## Exercise: Flights data\n\nUse the `flights` and `weather` datasets from the `nycflights13` package to create a scatter plot with `wind_speed` on the x-axis and `dep_delay` on the `y-axis` for January flights from Newark.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(flights)\ndata(weather)\n```\n:::\n\n\n## Exercise: Flights data\n\n\n::: {.cell layout-align=\"center\" hash='10_data-management_cache/revealjs/unnamed-chunk-14_50210087237a2221b70dc643f198b1d8'}\n::: {.cell-output-display}\n![](10_data-management_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Example: California data\n\nThe `tidycensus` package provides easy access to Census data via R. In order to download data using `tidycensus`, you will need a [Census API Key](https://api.census.gov/data/key_signup.html).\n\nFor now, you can think of an API key as an ID card you use to download data from the Census.\n\n## Example: California data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidycensus)\n# the following command can be used to save your API key on your computer\n# census_api_key(\"YOUR_KEY_HERE\", overwrite = FALSE, install = FALSE)\n\n# the following code loads my local Census API Key, which is used to access \n# census data\nSys.getenv(\"CENSUS_API_KEY\")\n\n# 2021 median income by county\nincome_2021 <- get_acs(geography = \"county\", \n                       variables = c(medincome = \"B19013_001\"), \n                       state = \"CA\", \n                       year = 2021)\n\n# 2010 median income by county\nincome_2010 <- get_acs(geography = \"county\", \n                       variables = c(medincome = \"B19013_001\"), \n                       state = \"CA\", \n                       year = 2010)\n```\n:::\n\n\n\n\n## Example: California data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(income_2021)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFALSE # A tibble: 6 × 5\nFALSE   GEOID NAME                         variable  estimate   moe\nFALSE   <chr> <chr>                        <chr>        <dbl> <dbl>\nFALSE 1 06001 Alameda County, California   medincome   112017  1043\nFALSE 2 06003 Alpine County, California    medincome    96000 24486\nFALSE 3 06005 Amador County, California    medincome    69955  5482\nFALSE 4 06007 Butte County, California     medincome    59863  1989\nFALSE 5 06009 Calaveras County, California medincome    70119  6448\nFALSE 6 06011 Colusa County, California    medincome    61861  6540\n```\n:::\n:::\n\n\n\n## Example: California data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincome_2021 <- income_2021 |>\n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe)\n  ) |>\n  select(-moe_medincome) |>\n  rename(medincome_2021 = estimate_medincome)\nhead(income_2021)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  GEOID NAME                         medincome_2021\n  <chr> <chr>                                 <dbl>\n1 06001 Alameda County, California           112017\n2 06003 Alpine County, California             96000\n3 06005 Amador County, California             69955\n4 06007 Butte County, California              59863\n5 06009 Calaveras County, California          70119\n6 06011 Colusa County, California             61861\n```\n:::\n:::\n\n\n## Example: California data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# repeat for 2010 data\nincome_2010 <- income_2010 |>\n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe)\n  ) |>\n  select(-moe_medincome) |>\n  rename(medincome_2010 = estimate_medincome)\n```\n:::\n\n\n## Example: California data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincome_combined <- income_2010 |>\n  left_join(income_2021, by = c(\"GEOID\", \"NAME\"))\nggplot(income_combined, aes(x = medincome_2010, y = medincome_2021)) +\n  geom_point() + \n  geom_abline(slope = 1) + \n  labs(title = \"Median income in 2021 vs. 2010, CA Counties\",\n       subtitle = \"American Community Survey\",\n       y = \"2021 Median Income\",\n       x = \"2010 Median Income\")\n```\n:::\n\n\n## Example: California data\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10_data-management_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n\n## Data manipulation cheatsheet\n\n-   `filter()` subset rows\n-   `select()` subset columns, use with `contains()`, `starts_with()`, `ends_with()`, ...\n-   `mutate()` create columns\n-   `group_by()`, `summarize()`, `count()` group and summarize groups\n-   `rename()` rename columns\n-   `pivot_longer()`, `pivot_wider()` reshape data\n-   `inner_join()`, `left_join()`, `right_join()`, `outer_join()` combine data (like SQL)\n\n[Much, much more! (Click me for a cheat sheet)](https://rstudio.com/resources/cheatsheets/)\n\n## Exploratory data analysis\n\nExploratory data analysis is the process of learning about a dataset by visualizing, summarizing, and transforming it.\n\nBy now we've seen most of the skills you need to carry out exploratory data analysis (EDA). As Wickham, Çetinkaya-Rundel, and Grolemund put it, the cycle of EDA looks something like this:\n\n1.  Generate questions about your data.\n\n2.  Explore your questions by visualizing, transforming, and modelling your data.\n\n3.  Use your findings to refine your questions and generate new questions.\n\nYou can read their walkthrough of the EDA process [here](https://r4ds.hadley.nz/eda).\n\n## Downloading data\n\nUp until now, we've mostly been working with small datasets and I have given you code to **download this data from the internet**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggproduction  <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-11/egg-production.csv')\n```\n:::\n\n\nIf you put this line of code in a chunk in your .Rmd file, each time you **knit/render**, you will have to download this data.\n\nSo, if you do not have access to the internet, you will be unable to knit to html.\n\n## Saving data locally\n\nYou can instead download the data to a local folder or use the following code to save it locally:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadr::write_csv(eggproduction, \"~/Documents/MATH167R/data/egg-production.csv\")\n```\n:::\n\n\nYou can subsequently load it locally (no internet needed):\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggproduction <- readr::read_csv(\"~/Documents/MATH167R/data/egg-production.csv\")\n```\n:::\n\n\n## Saving data locally\n\nAny R object can be saved as a .rds file (including plots or output).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nstate_population <- readr::read_csv(\"https://www2.census.gov/programs-surveys/popest/datasets/2010-2020/national/totals/nst-est2020.csv\")\nUS_pop_tidy <- state_population |>\n  filter(SUMLEV == \"010\") |> \n  select(-POPESTIMATE042020) |>\n  pivot_longer(contains(\"POPESTIMATE\"), \n               names_to = \"Year\",\n               values_to = \"Population\") |>\n  mutate(Year = as.numeric(stringr::str_sub(Year, start = 12)))\nsaveRDS(US_pop_tidy, \"~/Documents/MATH167R/data/US_pop_tidy.rds\")\n```\n:::\n\n\nYou can subsequently load it locally using `readRDS()` (no internet needed):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUS_pop_tidy <- readRDS(\"~/Documents/MATH167R/data/US_pop_tidy.rds\")\n```\n:::\n\n\n## Saving plots locally\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUS_pop_plot <- US_pop_tidy |>\n  ggplot(aes(x = Year, y = Population)) + \n  geom_line()\nsaveRDS(US_pop_plot, \"~/Documents/MATH167R/data/US_pop_plot.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nUS_pop_plot <- readRDS(\"~/Documents/MATH167R/data/US_pop_plot.rds\")\nprint(US_pop_plot)\n```\n\n::: {.cell-output-display}\n![](10_data-management_files/figure-revealjs/unnamed-chunk-28-1.png){width=960}\n:::\n:::\n\n\n## Saving multiple objects\n\nUsing the `save()` function, you can save multiple objects as a .RData file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(US_pop_plot, US_pop_tidy, file = \"~/Documents/MATH167R/data/US_pop_combined.RData\")\n```\n:::\n\n\nLoad these objects using a `load()` call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"~/Documents/MATH167R/data/US_pop_combined.RData\")\nprint(US_pop_plot)\n```\n\n::: {.cell-output-display}\n![](10_data-management_files/figure-revealjs/unnamed-chunk-30-1.png){width=960}\n:::\n:::\n\n\n## Saving plots locally\n\nWe can save plots to .pdf files using a call to `pdf()` before the plot code and then `dev.off()` afterwards.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdf(file = \"~/Documents/MATH167R/results/US_pop_plot.pdf\",\n    width = 8, height = 6) # dimensions in inches\nUS_pop_plot <- US_pop_tidy |>\n  ggplot(aes(x = Year, y = Population)) + \n  geom_line() + \n  ggtitle(\"US Population, 2010-2020\")\nprint(US_pop_plot)\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n:::\n\n\n## Generating clean tables using `kable()`\n\nThe `kable()` function from the `knitr` package can be sued to generate clean tables for publication. The `kableExtra` package contains many extra functions for formatting tables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstate_population <- readr::read_csv(\"https://www2.census.gov/programs-surveys/popest/datasets/2010-2020/national/totals/nst-est2020.csv\")\n\n# code to print the data\nlibrary(knitr)\nkable(state_population, digits = 3, row.names = F) |>\n  kableExtra::kable_styling(\"striped\", full_width = T) |> \n  kableExtra::scroll_box(height = \"560px\")\n```\n:::\n\n\n## Caching code chunks\n\nYou can name your chunks and use the code chunk `cache = T` to save the output of a code chunk so you don't have to wait for the code to run every time you knit.\n\n\n::: {.cell hash='10_data-management_cache/revealjs/pop_plot_76c7b1d51437aca89b0382f64f63c9e5'}\n\n````{.cell-code}\n```{{r pop_plot, cache = T}}\nUS_pop_plot <- US_pop_tidy |>\n  ggplot(aes(x = Year, y = Population)) + \n  geom_line() + \n  ggtitle(\"US Population, 2010-2020\")\nprint(US_pop_plot)\n```\n````\n\n::: {.cell-output-display}\n![](10_data-management_files/figure-revealjs/pop_plot-1.png){width=960}\n:::\n:::\n\n\n\n## Caching code chunks\n\nHowever, that means plots/output will *not* automatically update if you change the \"upstream\" data processing pipeline. You must change the cached chunk or delete the cache to rerun the code.\n\nBefore you turn in your assignments, you should clear all the cached files and knit from scratch to make sure no errors have been introduced.\n\n## Lab Time\n\nThe rest of class is devoted to working in groups on your lab assignment.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}