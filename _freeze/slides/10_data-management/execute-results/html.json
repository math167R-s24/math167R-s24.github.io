{
  "hash": "7ca8be1545f8d772b9c1d78bdf75099c",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Data Management\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: visual\n---\n\n\n## Overview of today\n\n-   Workflow for downloading and saving data\n-   Organizing output and saving images\n-   Exploratory data analysis\n-   Group lab time\n\n## Downloading data\n\nUp until now, we've mostly been working with small datasets and I have given you code to **download this data from the internet**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggproduction  <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-11/egg-production.csv')\n```\n:::\n\n\nIf you put this line of code in a chunk in your .Rmd file, each time you **knit/render**, you will have to download this data.\n\nSo, if you do not have access to the internet, you will be unable to knit to html.\n\n## Saving data locally\n\nYou can instead download the data to a local folder or use the following code to save it locally:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadr::write_csv(eggproduction, \"~/Documents/MATH167R/data/egg-production.csv\")\n```\n:::\n\n\nYou can subsequently load it locally (no internet needed):\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggproduction <- readr::read_csv(\"~/Documents/MATH167R/data/egg-production.csv\")\n```\n:::\n\n\n## Saving data locally\n\nAny R object can be saved as a .rds file (including plots or output).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nstate_population <- readr::read_csv(\"https://www2.census.gov/programs-surveys/popest/datasets/2010-2020/national/totals/nst-est2020.csv\")\nUS_pop_tidy <- state_population |>\n  filter(SUMLEV == \"010\") |> \n  select(-POPESTIMATE042020) |>\n  pivot_longer(contains(\"POPESTIMATE\"), \n               names_to = \"Year\",\n               values_to = \"Population\") |>\n  mutate(Year = as.numeric(stringr::str_sub(Year, start = 12)))\nsaveRDS(US_pop_tidy, \"~/Documents/MATH167R/data/US_pop_tidy.rds\")\n```\n:::\n\n\nYou can subsequently load it locally using `readRDS()` (no internet needed):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUS_pop_tidy <- readRDS(\"~/Documents/MATH167R/data/US_pop_tidy.rds\")\n```\n:::\n\n\n## Saving plots locally\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUS_pop_plot <- US_pop_tidy |>\n  ggplot(aes(x = Year, y = Population)) + \n  geom_line()\nsaveRDS(US_pop_plot, \"~/Documents/MATH167R/data/US_pop_plot.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nUS_pop_plot <- readRDS(\"~/Documents/MATH167R/data/US_pop_tidy.rds\")\nprint(US_pop_plot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 9\n   SUMLEV REGION DIVISION STATE NAME       CENSUS2010POP ESTIMATESBASE2010  Year\n   <chr>  <chr>  <chr>    <chr> <chr>              <dbl>             <dbl> <dbl>\n 1 010    0      0        00    United St…     308745538         308758105  2010\n 2 010    0      0        00    United St…     308745538         308758105  2011\n 3 010    0      0        00    United St…     308745538         308758105  2012\n 4 010    0      0        00    United St…     308745538         308758105  2013\n 5 010    0      0        00    United St…     308745538         308758105  2014\n 6 010    0      0        00    United St…     308745538         308758105  2015\n 7 010    0      0        00    United St…     308745538         308758105  2016\n 8 010    0      0        00    United St…     308745538         308758105  2017\n 9 010    0      0        00    United St…     308745538         308758105  2018\n10 010    0      0        00    United St…     308745538         308758105  2019\n11 010    0      0        00    United St…     308745538         308758105  2020\n# ℹ 1 more variable: Population <dbl>\n```\n:::\n:::\n\n\n## Saving multiple objects\n\nUsing the `save()` function, you can save multiple objects as a .RData file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(US_pop_plot, US_pop_tidy, file = \"~/Documents/MATH167R/data/US_pop_combined.RData\")\n```\n:::\n\n\nLoad these objects using a `load()` call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"~/Documents/MATH167R/data/US_pop_combined.RData\")\nprint(US_pop_plot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 9\n   SUMLEV REGION DIVISION STATE NAME       CENSUS2010POP ESTIMATESBASE2010  Year\n   <chr>  <chr>  <chr>    <chr> <chr>              <dbl>             <dbl> <dbl>\n 1 010    0      0        00    United St…     308745538         308758105  2010\n 2 010    0      0        00    United St…     308745538         308758105  2011\n 3 010    0      0        00    United St…     308745538         308758105  2012\n 4 010    0      0        00    United St…     308745538         308758105  2013\n 5 010    0      0        00    United St…     308745538         308758105  2014\n 6 010    0      0        00    United St…     308745538         308758105  2015\n 7 010    0      0        00    United St…     308745538         308758105  2016\n 8 010    0      0        00    United St…     308745538         308758105  2017\n 9 010    0      0        00    United St…     308745538         308758105  2018\n10 010    0      0        00    United St…     308745538         308758105  2019\n11 010    0      0        00    United St…     308745538         308758105  2020\n# ℹ 1 more variable: Population <dbl>\n```\n:::\n:::\n\n\n## Saving plots locally\n\nWe can save plots to .pdf files using a call to `pdf()` before the plot code and then `dev.off()` afterwards.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdf(file = \"~/Documents/MATH167R/results/US_pop_plot.pdf\",\n    width = 8, height = 6) # dimensions in inches\nUS_pop_plot <- US_pop_tidy |>\n  ggplot(aes(x = Year, y = Population)) + \n  geom_line() + \n  ggtitle(\"US Population, 2010-2020\")\nprint(US_pop_plot)\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n:::\n\n\n## Generating clean tables using `kable()`\n\nThe `kable()` function from the `knitr` package can be sued to generate clean tables for publication. The `kableExtra` package contains many extra functions for formatting tables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstate_population <- readr::read_csv(\"https://www2.census.gov/programs-surveys/popest/datasets/2010-2020/national/totals/nst-est2020.csv\")\n\n# code to print the data\nlibrary(knitr)\nkable(state_population, digits = 3, row.names = F) |>\n  kableExtra::kable_styling(\"striped\", full_width = T) |> \n  kableExtra::scroll_box(height = \"560px\")\n```\n:::\n\n\n## Caching code chunks\n\nYou can name your chunks and use the code chunk `cache = T` to save the output of a code chunk so you don't have to wait for the code to run every time you knit.\n\n\n::: {.cell hash='10_data-management_cache/revealjs/pop_plot_a8b79936ba1464bc64783753ff3e405b'}\n\n````{.cell-code}\n```{{r pop_plot}}\n#| eval: TRUE\n#| cache: TRUE\nUS_pop_plot <- US_pop_tidy |>\n  ggplot(aes(x = Year, y = Population)) + \n  geom_line() + \n  ggtitle(\"US Population, 2010-2020\")\nprint(US_pop_plot)\n```\n````\n\n::: {.cell-output-display}\n![](10_data-management_files/figure-revealjs/pop_plot-1.png){width=960}\n:::\n:::\n\n\n\n## Caching code chunks\n\nHowever, that means plots/output will *not* automatically update if you change the \"upstream\" data processing pipeline. You must change the cached chunk or delete the cache to rerun the code.\n\nBefore you turn in your assignments, you should clear all the cached files and knit from scratch to make sure no errors have been introduced.\n\n## Group Lab Time\n\nThe rest of class is devoted to working in groups on your lab assignment.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}