{
  "hash": "bf67e42425c8ab2ef6bad1e32ac819ff",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Merging data\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: visual\n---\n\n\n## Warm-up\n\nConsider the following data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nChickWeight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    weight Time Chick Diet\n1       42    0     1    1\n2       51    2     1    1\n3       59    4     1    1\n4       64    6     1    1\n5       76    8     1    1\n6       93   10     1    1\n7      106   12     1    1\n8      125   14     1    1\n9      149   16     1    1\n10     171   18     1    1\n11     199   20     1    1\n12     205   21     1    1\n13      40    0     2    1\n14      49    2     2    1\n15      58    4     2    1\n16      72    6     2    1\n17      84    8     2    1\n18     103   10     2    1\n19     122   12     2    1\n20     138   14     2    1\n21     162   16     2    1\n22     187   18     2    1\n23     209   20     2    1\n24     215   21     2    1\n25      43    0     3    1\n26      39    2     3    1\n27      55    4     3    1\n28      67    6     3    1\n29      84    8     3    1\n30      99   10     3    1\n31     115   12     3    1\n32     138   14     3    1\n33     163   16     3    1\n34     187   18     3    1\n35     198   20     3    1\n36     202   21     3    1\n37      42    0     4    1\n38      49    2     4    1\n39      56    4     4    1\n40      67    6     4    1\n41      74    8     4    1\n42      87   10     4    1\n43     102   12     4    1\n44     108   14     4    1\n45     136   16     4    1\n46     154   18     4    1\n47     160   20     4    1\n48     157   21     4    1\n49      41    0     5    1\n50      42    2     5    1\n51      48    4     5    1\n52      60    6     5    1\n53      79    8     5    1\n54     106   10     5    1\n55     141   12     5    1\n56     164   14     5    1\n57     197   16     5    1\n58     199   18     5    1\n59     220   20     5    1\n60     223   21     5    1\n61      41    0     6    1\n62      49    2     6    1\n63      59    4     6    1\n64      74    6     6    1\n65      97    8     6    1\n66     124   10     6    1\n67     141   12     6    1\n68     148   14     6    1\n69     155   16     6    1\n70     160   18     6    1\n71     160   20     6    1\n72     157   21     6    1\n73      41    0     7    1\n74      49    2     7    1\n75      57    4     7    1\n76      71    6     7    1\n77      89    8     7    1\n78     112   10     7    1\n79     146   12     7    1\n80     174   14     7    1\n81     218   16     7    1\n82     250   18     7    1\n83     288   20     7    1\n84     305   21     7    1\n85      42    0     8    1\n86      50    2     8    1\n87      61    4     8    1\n88      71    6     8    1\n89      84    8     8    1\n90      93   10     8    1\n91     110   12     8    1\n92     116   14     8    1\n93     126   16     8    1\n94     134   18     8    1\n95     125   20     8    1\n96      42    0     9    1\n97      51    2     9    1\n98      59    4     9    1\n99      68    6     9    1\n100     85    8     9    1\n101     96   10     9    1\n102     90   12     9    1\n103     92   14     9    1\n104     93   16     9    1\n105    100   18     9    1\n106    100   20     9    1\n107     98   21     9    1\n108     41    0    10    1\n109     44    2    10    1\n110     52    4    10    1\n111     63    6    10    1\n112     74    8    10    1\n113     81   10    10    1\n114     89   12    10    1\n115     96   14    10    1\n116    101   16    10    1\n117    112   18    10    1\n118    120   20    10    1\n119    124   21    10    1\n120     43    0    11    1\n121     51    2    11    1\n122     63    4    11    1\n123     84    6    11    1\n124    112    8    11    1\n125    139   10    11    1\n126    168   12    11    1\n127    177   14    11    1\n128    182   16    11    1\n129    184   18    11    1\n130    181   20    11    1\n131    175   21    11    1\n132     41    0    12    1\n133     49    2    12    1\n134     56    4    12    1\n135     62    6    12    1\n136     72    8    12    1\n137     88   10    12    1\n138    119   12    12    1\n139    135   14    12    1\n140    162   16    12    1\n141    185   18    12    1\n142    195   20    12    1\n143    205   21    12    1\n144     41    0    13    1\n145     48    2    13    1\n146     53    4    13    1\n147     60    6    13    1\n148     65    8    13    1\n149     67   10    13    1\n150     71   12    13    1\n151     70   14    13    1\n152     71   16    13    1\n153     81   18    13    1\n154     91   20    13    1\n155     96   21    13    1\n156     41    0    14    1\n157     49    2    14    1\n158     62    4    14    1\n159     79    6    14    1\n160    101    8    14    1\n161    128   10    14    1\n162    164   12    14    1\n163    192   14    14    1\n164    227   16    14    1\n165    248   18    14    1\n166    259   20    14    1\n167    266   21    14    1\n168     41    0    15    1\n169     49    2    15    1\n170     56    4    15    1\n171     64    6    15    1\n172     68    8    15    1\n173     68   10    15    1\n174     67   12    15    1\n175     68   14    15    1\n176     41    0    16    1\n177     45    2    16    1\n178     49    4    16    1\n179     51    6    16    1\n180     57    8    16    1\n181     51   10    16    1\n182     54   12    16    1\n183     42    0    17    1\n184     51    2    17    1\n185     61    4    17    1\n186     72    6    17    1\n187     83    8    17    1\n188     89   10    17    1\n189     98   12    17    1\n190    103   14    17    1\n191    113   16    17    1\n192    123   18    17    1\n193    133   20    17    1\n194    142   21    17    1\n195     39    0    18    1\n196     35    2    18    1\n197     43    0    19    1\n198     48    2    19    1\n199     55    4    19    1\n200     62    6    19    1\n201     65    8    19    1\n202     71   10    19    1\n203     82   12    19    1\n204     88   14    19    1\n205    106   16    19    1\n206    120   18    19    1\n207    144   20    19    1\n208    157   21    19    1\n209     41    0    20    1\n210     47    2    20    1\n211     54    4    20    1\n212     58    6    20    1\n213     65    8    20    1\n214     73   10    20    1\n215     77   12    20    1\n216     89   14    20    1\n217     98   16    20    1\n218    107   18    20    1\n219    115   20    20    1\n220    117   21    20    1\n221     40    0    21    2\n222     50    2    21    2\n223     62    4    21    2\n224     86    6    21    2\n225    125    8    21    2\n226    163   10    21    2\n227    217   12    21    2\n228    240   14    21    2\n229    275   16    21    2\n230    307   18    21    2\n231    318   20    21    2\n232    331   21    21    2\n233     41    0    22    2\n234     55    2    22    2\n235     64    4    22    2\n236     77    6    22    2\n237     90    8    22    2\n238     95   10    22    2\n239    108   12    22    2\n240    111   14    22    2\n241    131   16    22    2\n242    148   18    22    2\n243    164   20    22    2\n244    167   21    22    2\n245     43    0    23    2\n246     52    2    23    2\n247     61    4    23    2\n248     73    6    23    2\n249     90    8    23    2\n250    103   10    23    2\n251    127   12    23    2\n252    135   14    23    2\n253    145   16    23    2\n254    163   18    23    2\n255    170   20    23    2\n256    175   21    23    2\n257     42    0    24    2\n258     52    2    24    2\n259     58    4    24    2\n260     74    6    24    2\n261     66    8    24    2\n262     68   10    24    2\n263     70   12    24    2\n264     71   14    24    2\n265     72   16    24    2\n266     72   18    24    2\n267     76   20    24    2\n268     74   21    24    2\n269     40    0    25    2\n270     49    2    25    2\n271     62    4    25    2\n272     78    6    25    2\n273    102    8    25    2\n274    124   10    25    2\n275    146   12    25    2\n276    164   14    25    2\n277    197   16    25    2\n278    231   18    25    2\n279    259   20    25    2\n280    265   21    25    2\n281     42    0    26    2\n282     48    2    26    2\n283     57    4    26    2\n284     74    6    26    2\n285     93    8    26    2\n286    114   10    26    2\n287    136   12    26    2\n288    147   14    26    2\n289    169   16    26    2\n290    205   18    26    2\n291    236   20    26    2\n292    251   21    26    2\n293     39    0    27    2\n294     46    2    27    2\n295     58    4    27    2\n296     73    6    27    2\n297     87    8    27    2\n298    100   10    27    2\n299    115   12    27    2\n300    123   14    27    2\n301    144   16    27    2\n302    163   18    27    2\n303    185   20    27    2\n304    192   21    27    2\n305     39    0    28    2\n306     46    2    28    2\n307     58    4    28    2\n308     73    6    28    2\n309     92    8    28    2\n310    114   10    28    2\n311    145   12    28    2\n312    156   14    28    2\n313    184   16    28    2\n314    207   18    28    2\n315    212   20    28    2\n316    233   21    28    2\n317     39    0    29    2\n318     48    2    29    2\n319     59    4    29    2\n320     74    6    29    2\n321     87    8    29    2\n322    106   10    29    2\n323    134   12    29    2\n324    150   14    29    2\n325    187   16    29    2\n326    230   18    29    2\n327    279   20    29    2\n328    309   21    29    2\n329     42    0    30    2\n330     48    2    30    2\n331     59    4    30    2\n332     72    6    30    2\n333     85    8    30    2\n334     98   10    30    2\n335    115   12    30    2\n336    122   14    30    2\n337    143   16    30    2\n338    151   18    30    2\n339    157   20    30    2\n340    150   21    30    2\n341     42    0    31    3\n342     53    2    31    3\n343     62    4    31    3\n344     73    6    31    3\n345     85    8    31    3\n346    102   10    31    3\n347    123   12    31    3\n348    138   14    31    3\n349    170   16    31    3\n350    204   18    31    3\n351    235   20    31    3\n352    256   21    31    3\n353     41    0    32    3\n354     49    2    32    3\n355     65    4    32    3\n356     82    6    32    3\n357    107    8    32    3\n358    129   10    32    3\n359    159   12    32    3\n360    179   14    32    3\n361    221   16    32    3\n362    263   18    32    3\n363    291   20    32    3\n364    305   21    32    3\n365     39    0    33    3\n366     50    2    33    3\n367     63    4    33    3\n368     77    6    33    3\n369     96    8    33    3\n370    111   10    33    3\n371    137   12    33    3\n372    144   14    33    3\n373    151   16    33    3\n374    146   18    33    3\n375    156   20    33    3\n376    147   21    33    3\n377     41    0    34    3\n378     49    2    34    3\n379     63    4    34    3\n380     85    6    34    3\n381    107    8    34    3\n382    134   10    34    3\n383    164   12    34    3\n384    186   14    34    3\n385    235   16    34    3\n386    294   18    34    3\n387    327   20    34    3\n388    341   21    34    3\n389     41    0    35    3\n390     53    2    35    3\n391     64    4    35    3\n392     87    6    35    3\n393    123    8    35    3\n394    158   10    35    3\n395    201   12    35    3\n396    238   14    35    3\n397    287   16    35    3\n398    332   18    35    3\n399    361   20    35    3\n400    373   21    35    3\n401     39    0    36    3\n402     48    2    36    3\n403     61    4    36    3\n404     76    6    36    3\n405     98    8    36    3\n406    116   10    36    3\n407    145   12    36    3\n408    166   14    36    3\n409    198   16    36    3\n410    227   18    36    3\n411    225   20    36    3\n412    220   21    36    3\n413     41    0    37    3\n414     48    2    37    3\n415     56    4    37    3\n416     68    6    37    3\n417     80    8    37    3\n418     83   10    37    3\n419    103   12    37    3\n420    112   14    37    3\n421    135   16    37    3\n422    157   18    37    3\n423    169   20    37    3\n424    178   21    37    3\n425     41    0    38    3\n426     49    2    38    3\n427     61    4    38    3\n428     74    6    38    3\n429     98    8    38    3\n430    109   10    38    3\n431    128   12    38    3\n432    154   14    38    3\n433    192   16    38    3\n434    232   18    38    3\n435    280   20    38    3\n436    290   21    38    3\n437     42    0    39    3\n438     50    2    39    3\n439     61    4    39    3\n440     78    6    39    3\n441     89    8    39    3\n442    109   10    39    3\n443    130   12    39    3\n444    146   14    39    3\n445    170   16    39    3\n446    214   18    39    3\n447    250   20    39    3\n448    272   21    39    3\n449     41    0    40    3\n450     55    2    40    3\n451     66    4    40    3\n452     79    6    40    3\n453    101    8    40    3\n454    120   10    40    3\n455    154   12    40    3\n456    182   14    40    3\n457    215   16    40    3\n458    262   18    40    3\n459    295   20    40    3\n460    321   21    40    3\n461     42    0    41    4\n462     51    2    41    4\n463     66    4    41    4\n464     85    6    41    4\n465    103    8    41    4\n466    124   10    41    4\n467    155   12    41    4\n468    153   14    41    4\n469    175   16    41    4\n470    184   18    41    4\n471    199   20    41    4\n472    204   21    41    4\n473     42    0    42    4\n474     49    2    42    4\n475     63    4    42    4\n476     84    6    42    4\n477    103    8    42    4\n478    126   10    42    4\n479    160   12    42    4\n480    174   14    42    4\n481    204   16    42    4\n482    234   18    42    4\n483    269   20    42    4\n484    281   21    42    4\n485     42    0    43    4\n486     55    2    43    4\n487     69    4    43    4\n488     96    6    43    4\n489    131    8    43    4\n490    157   10    43    4\n491    184   12    43    4\n492    188   14    43    4\n493    197   16    43    4\n494    198   18    43    4\n495    199   20    43    4\n496    200   21    43    4\n497     42    0    44    4\n498     51    2    44    4\n499     65    4    44    4\n500     86    6    44    4\n501    103    8    44    4\n502    118   10    44    4\n503    127   12    44    4\n504    138   14    44    4\n505    145   16    44    4\n506    146   18    44    4\n507     41    0    45    4\n508     50    2    45    4\n509     61    4    45    4\n510     78    6    45    4\n511     98    8    45    4\n512    117   10    45    4\n513    135   12    45    4\n514    141   14    45    4\n515    147   16    45    4\n516    174   18    45    4\n517    197   20    45    4\n518    196   21    45    4\n519     40    0    46    4\n520     52    2    46    4\n521     62    4    46    4\n522     82    6    46    4\n523    101    8    46    4\n524    120   10    46    4\n525    144   12    46    4\n526    156   14    46    4\n527    173   16    46    4\n528    210   18    46    4\n529    231   20    46    4\n530    238   21    46    4\n531     41    0    47    4\n532     53    2    47    4\n533     66    4    47    4\n534     79    6    47    4\n535    100    8    47    4\n536    123   10    47    4\n537    148   12    47    4\n538    157   14    47    4\n539    168   16    47    4\n540    185   18    47    4\n541    210   20    47    4\n542    205   21    47    4\n543     39    0    48    4\n544     50    2    48    4\n545     62    4    48    4\n546     80    6    48    4\n547    104    8    48    4\n548    125   10    48    4\n549    154   12    48    4\n550    170   14    48    4\n551    222   16    48    4\n552    261   18    48    4\n553    303   20    48    4\n554    322   21    48    4\n555     40    0    49    4\n556     53    2    49    4\n557     64    4    49    4\n558     85    6    49    4\n559    108    8    49    4\n560    128   10    49    4\n561    152   12    49    4\n562    166   14    49    4\n563    184   16    49    4\n564    203   18    49    4\n565    233   20    49    4\n566    237   21    49    4\n567     41    0    50    4\n568     54    2    50    4\n569     67    4    50    4\n570     84    6    50    4\n571    105    8    50    4\n572    122   10    50    4\n573    155   12    50    4\n574    175   14    50    4\n575    205   16    50    4\n576    234   18    50    4\n577    264   20    50    4\n578    264   21    50    4\n```\n:::\n:::\n\n\n1.  What does the following code do?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    pivot_wider(ChickWeight,\n                 names_from = \"Time\", \n                 values_from = \"weight\")\n    ```\n    :::\n\n\n## Warm-up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\npivot_wider(ChickWeight,\n            names_from = \"Time\", \n            values_from = \"weight\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 × 14\n   Chick Diet    `0`   `2`   `4`   `6`   `8`  `10`  `12`  `14`  `16`  `18`  `20`\n   <ord> <fct> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 1     1        42    51    59    64    76    93   106   125   149   171   199\n 2 2     1        40    49    58    72    84   103   122   138   162   187   209\n 3 3     1        43    39    55    67    84    99   115   138   163   187   198\n 4 4     1        42    49    56    67    74    87   102   108   136   154   160\n 5 5     1        41    42    48    60    79   106   141   164   197   199   220\n 6 6     1        41    49    59    74    97   124   141   148   155   160   160\n 7 7     1        41    49    57    71    89   112   146   174   218   250   288\n 8 8     1        42    50    61    71    84    93   110   116   126   134   125\n 9 9     1        42    51    59    68    85    96    90    92    93   100   100\n10 10    1        41    44    52    63    74    81    89    96   101   112   120\n# ℹ 40 more rows\n# ℹ 1 more variable: `21` <dbl>\n```\n:::\n:::\n\n\n## Overview of today\n\n-   Merging datasets\n-   Exploratory analysis\n\n## Joining Data\n\nWe can use SQL-like join statements in R!\n\n-   `inner_join(x, y, by = \"key\")`: match observations only when exact keys are equal\n-   `left_join(x, y, by = \"key\")`: keep all observations in `x`, match observations in `y` by keys, `NA` otherwise\n-   `right_join(x, y, by = \"key\")`: keep all observations in `y`, match observations in `x` by keys, `NA` otherwise\n-   `outer_join(x, y, by = \"key\")`: keep all observations in `x` and `y`, match keys where possible, `NA` otherwise\n\nUsually, `left_join()` will suffice.\n\n## Example: Band members\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nband_members\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  name  band   \n  <chr> <chr>  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n```\n:::\n\n```{.r .cell-code}\nband_instruments\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n:::\n:::\n\n\n## Example: Band members\n\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members |> inner_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n```\n:::\n\n```{.r .cell-code}\nband_members |> left_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n:::\n\n```{.r .cell-code}\nband_members |> right_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith <NA>    guitar\n```\n:::\n\n```{.r .cell-code}\nband_members |> full_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n:::\n:::\n\n\n## Example: Band members\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To suppress the message about joining variables, supply `by`\nband_members |> inner_join(band_instruments, by = join_by(name))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n```\n:::\n:::\n\n\n## Inner join vs. outer join\n\n<img src=\"images/join-inner.png\" height=\"100\"/>\n\n<img src=\"images/join-outer.png\" height=\"380\"/>\n\nImages courtesy of Hadley Wickham. [(Link)](https://r4ds.had.co.nz/relational-data.html)\n\n## Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# inner join\nmerge(band_members, band_instruments, by.x = \"name\", by.y = \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  name    band  plays\n1 John Beatles guitar\n2 Paul Beatles   bass\n```\n:::\n\n```{.r .cell-code}\n# outer join\nmerge(band_members, band_instruments, by.x = \"name\", by.y = \"name\", all = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   name    band  plays\n1  John Beatles guitar\n2 Keith    <NA> guitar\n3  Mick  Stones   <NA>\n4  Paul Beatles   bass\n```\n:::\n\n```{.r .cell-code}\n# left join\nmerge(band_members, band_instruments, by.x = \"name\", by.y = \"name\", all.x = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  name    band  plays\n1 John Beatles guitar\n2 Mick  Stones   <NA>\n3 Paul Beatles   bass\n```\n:::\n\n```{.r .cell-code}\n# right join\nmerge(band_members, band_instruments, by.x = \"name\", by.y = \"name\", all.y = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   name    band  plays\n1  John Beatles guitar\n2 Keith    <NA> guitar\n3  Paul Beatles   bass\n```\n:::\n:::\n\n\n## Example: California data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidycensus)\n\n# the following code loads my local Census API Key, which is used to access \n# census data\nSys.getenv(\"CENSUS_API_KEY\")\n\n# 2021 median income by county\nincome_2021 <- get_acs(geography = \"county\", \n                       variables = c(medincome = \"B19013_001\"), \n                       state = \"CA\", \n                       year = 2021)\n\n# 2010 median income by county\nincome_2010 <- get_acs(geography = \"county\", \n                       variables = c(medincome = \"B19013_001\"), \n                       state = \"CA\", \n                       year = 2010)\n```\n:::\n\n\n\n\n## Example: California data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincome_2021 <- income_2021 |>\n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe)\n  ) |>\n  select(-moe_medincome) |>\n  rename(medincome_2021 = estimate_medincome)\nhead(income_2021)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  GEOID NAME                         medincome_2021\n  <chr> <chr>                                 <dbl>\n1 06001 Alameda County, California           112017\n2 06003 Alpine County, California             96000\n3 06005 Amador County, California             69955\n4 06007 Butte County, California              59863\n5 06009 Calaveras County, California          70119\n6 06011 Colusa County, California             61861\n```\n:::\n\n```{.r .cell-code}\nincome_2010 <- income_2010 |>\n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe)\n  ) |>\n  select(-moe_medincome) |>\n  rename(medincome_2010 = estimate_medincome)\n```\n:::\n\n\n## Example: California data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincome_combined <- income_2010 |>\n  left_join(income_2021, by = c(\"GEOID\", \"NAME\"))\nggplot(income_combined, aes(x = medincome_2010, y = medincome_2021)) +\n  geom_point() + \n  geom_abline(slope = 1) + \n  labs(title = \"Median income in 2021 vs. 2010, CA Counties\",\n       subtitle = \"American Community Survey\",\n       y = \"2021 Median Income\",\n       x = \"2010 Median Income\")\n```\n:::\n\n\n\n## Example: California data\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](09_merging-data_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## Data manipulation cheatsheet\n\n-   `filter()` subset rows\n-   `select()` subset columns, use with `contains()`, `starts_with()`, `ends_with()`, ...\n-   `mutate()` create columns\n-   `group_by()`, `summarize()`, `count()` group and summarize groups\n-   `rename()` rename columns\n-   `pivot_longer()`, `pivot_wider()` reshape data\n-   `inner_join()`, `left_join()`, `right_join()`, `outer_join()` combine data (like SQL)\n\n[Much, much more! (Click me for a cheat sheet)](https://rstudio.com/resources/cheatsheets/)\n\n## Exploratory data analysis\n\nExploratory data analysis is the process of learning about a dataset by visualizing, summarizing, and transforming it.\n\nBy now we've seen most of the skills you need to carry out exploratory data analysis (EDA). As Wickham, Çetinkaya-Rundel, and Grolemund put it, the cycle of EDA looks something like this:\n\n1.  Generate questions about your data.\n\n2.  Explore your questions by visualizing, transforming, and modelling your data.\n\n3.  Use your findings to refine your questions and generate new questions.\n\nYou can read their walkthrough of the EDA process [here](https://r4ds.hadley.nz/eda).\n",
    "supporting": [
      "09_merging-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}