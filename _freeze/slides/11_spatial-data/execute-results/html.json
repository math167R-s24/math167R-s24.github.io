{
  "hash": "8484dc2488f28332f6c9bf4355bdd729",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Spatial data analysis\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: visual\n---\n\n\n## Overview of today\n\n-   Visualizing spatial data\n-   Merging data\n-   Project work time\n\n## Loading project data\n\nToday we'll practice working with spatial data. In `R`, most basic GIS (geographic information system) tasks can be carried out using the `sf` package, which you can install using `install.packages(\"sf\")`. Today we'll also be using `tidyverse` packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(knitr)\nlibrary(tidyverse)\nba_rent <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-07-05/rent.csv\")\n```\n:::\n\n\n## Craigslist rental data\n\nThis dataset provides Craigslist rental listings for the Bay Area, from 2000-2018. It was originally collected by Dr. Kate Pennington, whose methodology you can read about [here](https://www.katepennington.org/clmethod).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ba_rent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 17\n  post_id      date  year nhood city  county price  beds baths  sqft room_in_apt\n  <chr>       <dbl> <dbl> <chr> <chr> <chr>  <dbl> <dbl> <dbl> <dbl>       <dbl>\n1 pre2013_1… 2.01e7  2005 alam… alam… alame…  1250     2     2    NA           0\n2 pre2013_1… 2.01e7  2005 alam… alam… alame…  1295     2    NA    NA           0\n3 pre2013_1… 2.00e7  2004 alam… alam… alame…  1100     2    NA    NA           0\n4 pre2013_6… 2.01e7  2012 alam… alam… alame…  1425     1    NA   735           0\n5 pre2013_1… 2.00e7  2004 alam… alam… alame…   890     1    NA    NA           0\n6 pre2013_1… 2.01e7  2006 alam… alam… alame…   825     1    NA    NA           0\n# ℹ 6 more variables: address <chr>, lat <dbl>, lon <dbl>, title <chr>,\n#   descr <chr>, details <chr>\n```\n:::\n:::\n\n\n## Craigslist rental data variables\n\n::: {style=\"height:500px;overflow:auto;\"}\n| **variable** | **class** | **description**       |\n|:-------------|:----------|:----------------------|\n| post_id      | character | Unique ID             |\n| date         | double    | date                  |\n| year         | double    | year                  |\n| nhood        | character | neighborhood          |\n| city         | character | city                  |\n| county       | character | county                |\n| price        | double    | price in USD          |\n| beds         | double    | n of beds             |\n| baths        | double    | n of baths            |\n| sqft         | double    | square feet of rental |\n| room_in_apt  | double    | room in apartment     |\n| address      | character | address               |\n| lat          | double    | latitude              |\n| lon          | double    | longitude             |\n| title        | character | title of listing      |\n| descr        | character | description           |\n| details      | character | additional details    |\n:::\n\n## Craigslist rental data\n\n## Basic summaries\n\n**Review**: What does the following code produce?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nba_rent |>\n  filter(beds == 2, year == 2010) |>\n  group_by(city) |>\n  summarize(mean_price = mean(price, na.rm = T)) |>\n  arrange(mean_price) |>\n  kable()\n```\n:::\n\n\n. . .\n\n::: {style=\"height:350px;overflow:auto;\"}\n\n::: {.cell-output-display}\n|city          | mean_price|\n|:-------------|----------:|\n|san leandro   |   700.0000|\n|richmond      |   910.0000|\n|fairfield     |   922.7273|\n|sf bay area   |   925.0000|\n|gilroy        |  1000.0000|\n|rohnert park  |  1061.1111|\n|concord       |  1098.1818|\n|vallejo       |  1141.4286|\n|santa rosa    |  1161.0000|\n|hayward       |  1178.8571|\n|el sobrante   |  1197.8571|\n|alameda       |  1250.0000|\n|pittsburg     |  1259.6667|\n|sonoma        |  1330.0000|\n|cambrian      |  1350.0000|\n|fairfax       |  1395.0000|\n|dublin        |  1431.3333|\n|morgan hill   |  1439.0000|\n|livermore     |  1447.0000|\n|woodacre      |  1450.0000|\n|los gatos     |  1472.5000|\n|petaluma      |  1491.1429|\n|union city    |  1498.6500|\n|oakland       |  1512.3529|\n|milpitas      |  1528.0000|\n|walnut creek  |  1548.0000|\n|napa county   |  1565.0000|\n|campbell      |  1570.8750|\n|redwood city  |  1575.5000|\n|el cerrito    |  1581.2500|\n|novato        |  1615.5000|\n|belmont       |  1622.5000|\n|pacifica      |  1630.7500|\n|sunnyvale     |  1657.0588|\n|san jose      |  1669.1818|\n|san ramon     |  1683.3333|\n|mountain view |  1726.3000|\n|santa clara   |  1780.6190|\n|corte madera  |  1799.0000|\n|berkeley      |  1842.0417|\n|larkspur      |  1847.5000|\n|san mateo     |  1909.3333|\n|los altos     |  1923.7500|\n|cupertino     |  1936.8889|\n|foster city   |  2017.2500|\n|san bruno     |  2047.5000|\n|santa cruz    |  2100.0000|\n|palo alto     |  2110.0000|\n|mill valley   |  2124.0000|\n|san rafael    |  2152.8750|\n|orinda        |  2175.0000|\n|sausalito     |  2236.0000|\n|daly city     |  2252.5000|\n|menlo park    |  2327.5000|\n|emeryville    |  2331.6667|\n|woodside      |  2400.0000|\n|burlingame    |  2575.0000|\n|san anselmo   |  2750.0000|\n|san francisco |  2800.2436|\n|belvedere     |  2806.6667|\n|healdsburg    |  4500.0000|\n:::\n\n:::\n\n## Simple features\n\n**Simple Features** is a set of standards for storing and accessing geographic data.\n\n-   Geographic data typically consist of geometries such as points, lines, and polygons\n\n-   In R, the most popular package for working with simple features data is `sf`.\n\n-   Working with spatial data can be extremely memory intensive, so care is needed.\n\n## Working with point data\n\nOur `ba_rent` data frame already has latitude and longitude, but many points are missing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(ba_rent$lat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  33.57   37.40   37.76   37.67   37.80   40.43  193145 \n```\n:::\n\n```{.r .cell-code}\nsummary(ba_rent$lon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n -123.2  -122.4  -122.3  -122.2  -122.0   -74.2  196484 \n```\n:::\n:::\n\n\n. . .\n\nCompare the number of `NA` values with the total rows:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(ba_rent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 200796\n```\n:::\n:::\n\n\n## Working with point data\n\nLet's just work with the entries for which we have data from the year 2018.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nba_rent_geo <- ba_rent |>\n  filter(!is.na(lat) & !is.na(lon))\nnrow(ba_rent_geo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4311\n```\n:::\n:::\n\n\nWe have extremely limited data in this time frame.\n\n## Converting data to sf object\n\nWhen each row in our data frame refers to a point with longitude and latitude, we can use the `st_as_sf` function to convert our data frame to an sf object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nba_rent_geo <- ba_rent_geo |>\n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = st_crs(4326))\nba_rent_geo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 4311 features and 15 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -123.1965 ymin: 33.97564 xmax: -74.19802 ymax: 40.43494\nGeodetic CRS:  WGS 84\n# A tibble: 4,311 × 16\n   post_id     date  year nhood city  county price  beds baths  sqft room_in_apt\n * <chr>      <dbl> <dbl> <chr> <chr> <chr>  <dbl> <dbl> <dbl> <dbl>       <dbl>\n 1 43283531… 2.01e7  2014 alam… alam… alame…  1450     1    NA   640           0\n 2 48659165… 2.02e7  2015 alam… alam… alame…  2100     1     1    NA           0\n 3 48172274… 2.01e7  2014 alam… alam… alame…  1939     2     1   864           0\n 4 35443866… 2.01e7  2013 alam… alam… alame…  2650     3    NA  2400           0\n 5 46673146… 2.01e7  2014 alam… alam… alame…   600     0    NA    NA           0\n 6 47108881… 2.01e7  2014 alam… alam… alame…  2250     2     1  1080           0\n 7 59557241… 2.02e7  2017 alam… alam… alame…  3900     3     2    NA           0\n 8 59619891… 2.02e7  2017 alam… alam… alame…  3995     3     2  1787           0\n 9 42680700… 2.01e7  2014 alam… alam… alame…  7200     5    NA  3400           0\n10 49351757… 2.02e7  2015 alam… alam… alame…  2536     2     2  1225           0\n# ℹ 4,301 more rows\n# ℹ 5 more variables: address <chr>, title <chr>, descr <chr>, details <chr>,\n#   geometry <POINT [°]>\n```\n:::\n:::\n\n\n## Visualizing point data\n\nWe can easily visualize this data now using the `geom_sf()` function, which automatically handles sf objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ba_rent_geo) + geom_sf()\n```\n\n::: {.cell-output-display}\n![](11_spatial-data_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n## Visualizing point data\n\nWe can add a basemap using the `annotation_map_tile` function from the `ggspatial` package.\n\n\n::: {.cell hash='11_spatial-data_cache/revealjs/unnamed-chunk-10_8b6931b3ae50254f71846aee436c07fe'}\n\n```{.r .cell-code}\nlibrary(ggspatial)\nggplot(ba_rent_geo) + \n  annotation_map_tile(zoomin = -1) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](11_spatial-data_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n## Removing extra point\n\nWe can remove points outside a certain box using the `st_crop` function:\n\n\n::: {.cell hash='11_spatial-data_cache/revealjs/unnamed-chunk-11_05055e8c076b7e2015b4f34c1df924d7'}\n\n```{.r .cell-code}\nbox = c(xmin = -130, ymin = 36.5, xmax = -120, ymax = 40)\nba_rent_geo <- ba_rent_geo |>\n  st_crop(box)\nggplot(ba_rent_geo) + \n  annotation_map_tile(zoomin = -1) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](11_spatial-data_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n## Theme and customization\n\nWe can then adjust the color to show `price` and also change the color scale:\n\n\n::: {.cell hash='11_spatial-data_cache/revealjs/unnamed-chunk-12_3b816d780e77e3f418f194a2a6215ef0'}\n\n```{.r .cell-code}\nggplot(ba_rent_geo, aes(color = price)) + \n  annotation_map_tile(zoomin = -1) +\n  geom_sf(alpha = 0.75, size = 0.75) +\n  scale_color_viridis_c()\n```\n\n::: {.cell-output-display}\n![](11_spatial-data_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## Spatial polygon data\n\nAlthough we do not have complete coordinate data, we have good information about county:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(ba_rent$county))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1394\n```\n:::\n\n```{.r .cell-code}\nunique(ba_rent$county)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"alameda\"       \"san francisco\" \"contra costa\"  \"santa clara\"  \n [5] \"napa\"          \"san mateo\"     \"santa cruz\"    \"sonoma\"       \n [9] \"marin\"         \"solano\"        NA             \n```\n:::\n:::\n\n\n## Spatial polygon data\n\nWe can create a county level summary table for the median rent by county for 2015:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounty_rent_15 <- ba_rent %>%\n  filter(beds == 1, year == 2015, !is.na(county)) |>\n  group_by(county) |>\n  summarize(median_rent = median(price, na.rm = T))\ncounty_rent_15\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   county        median_rent\n   <chr>               <dbl>\n 1 alameda             1950 \n 2 contra costa        1475 \n 3 marin               2188 \n 4 napa                1642.\n 5 san francisco       3227 \n 6 san mateo           2465 \n 7 santa clara         2228 \n 8 santa cruz          1650 \n 9 solano              1292 \n10 sonoma              1495 \n```\n:::\n:::\n\n\n## Spatial polygon data\n\nWe will then connect this summary table to an sf object. We can load US county data using the `tigris` package.\n\n\n::: {.cell hash='11_spatial-data_cache/revealjs/unnamed-chunk-15_fc1932dc2973cd832cb80d44864024ef'}\n\n```{.r .cell-code}\nlibrary(tigris)\nca_counties <- counties(\"California\", cb = TRUE)\n```\n:::\n\n::: {.cell hash='11_spatial-data_cache/revealjs/unnamed-chunk-16_f2d375e00f9e06db4f596e027b8c25eb'}\n\n```{.r .cell-code}\n# convert county names to lower case\nca_counties <- ca_counties |>\n  mutate(county = stringr::str_to_lower(NAME))\nca_counties\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 58 features and 13 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -124.4096 ymin: 32.53444 xmax: -114.1312 ymax: 42.00948\nGeodetic CRS:  NAD83\nFirst 10 features:\n    STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID        NAME\n48       06      059 00277294 0500000US06059 06059      Orange\n51       06      111 00277320 0500000US06111 06111     Ventura\n95       06      063 00277296 0500000US06063 06063      Plumas\n182      06      015 01682074 0500000US06015 06015   Del Norte\n246      06      023 01681908 0500000US06023 06023    Humboldt\n254      06      043 00277286 0500000US06043 06043    Mariposa\n327      06      037 00277283 0500000US06037 06037 Los Angeles\n340      06      065 00277297 0500000US06065 06065   Riverside\n341      06      101 00277315 0500000US06101 06101      Sutter\n342      06      113 00277321 0500000US06113 06113        Yolo\n              NAMELSAD STUSPS STATE_NAME LSAD       ALAND     AWATER\n48       Orange County     CA California   06  2053476505  406279630\n51      Ventura County     CA California   06  4767622161  947345735\n95       Plumas County     CA California   06  6612400772  156387638\n182   Del Norte County     CA California   06  2606118035  578742633\n246    Humboldt County     CA California   06  9241565229 1253726036\n254    Mariposa County     CA California   06  3752476985   36220865\n327 Los Angeles County     CA California   06 10513508620 1787475204\n340   Riverside County     CA California   06 18671924669  242973907\n341      Sutter County     CA California   06  1560975503   14811541\n342        Yolo County     CA California   06  2628145869   22877242\n                          geometry      county\n48  MULTIPOLYGON (((-118.1144 3...      orange\n51  MULTIPOLYGON (((-119.4412 3...     ventura\n95  MULTIPOLYGON (((-121.497 40...      plumas\n182 MULTIPOLYGON (((-124.2175 4...   del norte\n246 MULTIPOLYGON (((-124.4086 4...    humboldt\n254 MULTIPOLYGON (((-120.3944 3...    mariposa\n327 MULTIPOLYGON (((-118.6044 3... los angeles\n340 MULTIPOLYGON (((-117.6767 3...   riverside\n341 MULTIPOLYGON (((-121.9483 3...      sutter\n342 MULTIPOLYGON (((-122.4215 3...        yolo\n```\n:::\n:::\n\n\n## Joining spatial data\n\nIf we want to keep only the counties for which we have data, we must use a `right_join` starting with `ca_counties`:\n\n\n::: {.cell hash='11_spatial-data_cache/revealjs/unnamed-chunk-17_3603e2261c0aba5ac0af33e34a78e9d2'}\n\n```{.r .cell-code}\nca_counties <- ca_counties |>\n  right_join(county_rent_15, by = \"county\")\nca_counties\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 10 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -123.5335 ymin: 36.85065 xmax: -121.2082 ymax: 38.86424\nGeodetic CRS:  NAD83\n   STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID          NAME\n1       06      081 00277305 0500000US06081 06081     San Mateo\n2       06      041 00277285 0500000US06041 06041         Marin\n3       06      095 00277312 0500000US06095 06095        Solano\n4       06      001 01675839 0500000US06001 06001       Alameda\n5       06      055 00277292 0500000US06055 06055          Napa\n6       06      013 01675903 0500000US06013 06013  Contra Costa\n7       06      097 01657246 0500000US06097 06097        Sonoma\n8       06      085 00277307 0500000US06085 06085   Santa Clara\n9       06      087 00277308 0500000US06087 06087    Santa Cruz\n10      06      075 00277302 0500000US06075 06075 San Francisco\n               NAMELSAD STUSPS STATE_NAME LSAD      ALAND    AWATER\n1      San Mateo County     CA California   06 1161922042 757123906\n2          Marin County     CA California   06 1347889807 797077678\n3         Solano County     CA California   06 2128527683 218619356\n4        Alameda County     CA California   06 1910017353 216902808\n5           Napa County     CA California   06 1938032964 104262608\n6   Contra Costa County     CA California   06 1856838508 225278783\n7         Sonoma County     CA California   06 4080864785 498081645\n8    Santa Clara County     CA California   06 3343892720  33595850\n9     Santa Cruz County     CA California   06 1152823584 419714230\n10 San Francisco County     CA California   06  121507089 479146790\n          county median_rent                       geometry\n1      san mateo      2465.0 MULTIPOLYGON (((-122.5209 3...\n2          marin      2188.0 MULTIPOLYGON (((-122.4463 3...\n3         solano      1292.0 MULTIPOLYGON (((-122.4035 3...\n4        alameda      1950.0 MULTIPOLYGON (((-122.3423 3...\n5           napa      1642.5 MULTIPOLYGON (((-122.6464 3...\n6   contra costa      1475.0 MULTIPOLYGON (((-122.4298 3...\n7         sonoma      1495.0 MULTIPOLYGON (((-123.5331 3...\n8    santa clara      2228.0 MULTIPOLYGON (((-122.2027 3...\n9     santa cruz      1650.0 MULTIPOLYGON (((-122.3177 3...\n10 san francisco      3227.0 MULTIPOLYGON (((-122.3323 3...\n```\n:::\n:::\n\n\n## Visualizing polygon data\n\nWe can now use the `geom_sf()` function to visualize our data.\n\n\n::: {.cell hash='11_spatial-data_cache/revealjs/unnamed-chunk-18_8a56944e320832f21fc17fa1dc40f20a'}\n\n```{.r .cell-code}\nggplot(ca_counties, aes(fill = median_rent)) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](11_spatial-data_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n## Themes and customization\n\n\n::: {.cell hash='11_spatial-data_cache/revealjs/unnamed-chunk-19_3caa9c9aca611171193d60f28aa2716c'}\n\n```{.r .cell-code}\nggplot(ca_counties, aes(fill = median_rent)) +\n  geom_sf() +\n  scale_fill_viridis_c(name = \"Median Rent\") +\n  ggtitle(\"Median 1BR rent by county, Bay Area, 2015\",\n           subtitle = \"based on Craigslist rental listings\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](11_spatial-data_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n# Midterm Project\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}