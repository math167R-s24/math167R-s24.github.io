{
  "hash": "f17c492851e333bd37868f6c9459fb4f",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Importing and Exploring Data\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: visual\n---\n\n\n## Warm-up\n\n1.  What is the main difference between matrices and data frames?\n\n2.  What does the following code do?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    B <- diag(1, nrow = 4)\n    B <- B + .01\n    print(B[2, 3])\n    ```\n    :::\n\n\n## Warm-up\n\n**Answer:**\n\n1.  Matrices only contain one type of data whereas each column of a data frame may contain a different type of data.\n\n2.  \n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    B <- diag(1, nrow = 4)\n    B <- B + .01\n    B\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n         [,1] [,2] [,3] [,4]\n    [1,] 1.01 0.01 0.01 0.01\n    [2,] 0.01 1.01 0.01 0.01\n    [3,] 0.01 0.01 1.01 0.01\n    [4,] 0.01 0.01 0.01 1.01\n    ```\n    :::\n    :::\n\n\n## Overview of today\n\n-   Importing and downloading data\n-   Descriptive statistics and summaries\n-   Filtering and sorting data\n-   Pipe notation\n\n## Importing data\n\nToday we'll use the `flights` data to practice our data exploration skills.\n\n## R Packages\n\n-   Packages bundle together code, data, and documentation in an easy to share way.\n-   They come with code that others have written to extend the functionality of R.\n-   Packages can range from graphical software, to web scraping tools, statistical models for spatio-temporal data, microbial data analysis tools, etc.=\n\n## Downloading packages\n\n-   The most popular package repository is the Comprehensive R Archive Network, or [CRAN](https://cran.r-project.org/)\n-   Other popular repositories include [Bioconductor](https://www.bioconductor.org/) and [Github](https://github.com/)\n\n## Installing packages\n\nIf a package is available on CRAN, like most packages we will use for this course, you can install it using `install.packages()`:\n\n\n::: {.cell}\n\n:::\n\n\nYou can also install by clicking *Install* in the *Packages* tab through RStudio.\n\nFor the most part, after you install a package, it is saved on your computer until you update R, and you will not need to re-install it. Thus, you should **never** include a call to `install.packages()` in any `.R` or `.Rmd` file!\n\n## Loading packages\n\nAfter a package is installed, you can load it into your current R session using `library()`:\n\n\n::: {.cell}\n\n:::\n\n\nNote that unlike `install.packages()`, you do not need to include the package name in quotes.\n\n## Loading packages\n\nLoading a package must be done with each new R session, so you should put calls to `library()` in your `.R` and `.Rmd` files.\n\nThis can be done in the opening code chunk. If it is a `.Rmd`, you can set the parameter `include = FALSE` to hide the messages and code if the details are unimportant for the reader.\n\n````         \n```{r, include = FALSE}\nlibrary(nycflights13)\n```\n````\n\n## Exploring data\n\nOnce we load the `nycflights13` package, we can access the `flights` data using the following command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\ndata(flights)\n```\n:::\n\n\nThe `flights` data is saved as a special kind of data frame called a tibble. The main difference between tibbles and data frames is that tibbles generally display more nicely.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n## Exploring data\n\nThe `head()` function prints the first $m$ rows ($m=6$ by default):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\n## Exploring data\n\nWe can access documentation on the flights dataset using the `?` operator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?flights\n```\n:::\n\n\n. . .\n\nThe `nrow()`, `ncol()`, and `dim()` functions provide information about the number of rows and columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 336776\n```\n:::\n\n```{.r .cell-code}\nncol(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 19\n```\n:::\n\n```{.r .cell-code}\ndim(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 336776     19\n```\n:::\n:::\n\n\n## Summarizing data\n\nThe `summary()` function provides a default way to summarize the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      year          month             day           dep_time    sched_dep_time\n Min.   :2013   Min.   : 1.000   Min.   : 1.00   Min.   :   1   Min.   : 106  \n 1st Qu.:2013   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.: 907   1st Qu.: 906  \n Median :2013   Median : 7.000   Median :16.00   Median :1401   Median :1359  \n Mean   :2013   Mean   : 6.549   Mean   :15.71   Mean   :1349   Mean   :1344  \n 3rd Qu.:2013   3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.:1744   3rd Qu.:1729  \n Max.   :2013   Max.   :12.000   Max.   :31.00   Max.   :2400   Max.   :2359  \n                                                 NA's   :8255                 \n   dep_delay          arr_time    sched_arr_time   arr_delay       \n Min.   : -43.00   Min.   :   1   Min.   :   1   Min.   : -86.000  \n 1st Qu.:  -5.00   1st Qu.:1104   1st Qu.:1124   1st Qu.: -17.000  \n Median :  -2.00   Median :1535   Median :1556   Median :  -5.000  \n Mean   :  12.64   Mean   :1502   Mean   :1536   Mean   :   6.895  \n 3rd Qu.:  11.00   3rd Qu.:1940   3rd Qu.:1945   3rd Qu.:  14.000  \n Max.   :1301.00   Max.   :2400   Max.   :2359   Max.   :1272.000  \n NA's   :8255      NA's   :8713                  NA's   :9430      \n   carrier              flight       tailnum             origin         \n Length:336776      Min.   :   1   Length:336776      Length:336776     \n Class :character   1st Qu.: 553   Class :character   Class :character  \n Mode  :character   Median :1496   Mode  :character   Mode  :character  \n                    Mean   :1972                                        \n                    3rd Qu.:3465                                        \n                    Max.   :8500                                        \n                                                                        \n     dest              air_time        distance         hour      \n Length:336776      Min.   : 20.0   Min.   :  17   Min.   : 1.00  \n Class :character   1st Qu.: 82.0   1st Qu.: 502   1st Qu.: 9.00  \n Mode  :character   Median :129.0   Median : 872   Median :13.00  \n                    Mean   :150.7   Mean   :1040   Mean   :13.18  \n                    3rd Qu.:192.0   3rd Qu.:1389   3rd Qu.:17.00  \n                    Max.   :695.0   Max.   :4983   Max.   :23.00  \n                    NA's   :9430                                  \n     minute        time_hour                     \n Min.   : 0.00   Min.   :2013-01-01 05:00:00.00  \n 1st Qu.: 8.00   1st Qu.:2013-04-04 13:00:00.00  \n Median :29.00   Median :2013-07-03 10:00:00.00  \n Mean   :26.23   Mean   :2013-07-03 05:22:54.64  \n 3rd Qu.:44.00   3rd Qu.:2013-10-01 07:00:00.00  \n Max.   :59.00   Max.   :2013-12-31 23:00:00.00  \n                                                 \n```\n:::\n:::\n\n\n## Summarizing one column at a time\n\nAs we saw last week, the `$` operator allows us to pull a single column from our dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights$origin[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"EWR\" \"LGA\" \"JFK\" \"JFK\" \"LGA\" \"EWR\" \"EWR\" \"LGA\" \"JFK\" \"LGA\"\n```\n:::\n:::\n\n\n## Summarizing one column at a time\n\nFor character vectors that represent categorical variables, the `unique()` and `table()` functions provide useful summaries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(flights$origin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"EWR\" \"LGA\" \"JFK\"\n```\n:::\n\n```{.r .cell-code}\ntable(flights$origin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   EWR    JFK    LGA \n120835 111279 104662 \n```\n:::\n:::\n\n\n## Summarizing one column at a time\n\nFor numeric columns, we can use many of the functions we've seen earlier:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(flights$dep_delay, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.63907\n```\n:::\n\n```{.r .cell-code}\nrange(flights$dep_delay, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  -43 1301\n```\n:::\n\n```{.r .cell-code}\nmax(flights$dep_delay, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1301\n```\n:::\n:::\n\n\n# Filtering data\n\n## Subsetting a data frame\n\nWhat if we want to remove all rows with `NA` values? Or what if we only want to look at flights from JFK?\n\nThe most basic way to take a subset of (rows of) a data frame is to define an appropriate logical vector:\n\nWhat do you think the following code does?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_delayed <- flights$dep_delay > 60\nhead(is_delayed)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n## Subsetting a data frame\n\nWe can then use this logical vector to index the desired rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndelayed_flights <- flights[is_delayed, ]\nnrow(delayed_flights)\n```\n:::\n\n\n## Check your understanding: Subsetting\n\nWhat do you think the following lines of code do?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights[flights$origin == \"JFK\", ]\nflights[flights$air_time > 120, ]\nflights[!is.na(flights$arr_delay), ]\nflights[complete.cases(flights), ]\n```\n:::\n\n\n## Summarizing subsets of a dataset\n\nSuppose we create three separate datasets--one for each departure airport.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nJFK_flights <- flights[flights$origin == \"JFK\", ]\nLGA_flights <- flights[flights$origin == \"LGA\", ]\nEWR_flights <- flights[flights$origin == \"EWR\", ]\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(JFK_flights$arr_delay, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.551481\n```\n:::\n\n```{.r .cell-code}\nmean(LGA_flights$arr_delay, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.783488\n```\n:::\n\n```{.r .cell-code}\nmean(EWR_flights$arr_delay, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.107055\n```\n:::\n:::\n\n\n## Summarizing subsets of a dataset\n\nOther summaries might be more relevant/informative:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(JFK_flights$arr_delay > 30, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1519908\n```\n:::\n\n```{.r .cell-code}\nmean(LGA_flights$arr_delay > 30, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1451256\n```\n:::\n\n```{.r .cell-code}\nmean(EWR_flights$arr_delay > 30, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.172821\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(JFK_flights$distance, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1266.249\n```\n:::\n\n```{.r .cell-code}\nmean(LGA_flights$distance, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 779.8357\n```\n:::\n\n```{.r .cell-code}\nmean(EWR_flights$distance, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1056.743\n```\n:::\n:::\n\n\n## The tidyverse\n\nThe previous code provides a basic way to subset datasets. When doing a lot of descriptive/exploratory analysis, many people prefer using code from the `tidyverse` packages:\n\n-   Reading and saving data: `readr`\n-   Data manipulation: `tidyr`, `dplyr`\n-   Data visualization: `ggplot2`\n-   Working with different data structures: `tibble`, `purrr`, `stringr`, `forcats`\n\nYou can install them all using\n\n\n::: {.cell}\n\n:::\n\n\n(Remember, you only need to do this once!)\n\n## Tidy Data Principles\n\nThere are three rules required for data to be considered tidy\n\n-   Each variable must have its own column\n-   Each observation must have its own row\n-   Each value must have its own cell\n\nSeems simple, but can sometimes be tricky. We will discuss transformating data in the future.\n\n## Name conflicts {.smaller}\n\nRecall that packages are essentially ways for you to install and use functions written by others. Occasionally, some of these functions have the same name and there is a conflict. Whichever package you load more recently using `library` will mask the old function, meaning that R will default to that version.\n\nIn general, this is fine, especially with `tidyverse`. These package authors know when they have masked common functions in R, and typically we will prefer `tidyverse` version.\n\nThe conflict message is to make sure you know about conflicts. You can (and should) hide this in your R Markdown files by adding the parameter `message=FALSE` or `include=FALSE` to your code chunk when you load packages.\n\n## Subsetting with `filter()`\n\nThe `filter()` function from the `dplyr` package provides a way to subset data. The second argument of `filter()` below looks for a logical vector defined **in terms of the variables** in the first argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nJFK_flights <- filter(flights, origin == \"JFK\")\nLGA_flights <- filter(flights, origin == \"LGA\")\nEWR_flights <- filter(flights, origin == \"EWR\")\n```\n:::\n\n\nCompare with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nJFK_flights <- flights[flights$origin == \"JFK\", ]\nLGA_flights <- flights[flights$origin == \"LGA\", ]\nEWR_flights <- flights[flights$origin == \"EWR\", ]\n```\n:::\n\n\n## Descriptive statistics with `summarize()`\n\nThe `summarize()` function can similarly be used to compute summary statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(flights, mean_dep_delay = mean(dep_delay, na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_dep_delay\n           <dbl>\n1           12.6\n```\n:::\n:::\n\n\nThe `summarize()` function can handle more than one statistic at once:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(flights, \n          mean_dep_delay = mean(dep_delay, na.rm = T),\n          mean_arr_delay = mean(arr_delay, na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  mean_dep_delay mean_arr_delay\n           <dbl>          <dbl>\n1           12.6           6.90\n```\n:::\n:::\n\n\n## Pipe notation\n\n**Pipes** use the `|>` operator to take the output from a previous function call and \"pipe\" it through to the next function.\n\nThe object before the pipe is treated as the first argument to the function coming after the pipe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nJFK_flights <- flights |> filter(origin == \"JFK\")\nLGA_flights <- flights |> filter(origin == \"LGA\")\nEWR_flights <- flights |> filter(origin == \"EWR\")\n```\n:::\n\n\n## Piping `filter()` and `summarize()`\n\nPipes are useful if we want to combine multiple functions. To see how this can be useful, consider the combining the `filter()` and `summarize()` functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(origin == \"JFK\") |>\n  summarize(mean_dep_delay = mean(dep_delay, na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_dep_delay\n           <dbl>\n1           12.1\n```\n:::\n:::\n\n\n## Check your understanding:\n\nWhat does the following code do?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(air_time > 120) |>\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = T))\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_arr_delay\n           <dbl>\n1           5.69\n```\n:::\n:::\n\n\nHow could you do the same thing with base R?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_flights <- flights[flights$air_time > 120, ]\nmean(long_flights$arr_delay, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.689161\n```\n:::\n:::\n\n\nNote that the class of object is slightly different!\n\n# Downloading data from the internet\n\n## Saving Data\n\nYou can save single R objects as `.rds` files using `saveRDS()`, multiple R objects as `.RData` or `.rda` files using `save()`, and your entire workspace as `.RData` using `save.image()`.\n\n\n::: {.cell}\n\n:::\n\n\n## Saving Data\n\nIn general, you should use `.RData` for multiple objects, and generally should not use`save.image()`.\n\n`save.image()` should never be a part of your workflow.\n\n## Loading Data\n\nYou can load `.rds` files using `readRDS()` and `.Rdata` and `.rda` files using `load()`.\n\n\n::: {.cell}\n\n:::\n\n\n## Notes on Saving and Loading R Data\n\nThe values in quotes are all filepaths, and by default, R will search for these objects in your current working directory.\n\nYou can change where R searches for images by adjusting this filepath. For example, if you save your data in a `Data` subfolder within your working directory, you might try\n\n\n::: {.cell}\n\n:::\n\n\n## Other types of data\n\nOften, you will read and write files as **c**omma **s**eparated **v**alues, or `.csv`. You can do this by navigating *File \\> Import Dataset* in the menu bar, but generally I recommend doing it manually using the `readr` package. You will need to do so if loading data is part of your work flow, such as if it is required for an R Markdown writeup.\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}