{
  "hash": "58700fe95f4ee473fa3057c5c72af3a8",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Functions and Loops\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: visual\n---\n\n\n## Overview of today\n\n-   Writing R functions\n\n-   Loops\n\n## Anatomy of a function\n\nRecall the structure of a function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name <- function(param1, param2 = \"default\") {\n  # body of the function\n  return(output)\n}\n```\n:::\n\n\n-   `function_name`: the name you want to give your function, what you will use to call it\n-   `function()`: call this to define a function\n-   `param1`, `param2`: formal arguments input by the user. You can assign default values by setting them equal to something in the call to `function()`\n-   **body**: the actual code that is executed\n-   `return()`: the output value **returned** to the user\n\n## Exercise: degrees to radians\n\n<br>\n\nWrite a function `degreesToRadians` that takes as input one number, `degrees`, and returns its value in radians. You do not need to check the data type of the input.\n\n## Exercise: degrees to radians\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndegreesToRadians <- function(degrees) {\n  return((degrees / 360) * 2 * pi)\n}\ndegreesToRadians(180)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.141593\n```\n:::\n:::\n\n\n## Additional notes on functions\n\n<br>\n\n-   *How do I know if a function is working*?\n\n    -   Test it on easy examples for which you know the results\n    -   When using `if`, test all the possible cases\n\n## Loops\n\n<br>\n\n**Loops** enable us to repeat a line/lines of code many times.\n\nR provides three types of explicit loops: `for`, `while`, and `repeat`. We will focus on `for` and `while`.\n\n## `for` loops\n\n<br>\n\n`for` loops repeat a chunk of code for each value of a vector.\n\n::: center\n`for (name in vector) {body}`\n:::\n\n<br>\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:8) {\n  print(i)\n}\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n```\n:::\n:::\n\n\n## Example: Vector sum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1:10)\nsum(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n\n```{.r .cell-code}\ntotal_sum <- 0\nfor (i in x) {\n  total_sum <- total_sum + i\n}\nprint(total_sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n:::\n\n\n## Example: Fibonacci sequence\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code to compute the first 10 Fibonacci numbers\nfib_10 <- numeric(10) # empty numeric vector of length 10\nfib_10[1] <- 1\nfib_10[2] <- 1\nfor (i in 3:10) {\n  fib_10[i] <- fib_10[i - 1] + fib_10[i - 2]\n}\nfib_10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  1  2  3  5  8 13 21 34 55\n```\n:::\n:::\n\n\n## `while` loops\n\n<br>\n\n`while` loops continuously evaluate the inner code chunk until the condition is `FALSE`.\n\nBe careful here: It is possible to get stuck in an infinite loop!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0\nwhile (x < 5) {\n  cat(\"x is currently\", x, \". Let's increase it by 1.\")\n  x <- x + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is currently 0 . Let's increase it by 1.x is currently 1 . Let's increase it by 1.x is currently 2 . Let's increase it by 1.x is currently 3 . Let's increase it by 1.x is currently 4 . Let's increase it by 1.\n```\n:::\n:::\n\n\n## `while` loops\n\n<br>\n\nLet's see if we can clean up that output. Add `\"\\n\"` to a string to force a line break.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0\nwhile (x < 5) {\n  cat(\"x is currently \", x, \". Let's increase it by 1! \\n\", sep = \"\")\n  x <- x + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is currently 0. Let's increase it by 1! \nx is currently 1. Let's increase it by 1! \nx is currently 2. Let's increase it by 1! \nx is currently 3. Let's increase it by 1! \nx is currently 4. Let's increase it by 1! \n```\n:::\n:::\n\n\n## Example: String input\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstring_vector <- c(\"a\", \"b\", \"c\", \"d\", \"e\")\nfor (mystring in string_vector) {\n  print(mystring)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n[1] \"e\"\n```\n:::\n:::\n\n\n## Nested Loops\n\nIn nested loops, the innermost loop iterates most quickly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounter <- 0\nfor (i in 1:3) {\n  for (j in 1:2) {\n    counter <- counter + 1\n    cat(\"i = \", i, \", j = \", j, \", counter = \", counter, \"\\n\", sep = \"\")\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ni = 1, j = 1, counter = 1\ni = 1, j = 2, counter = 2\ni = 2, j = 1, counter = 3\ni = 2, j = 2, counter = 4\ni = 3, j = 1, counter = 5\ni = 3, j = 2, counter = 6\n```\n:::\n:::\n\n\n## Nested Loops\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:3) {\n  for (j in 1:2) {\n    print(i * j)\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 2\n[1] 4\n[1] 3\n[1] 6\n```\n:::\n:::\n\n\n## Filling in a vector\n\nNote: Usually, this is an inefficient way to do this. We will see a faster way to work with vectors next class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inefficient\nx <- rep(NA, 5)\nfor (i in 1:5) {\n  x[i] <- i * 2\n}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  4  6  8 10\n```\n:::\n\n```{.r .cell-code}\n# Much better\nx <- seq(2, 10, by = 2)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  4  6  8 10\n```\n:::\n:::\n\n\n## Filling in a vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nx <- rep(NA, 5)\nmy_strings <- c(\"a\", \"a \", \"a c\", \"a ca\", \"a cat\")\nfor (i in 1:5) {\n  x[i] <- str_length(my_strings[i])\n  print(x)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1 NA NA NA NA\n[1]  1  2 NA NA NA\n[1]  1  2  3 NA NA\n[1]  1  2  3  4 NA\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\n## Filling in a matrix\n\nNote: Usually, this is an inefficient way to do this. We will see a faster way to work with vectors next class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- matrix(NA, nrow = 4, ncol = 3)\nfor (i in 1:4) {\n  for (j in 1:3) {\n    x[i, j] <- i * j\n  }\n}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    2    4    6\n[3,]    3    6    9\n[4,]    4    8   12\n```\n:::\n:::\n\n\n## Continue until positive sample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(3)\nx <- -1\nwhile (x < 0) {\n  x <- rnorm(1)\n  print(x)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.9619334\n[1] -0.2925257\n[1] 0.2587882\n```\n:::\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2587882\n```\n:::\n:::\n\n\n## Combining Loops and Conditional Evaluation\n\nConsider the following code. What do you think it does?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:10) {\n  if (i %% 2 == 1) {\n    print(\"odd\")\n  } else {\n    print(\"even\")\n  }\n}\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"odd\"\n[1] \"even\"\n[1] \"odd\"\n[1] \"even\"\n[1] \"odd\"\n[1] \"even\"\n[1] \"odd\"\n[1] \"even\"\n[1] \"odd\"\n[1] \"even\"\n```\n:::\n:::\n\n\n## Fizz Buzz\n\nLet's play Fizz Buzz.\n\n1.  Everyone takes turns to count incrementally.\n2.  Any number divisible by three is replaced with the word \"fizz.\"\n3.  Any number divisible by five is replaced with the word \"buzz.\"\n4.  Any number divisible by both three and five is replaced with the word \"fizzbuzz.\"\n\n## Fizz Buzz\n\nCan we write code for a computer to play fizz buzz with itself? Suppose we want the computer to play Fizz Buzz up to 100.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:100) {\n  if (i %% 3 == 0 & i %% 5 == 0) {\n    print(\"fizzbuzz\")\n  } else if (i %% 3 == 0) {\n    print(\"fizz\")\n  } else if (i %% 5 == 0) {\n    print(\"buzz\")\n  } else {\n    print(i)\n  }\n}\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] \"fizz\"\n[1] 4\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 7\n[1] 8\n[1] \"fizz\"\n[1] \"buzz\"\n[1] 11\n[1] \"fizz\"\n[1] 13\n[1] 14\n[1] \"fizzbuzz\"\n[1] 16\n[1] 17\n[1] \"fizz\"\n[1] 19\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 22\n[1] 23\n[1] \"fizz\"\n[1] \"buzz\"\n[1] 26\n[1] \"fizz\"\n[1] 28\n[1] 29\n[1] \"fizzbuzz\"\n[1] 31\n[1] 32\n[1] \"fizz\"\n[1] 34\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 37\n[1] 38\n[1] \"fizz\"\n[1] \"buzz\"\n[1] 41\n[1] \"fizz\"\n[1] 43\n[1] 44\n[1] \"fizzbuzz\"\n[1] 46\n[1] 47\n[1] \"fizz\"\n[1] 49\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 52\n[1] 53\n[1] \"fizz\"\n[1] \"buzz\"\n[1] 56\n[1] \"fizz\"\n[1] 58\n[1] 59\n[1] \"fizzbuzz\"\n[1] 61\n[1] 62\n[1] \"fizz\"\n[1] 64\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 67\n[1] 68\n[1] \"fizz\"\n[1] \"buzz\"\n[1] 71\n[1] \"fizz\"\n[1] 73\n[1] 74\n[1] \"fizzbuzz\"\n[1] 76\n[1] 77\n[1] \"fizz\"\n[1] 79\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 82\n[1] 83\n[1] \"fizz\"\n[1] \"buzz\"\n[1] 86\n[1] \"fizz\"\n[1] 88\n[1] 89\n[1] \"fizzbuzz\"\n[1] 91\n[1] 92\n[1] \"fizz\"\n[1] 94\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 97\n[1] 98\n[1] \"fizz\"\n[1] \"buzz\"\n```\n:::\n:::\n\n\n## Coding challenges\n\n-   Project Euler\n-   HackerRank\n-   LeetCode (doesn't support R)\n",
    "supporting": [
      "13_functions-loops_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}