{
  "hash": "5b678f00162fbb873486f5e0fb932953",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Basic Definitions\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: visual\n---\n\n\n## Warm-up: Getting to know each other\n\nIn groups of two or three, share:\n\n-   Introduce yourself\n-   Discuss what you think the following code does (feel free to try it out):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsides <- 1:6\nrolls <- sample(sides, 100, replace = T)\nprint(sum(rolls == 1))\n```\n:::\n\n\n## Overview of today\n\n-   Basic definitions: objects, expressions, functions, data types\n-   R Markdown and file management\n\n# Basic definitions\n\n## Review\n\n> *\"To understand computations in R, two slogans are helpful: Everything that exists is an **object**. Everything that happens is a **function** call.\"*\n>\n> (Chambers, 2014)\n\nWe saw last class that we can use R to perform basic mathematical operations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n## Expressions\n\nWe saw last class that we can use R to perform basic mathematical operations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n***Definition***: an **expression** is a symbol or a combination of symbols that evaluates to a value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n## Objects\n\n***Definition***: An **object** is created when R evaluates an expression. The object is accessible only by name.\n\n-   An anonymous object gets deleted from the computer memory by a process called **garbage collection**.\n-   A special object named `.Last.value` contains the value of the last evaluated expression (in console only).\n\n## Assignment\n\nWe saw last class that we can assign names to values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1 + 2\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n***Definition***: **Assignment** is an operation to **bind** an object to name, using the symbol `<-`.\n\n-   `=` and `<-` are not generally equivalent. However, they are equivalent when they are used as assignment operators.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x = 1 + 2\n    x\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 3\n    ```\n    :::\n    :::\n\n\n## Check your understanding: Assignment\n\nWhat do you expect the output of the following chunks to be?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1\ny <- x + 1\nx <- 0\nz <- y + 1\nprint(z)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1\nb <- a + 1\nb <- 2 * b\nprint(b)\n```\n:::\n\n\n## Check your understanding: Assignment\n\nWhat do you expect the output of the following chunks to be?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1\ny <- x + 1\nx <- 0\nz <- y + 1\nprint(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1\nb <- a + 1\nb <- 2 * b\nprint(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n## Objects and data\n\nWe can use assignments to save values as named objects and perform math on the objects:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\ny <- 5\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nToday we'll see that R can handle objects that are not numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- \"Hello\"\n```\n:::\n\n\n. . .\n\nHowever, we need to be careful because not all operations work with all types of data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx + z\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in x + z: non-numeric argument to binary operator\n```\n:::\n:::\n\n\n## Atomic vectors\n\nThe most basic type of object in R used for storing values is the atomic vector. The four most common types of atomic vectors are:\n\n-   logical: ex. `TRUE` or `FALSE`\n-   integer: ex. 1, 2, 3, 4, ...\n-   double: ex. 3.1\n-   character: ex. `\"Hello\"`\n\nIntegers and doubles are both also called **numeric** vectors.\n\n## Atomic vectors\n\n![](img/02_atomics.png){fig-align=\"center\"}\n\nfrom *Advanced R*, Hadley Wickham.\n\n## Atomic vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_lgc <- T\nexample_int <- 1L\nexample_dbl <- 1.0\nexample_chr <- \"Hello\"\n```\n:::\n\n\nThe `typeof` function can be used to get the data type of an object.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(example_lgc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(example_int)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(example_dbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(example_chr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n## Coercion\n\n-   You can explicitly change the type of an object:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    as.numeric(example_lgc)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 1\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    as.numeric(example_chr)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] NA\n    ```\n    :::\n    :::\n\n\n-   When elements of different types are mixed in an atomic vector, R automatically converts all of them to the same type.\n\n-   **Order of precedence**, from the highest to the lowest: character, numeric, integer, logical.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    c(TRUE, \"hello\", 1)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"TRUE\"  \"hello\" \"1\"    \n    ```\n    :::\n    :::\n\n\n## Special values\n\n+------------------+--------------------------------------------------------+\n| Value            | Usual meaning                                          |\n+==================+========================================================+\n| `NA`             | Missing values                                         |\n+------------------+--------------------------------------------------------+\n| `NaN`            | a computed value that is not a number (try `1/0`)      |\n+------------------+--------------------------------------------------------+\n| `NULL`           | an object with no value                                |\n+------------------+--------------------------------------------------------+\n| `-Inf` and `Inf` | a computed value that is large (or large and negative) |\n+------------------+--------------------------------------------------------+\n\n## Environment\n\nWhen R evaluates an expression such as `x + 1`, how does R locate the object associated with the name `x`?\n\n. . .\n\nDuring an assignment, the binding between an object and its name is stored in an **environment**.\n\n. . .\n\nWhen R starts, a **global** environment (sometimes called a **workspace)** is created; every subsequent assignment that takes place at the command prompt adds objects to this environment.\n\n## Environment\n\nWe will see later that we can enter **local** environments within the global environment and define objects that are confined to these local environments.\n\nThe `ls()` command displays object in the current global environment.\n\nTo remove objects, we can use the `rm()` command.\n\n## Operators\n\nAn operator is a symbol that tells the compiler to perform specific mathematical or logical operations.\n\nTypes of operators:\n\n-   Assignment operators\n\n-   Arithmetic operators\n\n-   Logical operators\n\n-   Relational operators\n\n## Arithmetic Operators {.smaller}\n\n+-------------+----------------+---------------------------------------+\n| Operator    | Operation      | Example                               |\n+=============+================+=======================================+\n| `+`         | Addition       | `> 3 + 4`                             |\n|             |                |                                       |\n|             |                | `[1] 7`                               |\n+-------------+----------------+---------------------------------------+\n| `-`         | Subtraction    | `> 3 - 4`                             |\n|             |                |                                       |\n|             |                | `[1] -1`                              |\n+-------------+----------------+---------------------------------------+\n| `*`         | Multiplication | `> 3 * 4`                             |\n|             |                |                                       |\n|             |                | `[1] 12`                              |\n+-------------+----------------+---------------------------------------+\n| `/`         | Division       | `> 3 / 4`                             |\n|             |                |                                       |\n|             |                | `[1] 0.75`                            |\n+-------------+----------------+---------------------------------------+\n\n## Arithmetic Operators {.smaller}\n\n+---------------+----------------+--------------------------------------+\n| Operator      | Operation      | Example                              |\n+===============+================+======================================+\n| `^` or `**`   | Exponentiation | `> 3 ^ 4`                            |\n|               |                |                                      |\n|               |                | `[1] 81`                             |\n+---------------+----------------+--------------------------------------+\n| `%%`          | Modulo         | `> 3 %% 4`                           |\n|               |                |                                      |\n|               |                | `[1] 3`                              |\n+---------------+----------------+--------------------------------------+\n\n## Logical Operators {.smaller}\n\n+---------------+---------------+--------------------------------------+\n| Operator      | Operation     | Example                              |\n+===============+===============+======================================+\n| `&`           | AND           | `> TRUE & FALSE`                     |\n|               |               |                                      |\n|               |               | `[1] FALSE`                          |\n+---------------+---------------+--------------------------------------+\n| `|`           | OR            | `> TRUE & FALSE`                     |\n|               |               |                                      |\n|               |               | `[1] TRUE`                           |\n+---------------+---------------+--------------------------------------+\n| `!`           | NOT           | `> !TRUE`                            |\n|               |               |                                      |\n|               |               | `[1] FALSE`                          |\n+---------------+---------------+--------------------------------------+\n\n## Relational Operators {.smaller}\n\n+---------------+--------------------------+-------------------------------------+\n| Operator      | Operation                | Example                             |\n+===============+==========================+=====================================+\n| `>`           | greater than             | `> 2 > 1`                           |\n|               |                          |                                     |\n|               |                          | `[1] TRUE`                          |\n+---------------+--------------------------+-------------------------------------+\n| `>=`          | greater than or equal to | `> 2 >= 1`                          |\n|               |                          |                                     |\n|               |                          | `[1] TRUE`                          |\n+---------------+--------------------------+-------------------------------------+\n| `==`          | equal                    | `> 2 == 1`                          |\n|               |                          |                                     |\n|               |                          | `[1] FALSE`                         |\n+---------------+--------------------------+-------------------------------------+\n| `<=`          | less than or equal to    | `> 2 <= 1`                          |\n|               |                          |                                     |\n|               |                          | `[1] FALSE`                         |\n+---------------+--------------------------+-------------------------------------+\n| `<`           | less than                | `> 2 < 1`                           |\n|               |                          |                                     |\n|               |                          | `[1] FALSE`                         |\n+---------------+--------------------------+-------------------------------------+\n| `!=`          | not equal to             | `> 2 != 1`                          |\n|               |                          |                                     |\n|               |                          | `[1] TRUE`                          |\n+---------------+--------------------------+-------------------------------------+\n\n## Relational Operators {.smaller}\n\n+----------------+----------------+------------------------------------+\n| Operator       | Operation      | Example                            |\n+================+================+====================================+\n| `!=`           | not equal to   | `> 2 != 1`                         |\n|                |                |                                    |\n|                |                | `[1] TRUE`                         |\n+----------------+----------------+------------------------------------+\n\n## Check your understanding: Operators\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE & FALSE & TRUE\nTRUE & (FALSE | TRUE)\n1 < 4\n(1 < 4) & (3 > 4)\n```\n:::\n\n\n. . .\n\n**Answers:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE & FALSE & TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nTRUE & (FALSE | TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n1 < 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n(1 < 4) & (3 > 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n# File management\n\n## The working directory\n\n-   The **working directory** is a folder where files are retrieved from or saved to by default.\n\n-   The command `getwd()` gets the working directory, which usually is:\n\n    -   `/Users/USERNAME` on Apple\n    -   `C:\\Users\\USERNAME\\Documents` on Windows\n\n-   Files on a computer are grouped into folders, which are organized in a hierarchy.\n\n-   The **absolute pathname** of a file describes its location in the hierarchy.\n\n## Relative pathnames\n\nThe **relative pathname** of a file specifies its location relative to the working directory.\n\n-   The command `setwd()` sets the working directory for the current R session.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\nsetwd(\"/Users/pgao/Desktop\")\n```\n:::\n\n\n-   **On Windows, add `C:` to the beginning of the absolute pathname.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\nsetwd(\"C:/Documents/\")\n```\n:::\n\n\n## Example file structure\n\n![](images/Screen%20Shot%202023-08-15%20at%207.51.33%20AM.png)\n\n## Project-based workflow\n\nIn this class, I encourage you to organize all your code/assignments/files into a single MATH167R folder.\n\nOnce you create this folder, you can create an **RStudio Project**, which will create a file that tells RStudio that all the code in the folder is associated with a single project.\n\nAny code in the project folder assumes that the working directory is the project root directory. This ensures that the project can be moved around your computer or onto another computer and none of the paths will break.\n\n## Example file structure for MATH167R\n\n``` bash\nMATH167R\n├── labs\n│   ├── 01_lab.R\n│   └── 02_lab.R\n├── checkins\n│   ├── 01_checkin.R\n│   └── 02_checkin.R\n├── project\n│   └── data\n│       └── trees.csv\n└── exams\n```\n\n## Naming files\n\nTips from [Jenny Bryan](https://github.com/jennybc/how-to-name-files):\n\n-   machine readable\n-   human readable\n-   plays well with default ordering\n\n## Naming files {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n### Bad\n\n-   `newfinal2actualFINALnew.docx`\n-   `my first lab.R`\n-   `stuff.R`\n:::\n\n::: {.column width=\"50%\"}\n### Good:\n\n-   `01_lab1.Rmd`\n-   `analysis_functions.R`\n-   `2020-01-08_labWriteup.Rmd`\n:::\n\n## \n:::\n\n# R Markdown\n\n## R Markdown\n\nR Markdown files (see examples [here](https://rmarkdown.rstudio.com/gallery.html))\n\n-   Combine code, output, and writing\n-   Self-contained analyses\n-   Creates HTML, PDF, slides (like these!), webpages, ...\n-   will be required for assignments\n\n## Your first RMarkdown file\n\nOpen `01_first-R-lab.Rmd` in RStudio. At the top of the file, you should see the following header:\n\n    ---\n    title: \"Lab 1: Basic Definitions\"\n    author: \"YOUR NAME HERE\"\n    date: \"2023-08-21\"\n    output: html_document\n    ---\n\nThis header contains **metadata** about the document that follows: the name of the file, the author, the date, and what kind of output it will create.\n\n## Source Editor\n\n![](images/Screen%20Shot%202023-08-19%20at%206.28.06%20PM.png)\n\n## Visual Editor\n\n![](images/Screen%20Shot%202023-08-19%20at%206.29.01%20PM.png)\n\n## Code chunks\n\nCode chunks contain R code that is evaluated when you render your R Markdown report. You can insert a code chunk by clicking `Insert > Code Chunk` or by typing the chunk delimiters ```` ```{r} ```` and ```` ``` ```` .\n\nChunk output can be customized with optional arguments set in the `{}` of a chunk header, as we will see in Lab 01.\n\n## R Markdown (and directory weirdness)\n\n-   R Markdown handles all the tricky file management--just put the file you want to access in the same folder as your .Rmd file\n-   This can be confusing/frustrating---patience is key!\n-   Try downloading the sample code `01_lab-test-code.R` from \\[here\\](../static/01_lab-test-code.R) and putting it in the same folder as your Lab 01 R Markdown report.\n\n## R Markdown\n\nRemember the following:\n\n-   R Markdown produces fully reproducible reports -- each time you render, you run the analyis from the beginning\n-   Code goes in chunks, while the explanation/narrative goes outside of chunks\n-   RStudio now provides a visual editor for a familiar / Google docs-like editing experience\n\n## Lab 1\n\nIn Lab 1, we'll make sure R and RStudio are properly installed and updated, practice assigning objects, and generate your first R Markdown report (in a properly organized directory).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}