{
  "hash": "f52f18825ca3a3b3e7ba9d30efa567db",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Linear regression\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: source\n---\n\n\n## Overview of today\n\n-   Covariance and correlation\n-   Linear regression\n\n## Relating numerical variables\n\n## Regression methods\n\nAssume we have some data:\n\n-   $X_1,\\ldots, X_p$: $p$ **independent variales/explanatory variables/covariates/predictors**\n-   $Y$: the **dependent variables/response/outcome**.\n\nWe want to know the relationship between our covariates and our response, we can do this with a method called **regression**. Regression provides us with a statistical method to conduct inference and prediction.\n\n## Regression methods\n\n-   **inference:** assess the relationship between our variables, our statistical model as a whole, predictor importance\n    -   What is the relationship between sleep and GPA?\n    -   Is parents' education or parents' income more important for explaining income?\n-   **prediction:** predict new/future outcomes from new/future covariates\n    -   Can we predict test scores based on hours spent studying?\n\n## Why is it called regression?\n\n![](https://upload.wikimedia.org/wikipedia/commons/b/b2/Galton%27s_correlation_diagram_1875.jpg){fig-align=\"center\"}\n\n## Linear Regression\n\nGiven our response $Y$ and our predictors $X_1, \\ldots, X_p$, a **linear regression model** takes the form:\n\n$$\n\\begin{align}\nY &= \\beta_0 + \\beta_1 X_1 + \\cdots + \\beta_p X_p + \\epsilon,\\\\\n\\epsilon &\\sim N(0,\\sigma^2) \n\\end{align}\n$$\n\n**Note:** If we wish to include a categorical covariate, we can add indicator variables for each category.\n\n\n\n## Linear Regression\n\n$$\n\\begin{align}\nY &= \\beta_0 + \\beta_1 X_1 + \\cdots + \\beta_p X_p + \\epsilon,\\\\\n\\epsilon &\\sim N(0,\\sigma^2) \n\\end{align}\n$$\n\n-   $Y$: dependent variable, outcome, response\n-   $X_j$: independent variable, covariate, predictor\n-   $\\beta_0$: Intercept\n-   $\\beta_j$: coefficient, the expected difference in the response between two observations differing by one unit in $X_j$, with all other covariates identical.\n-   $\\epsilon$: error, noise, with mean $0$ and variance $\\sigma^2$\n\n\n## Linear Regression\n\nWe can fully write out a linear regression model\n\n$$\n\\begin{equation}\n\\begin{bmatrix} y_1 \\\\ y_2\\\\ \\vdots \\\\ y_n \\end{bmatrix} = \n\\begin{bmatrix} 1 & x_{1,1} & \\cdots & x_{1,k}\\\\\n1 & x_{2,1} & \\cdots & x_{2, k}\\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\n1 & x_{n,1} & \\cdots & x_{n, k}\\end{bmatrix}\n\\begin{bmatrix} \\beta_0 \\\\ \\beta_1 \\\\ \\vdots \\\\ \\beta_{k} \\end{bmatrix} +\n\\begin{bmatrix} \\epsilon_1 \\\\ \\epsilon_2 \\\\ \\vdots \\\\ \\epsilon_{n} \\end{bmatrix}\n\\end{equation}\n$$\n\n## Matrix Notation\n\nThis can also be expressed in matrix form:\n\n$$\n\\begin{align}\n\\mathbf{Y} &= \\mathbf{X}\\beta + \\epsilon,\\\\\n\\epsilon &\\sim N(0,1)\n\\end{align}\n$$\n\n-   $\\mathbf{Y} \\in \\mathbb{R}^{n \\times 1}$: an n-dimensional vector of the response\n-   $\\mathbf{X} \\in \\mathbb{R}^{n \\times (k+1)}$: a $((k+1)\\times n)$ matrix of the predictors (including intercept)\n-   $\\beta \\in \\mathbb{R}^{((k+1)\\times 1)}$: a $(k+1)$-dimensional vector of regression parameters\n-   $\\epsilon \\in \\mathbb{R}^{n \\times 1}$: an n-dimensional vector of the error term\n\n## $\\large \\epsilon$: Error term\n\n$\\epsilon$, pronounced epsilon, represents the **error term** of our model. We can model $Y$ as a linear function of the $X$'s, but in the real world, the relationship won't always be perfect. There is noise! It can come from\n\n-   Measurement error in the $X$'s\n-   Measurement error in the $Y$'s\n-   Unobserved/missing variables in the model\n-   Deviations in the true model from linearity\n-   True randomness\n\nIn linear regression, we assume that this error term is normally distributed with mean zero and variance $\\sigma^2$.\n\n## $\\beta_0$: Intercept\n\n$\\beta_0$ is the **intercept term** of our model. Notice that\n\n$$\\mathbb{E}[Y|X_1 = X_2 = \\cdots = X_p = 0] = \\beta_0$$\n\nThus, $\\beta_0$ is the expected value of our response if all the covariates are equal to $0$. This is also known as the y-intercept of our model.\n\n## $X_j$: Independent variable\n\n$X_j$ represents the $j$<sup>th</sup> independent variable in our model. Notice that $$\\mathbb{E}[Y|X_1,\\ldots, X_p] = \\beta_0 + \\beta_1 X_1 + \\cdots + \\beta_p X_p$$ What happens to this expectation if we increase $X_j$ by 1 unit, holding everything else constant?\n\nThe conditional expectation of $Y$ increases by $\\beta_j$.\n\n\n## $\\beta_j$: Coefficient\n\n$\\beta_j$ represents the $j$<sup>th</sup> regression coefficient in our model. From the previous slide, we saw that for every 1 unit increase in $X_j$, holding all other variables constant, the expected value of the response increases by $\\beta_j$. From this we can derive an interpretation.\n\n**Interpretation of** $\\beta_j$: the expected difference in the response between two observations differing by one unit in $X_j$, with all other covariates identical.\n\n\n## `lm()`: Linear Model\n\nWe fit a linear regression model in R using `lm()`. The first argument is a **formula**, which is a type of R object. Formulas typically take the following form: `Y ~ X_1 + X_2 + ... + X_p`.\n\nThe dependent variable, `Y` goes on the left-hand side of the tilde `~`, which marks the formula. The independent variables are added on the right-hand side. Using this formula will give us a model in the form of \n\n$$\n\\begin{align}\nY &= \\beta_0 + \\beta_1 X_1 + \\cdots + \\beta_p X_p + \\epsilon,\\\\\n\\epsilon &\\sim N(0,\\sigma^2) \n\\end{align}\n$$\n\n\n::: {.cell}\n\n:::\n\n\n## `lm()`: Linear Model\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-2_fbdf02c65d002acf26b284f883bc32e8'}\n\n```{.r .cell-code}\ndata(mtcars)\nmy_lm <- lm(mpg ~ hp + wt, data = mtcars)\nclass(my_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"lm\"\n```\n:::\n\n```{.r .cell-code}\nmy_lm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mpg ~ hp + wt, data = mtcars)\n\nCoefficients:\n(Intercept)           hp           wt  \n   37.22727     -0.03177     -3.87783  \n```\n:::\n:::\n\n\n## `lm()`: Linear Model\n\nWe can see from `names()` that `lm` objects contain a lot more than they print out by default.\n\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-3_7f66d4f21439ebd32740902d0493a4f1'}\n\n```{.r .cell-code}\nnames(my_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n [9] \"xlevels\"       \"call\"          \"terms\"         \"model\"        \n```\n:::\n:::\n\n\n## `summary()` Model summaries\n\n`summary()` or `summary.lm()` gives us a summary of our `lm` object in R.\n\n-   The quantiles of the residuals: hopefully, they match a normal distribution.\n-   Coefficients, their standard errors, and their individual significances\n-   (Adjusted) R-squared value: how much of the overall variability in the response is explained by the model?\n-   F-statistic: hypothesis test for the significance of the overall model\n\n## `summary()` Model summaries\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-4_8e0093decc544a8bcee55cd3333adc5e'}\n\n```{.r .cell-code}\nsummary(my_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mpg ~ hp + wt, data = mtcars)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-3.941 -1.600 -0.182  1.050  5.854 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 37.22727    1.59879  23.285  < 2e-16 ***\nhp          -0.03177    0.00903  -3.519  0.00145 ** \nwt          -3.87783    0.63273  -6.129 1.12e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.593 on 29 degrees of freedom\nMultiple R-squared:  0.8268,\tAdjusted R-squared:  0.8148 \nF-statistic: 69.21 on 2 and 29 DF,  p-value: 9.109e-12\n```\n:::\n:::\n\n\n\n## `plot()`: Regression model diagnostics\n\nCalling `plot(my_lm)` will return several diagnostic plots. Remember that we want our error term to look normally distributed with mean zero.  We won't go into all the details for this class, but here are some tips:\n\n-   **Residuals vs Fitted:** these are your errors (residuals) plotted over the predicted outcome (fitted). Errors should be random, so here you want to see randomly scattered points with no discernable pattern. You want the trend line to be approximately horizontal.\n-   **Normal Q-Q plot:** These are the quantiles of your errors against the quantiles of a normal distribution. In theory, your errors should be normally distributed, so you are hoping that points are mostly along the 45-degree $y=x$ line.\n\n## `plot()`: Regression model diagnostics\n\n-   **Scale-location:** This looks at the magnitude of standardized residuals over the predicted outcome. Similar interpretation as residuals vs fitted. This can make it slightly easier to identify undesireable patterns.\n-   **Residuals vs leverage:** This can help identify highly influential points, such as outliers. If points are outside dotted red lines, then removing them would noticeably alter your results. *Never just remove outliers!* If it's real data, it's valid and removing it will bias your results. It is much more important to understand why outliers are there than to remove them.\n\n\n## `plot()`: Regression model diagnostics\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-5_54847200501c49b13320f915f8a0c342'}\n\n```{.r .cell-code}\nplot(my_lm)\n```\n:::\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-6_282ceb41627cffa91341200610bf13ec'}\n::: {.cell-output-display}\n![](temp_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n\n\n## `plot()`: Regression model diagnostics\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-7_7061b5c770d8eaacb14ba6f2bea9045e'}\n::: {.cell-output-display}\n![](temp_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n\n## `plot()`: Regression model diagnostics\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-8_393be8b95029fcf98a6407c752a3d196'}\n::: {.cell-output-display}\n![](temp_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n\n## `plot()`: Regression model diagnostics\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-9_34ad54efabe7ce2acf544001e7a06901'}\n::: {.cell-output-display}\n![](temp_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n## `coef()`: Extract coefficients\n\nUse `coef()` to extract estimated coefficients as a vector.\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-10_336f3f3ac91d076f884f3784d9fa93be'}\n\n```{.r .cell-code}\ncoef(my_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept)          hp          wt \n37.22727012 -0.03177295 -3.87783074 \n```\n:::\n:::\n\n\n## `fitted()` Extract fitted values\n\nUse `fitted()` to extract the fitted/estimated values for the response. This can be useful to compare how our fitted values compare to the estimated values to help assess model fit.\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-11_0ab833a56aa54389f00044de4b43f8fb'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nmod_fits <- fitted(my_lm)\nmy_df <- data.frame(actual = mtcars$mpg, fitted = mod_fits)\nggplot(my_df, aes(x = fitted, y = actual)) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0, col = \"red\", lty = 2) + \n  theme_bw(base_size = 15) +\n  labs(x = \"Fitted values\", y = \"Actual values\", title = \"Actual vs. Fitted\") +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n:::\n\n\n## `fitted()` Extract fitted values\n\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-12_b0184dd35817411e2630358e8002e1a9'}\n::: {.cell-output-display}\n![](temp_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n## `predict()`: Predict new outcomes\n\nUse `predict()` to predict new outcomes given new explanatory variables. For example, pretend we observe two new cars with horsepowers of `100` and `150`, respectively, and weights of `3000` and `3500`, respectively.\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-13_7077bd544b0c1ab545b1d23a80fae40c'}\n\n```{.r .cell-code}\n# Note: wt is in 1000s of lbs\nnew_obs <- data.frame(hp = c(100, 150), wt = c(3, 3.5))\npredict(my_lm, new_obs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       1        2 \n22.41648 18.88892 \n```\n:::\n:::\n\n\nWe'll come back to prediction in future lectures.\n\n\n## `residuals()`: Compute residuals\n\nUse `residuals()` to compute the residuals for fitted values.\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-14_e3a2b60a7b8875b712edbeed99c6cb2d'}\n\n```{.r .cell-code}\nresiduals(my_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive \n        -2.57232940         -1.58348256         -2.47581872          0.13497989 \n  Hornet Sportabout             Valiant          Duster 360           Merc 240D \n         0.37273336         -2.37381631         -1.29904236          1.51293266 \n           Merc 230            Merc 280           Merc 280C          Merc 450SE \n         0.80632669         -0.77945988         -2.17945988          0.67463146 \n         Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental \n         0.25616901         -1.64993945          0.04479541          1.03726743 \n  Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla \n         5.50751301          5.80097202          1.08761978          5.85379085 \n      Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28 \n        -3.08644148         -3.31136386         -3.94097947         -1.25202805 \n   Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa \n         2.44325481         -0.32665313         -0.03737415          2.63023081 \n     Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E \n        -0.74648866         -1.22541324          2.26052287         -1.58364943 \n```\n:::\n:::\n\n\n\n## Manipulating formulas\n\nWorking with formulas in R can be somewhat confusing, so it is important to understand how formulas work to make sure you are fitting the intended model.\n\n## `- 1`\n\nUse `- 1` to remove an intercept from your model. Only do this if you are very sure that what you are doing is appropriate. I don't recommend doing this in practice.\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-15_1d9bcab6d9e51c39c11c23bd61f19269'}\n\n```{.r .cell-code}\nno_intercept <- lm(mpg ~ hp + wt - 1, data = mtcars)\nsummary(no_intercept)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mpg ~ hp + wt - 1, data = mtcars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-19.407  -2.382   2.511   7.091  23.885 \n\nCoefficients:\n   Estimate Std. Error t value Pr(>|t|)   \nhp -0.03394    0.03940  -0.861   0.3959   \nwt  6.84045    1.89425   3.611   0.0011 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 11.32 on 30 degrees of freedom\nMultiple R-squared:  0.7264,\tAdjusted R-squared:  0.7082 \nF-statistic: 39.83 on 2 and 30 DF,  p-value: 3.599e-09\n```\n:::\n:::\n\n\n\n## `:` operator\n\nUse `X1:X2` to include an interaction effect in your model. This is useful if you have reason to believe two covariates interact, such as gender and education in a wage model. In our case, we'll assume horsepower and weight interact in their effect on mpg.\n\nTypically (always?), if you include an interaction effect, you should also include the marginal effects. You can do this automatically using `X1*X2`.\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-16_266f6c9209eb12bc34624658797a5d2c'}\n\n```{.r .cell-code}\ninteract <- lm(mpg ~ hp:wt, data = mtcars)\nsummary(interact)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mpg ~ hp:wt, data = mtcars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.8831 -2.0952 -0.4577  1.2262  7.9282 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 27.745642   1.062236   26.12  < 2e-16 ***\nhp:wt       -0.014872   0.001727   -8.61 1.32e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.288 on 30 degrees of freedom\nMultiple R-squared:  0.7119,\tAdjusted R-squared:  0.7023 \nF-statistic: 74.14 on 1 and 30 DF,  p-value: 1.321e-09\n```\n:::\n:::\n\n\n\n## `*` operator\n\n\n\n::: {.cell hash='temp_cache/revealjs/unnamed-chunk-17_e66069cacd96fff2e15e833703339e9e'}\n\n```{.r .cell-code}\ninteract <- lm(mpg ~ hp*wt, data = mtcars)\nsummary(interact)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mpg ~ hp * wt, data = mtcars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.0632 -1.6491 -0.7362  1.4211  4.5513 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 49.80842    3.60516  13.816 5.01e-14 ***\nhp          -0.12010    0.02470  -4.863 4.04e-05 ***\nwt          -8.21662    1.26971  -6.471 5.20e-07 ***\nhp:wt        0.02785    0.00742   3.753 0.000811 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.153 on 28 degrees of freedom\nMultiple R-squared:  0.8848,\tAdjusted R-squared:  0.8724 \nF-statistic: 71.66 on 3 and 28 DF,  p-value: 2.981e-13\n```\n:::\n:::\n\n\n\n## `.` operator\n\nUse `~ .` to include all non-response variables in the input data as independent variables.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mpg ~ ., data = mtcars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.4506 -1.6044 -0.1196  1.2193  4.6271 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)  \n(Intercept) 12.30337   18.71788   0.657   0.5181  \ncyl         -0.11144    1.04502  -0.107   0.9161  \ndisp         0.01334    0.01786   0.747   0.4635  \nhp          -0.02148    0.02177  -0.987   0.3350  \ndrat         0.78711    1.63537   0.481   0.6353  \nwt          -3.71530    1.89441  -1.961   0.0633 .\nqsec         0.82104    0.73084   1.123   0.2739  \nvs           0.31776    2.10451   0.151   0.8814  \nam           2.52023    2.05665   1.225   0.2340  \ngear         0.65541    1.49326   0.439   0.6652  \ncarb        -0.19942    0.82875  -0.241   0.8122  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.65 on 21 degrees of freedom\nMultiple R-squared:  0.869,\tAdjusted R-squared:  0.8066 \nF-statistic: 13.93 on 10 and 21 DF,  p-value: 3.793e-07\n```\n:::\n:::\n\n\n\n## Estimation\n\nHow do we choose/estimate $\\beta_{(k+1)\\times1}$?\n\nLeast squares finds the line that minimizes the squared distance between the points and the line, i.e. makes $$\\left[y_i - (\\beta_0 + \\beta_1 x_{i, 1} + \\dots + \\beta_k x_{i,k})\\right]^2$$ as small as possible for all $i = 1, \\dots, n$.\n\nThe vector $\\widehat{\\beta}$ that minimizes the sum of the squared distances is ()\n\n$$ \\widehat{\\beta}=\\left(\\mathbf{X}^T \\mathbf{X} \\right)^{-1}\\mathbf{X}^T \\mathbf{Y}.$$\n\nNote: In statistics, once we have estimated a parameter we put a \"hat\" on it, e.g. $\\widehat{\\beta_0}$ is the estimate of the true parameter $\\beta_0$.\n\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}