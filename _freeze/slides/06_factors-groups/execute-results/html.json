{
  "hash": "4c68d0064bd630567063ade0dbfc0592",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Factors and Categorical Data\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: visual\n---\n\n\n## Warm-up\n\n1.  What does the following code do? How would you write it without a pipe?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    \"hello\" |> print()\n    1:6 |> sample(1)\n    ```\n    :::\n\n\n## Warm-up\n\n**Answer:**\n\n1.  \n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    \"hello\" |> print()\n    1:6 |> sample(1)\n    ```\n    :::\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    print(\"hello\")\n    sample(1:6, 1)\n    ```\n    :::\n\n\n## Overview of today\n\n-   Classes and attributes\n-   Factors for categorical data\n-   Advanced descriptive statistics and summaries\n\n## Objects revisited\n\nRemember John Chambers' quote: \"Everything that exists in R is an object.\" This is roughly correct; however, it's important to remember that in R objects come in many shapes/flavors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds <- ggplot2::diamonds\nsummary(diamonds$carat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2000  0.4000  0.7000  0.7979  1.0400  5.0100 \n```\n:::\n\n```{.r .cell-code}\nsummary(diamonds$cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Fair      Good Very Good   Premium     Ideal \n     1610      4906     12082     13791     21551 \n```\n:::\n:::\n\n\nWhy do these return two types of output?\n\n## Polymorphism {.smaller}\n\nLoosely speaking, `carat` and `cut` are stored as different types of data. In this code, R is using two versions of `summary()`: one meant for categorical data and one meant for numerical data.\n\nThis is confusing because we need to remember that `summary()` works differently depending on the input, but it can also be powerful because the user doesn't have to remember many different functions (ex. `summary_numeric()` or `summary_character()`).\n\nThis is **polymorphism** in action: A common functional interface can be used for different types of input.\n\n## Object-oriented programming {.smaller}\n\nIn object-oriented programming, developers define different **classes** of objects with various **methods** (like `summary()`). This means that if a developer wants to create a new class of object (ex. for a new data type), users should still be able to use common functions like `print()` or `summary()`.\n\nR developers often use object-oriented programming, but the implementation takes many forms, so we won't go into detail in this course. What is important to remember is that the class(es) of an object determine(s) what you can do with it.\n\n## Classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_forecasts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-12-20/weather_forecasts.csv')\nclass(weather_forecasts$date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\nsummary(weather_forecasts$date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Min.      1st Qu.       Median         Mean      3rd Qu.         Max. \n\"2021-01-30\" \"2021-05-31\" \"2021-09-30\" \"2021-09-30\" \"2022-01-30\" \"2022-06-01\" \n```\n:::\n:::\n\n\nHere, we see that the `date` variable has the class `Date`, which has its own version of `summary()`.\n\n## Classes vs. data types\n\nWe previously only discussed four basic data types: logical, integer, double, and character.\n\n-   Type (as accessed via `typeof()`) describes the underlying data type.\n\n-   Class (as accessed via `class()`) describes an attribute that determines what you can do with this object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(weather_forecasts$date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(weather_forecasts$date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\n## Attributes {.smaller}\n\nIn R, objects can be associated with **attributes** such as class, that provide information on the values contained within.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(head(weather_forecasts))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$names\n [1] \"date\"                  \"city\"                  \"state\"                \n [4] \"high_or_low\"           \"forecast_hours_before\" \"observed_temp\"        \n [7] \"forecast_temp\"         \"observed_precip\"       \"forecast_outlook\"     \n[10] \"possible_error\"       \n\n$row.names\n[1] 1 2 3 4 5 6\n\n$class\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n## Factors: categorical data\n\n**Factors** are a class of object for categorical data that uses integer representation.\n\nThis can be efficient to store character vectors, because each string is only entered once. Because of this, creating data frames (but not tibbles!) in R often default to set strings as factors.\n\n## An example: months of the year {.smaller}\n\nHere's an example from *R for Data Science*:\n\nImagine we have a variable that represents month of the year:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 <- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\n```\n:::\n\n\nSome issues:\n\n-   Potential for typos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx2 <- c(\"Dec\", \"Apr\", \"Jam\", \"Mar\")\n```\n:::\n\n\n-   Not sorting in a reasonable way\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(x1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Apr\" \"Dec\" \"Jan\" \"Mar\"\n```\n:::\n:::\n\n\n## An example: months of the year {.smaller}\n\nWe can represent this variable using a factor by defining its **levels**, or the valid values this variable can take:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth_levels <- c(\n  \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n)\n```\n:::\n\n\nWe can create a factor using the `factor()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny1 <- factor(x1, levels = month_levels)\ny1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Dec Apr Jan Mar\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n\n```{.r .cell-code}\nsort(y1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Jan Mar Apr Dec\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n:::\n\n\n## An example: months of the year {.smaller}\n\nNote that factors are stored as integers but displayed using their levels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(y1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(y1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\ny1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Dec Apr Jan Mar\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n\n```{.r .cell-code}\nas.numeric(y1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12  4  1  3\n```\n:::\n\n```{.r .cell-code}\nattributes(y1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$levels\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n$class\n[1] \"factor\"\n```\n:::\n:::\n\n\n## Movies data\n\nAs an example of how factors work, let's look at an example using Tidy Tuesday data on movie profits.\n\n\n::: {.cell hash='06_factors-groups_cache/revealjs/unnamed-chunk-14_06743d8d15973e4e54a20ae1df2687bf'}\n\n```{.r .cell-code}\nmovies <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-10-23/movie_profit.csv\")\nknitr::kable(movies[1:20,], digits = 3, row.names = F) |>\n  kableExtra::kable_styling(\"striped\", full_width = T) |> \n  kableExtra::scroll_box(height = \"300px\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div style=\"border: 1px solid #ddd; padding: 0px; overflow-y: scroll; height:300px; \"><table class=\"table table-striped\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> ...1 </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> release_date </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> movie </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> production_budget </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> domestic_gross </th>\n   <th style=\"text-align:right;position: sticky; top:0; background-color: #FFFFFF;\"> worldwide_gross </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> distributor </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> mpaa_rating </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> genre </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> 6/22/2007 </td>\n   <td style=\"text-align:left;\"> Evan Almighty </td>\n   <td style=\"text-align:right;\"> 1.75e+08 </td>\n   <td style=\"text-align:right;\"> 100289690 </td>\n   <td style=\"text-align:right;\"> 174131329 </td>\n   <td style=\"text-align:left;\"> Universal </td>\n   <td style=\"text-align:left;\"> PG </td>\n   <td style=\"text-align:left;\"> Comedy </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;\"> 7/28/1995 </td>\n   <td style=\"text-align:left;\"> Waterworld </td>\n   <td style=\"text-align:right;\"> 1.75e+08 </td>\n   <td style=\"text-align:right;\"> 88246220 </td>\n   <td style=\"text-align:right;\"> 264246220 </td>\n   <td style=\"text-align:left;\"> Universal </td>\n   <td style=\"text-align:left;\"> PG-13 </td>\n   <td style=\"text-align:left;\"> Action </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:left;\"> 5/12/2017 </td>\n   <td style=\"text-align:left;\"> King Arthur: Legend of the Sword </td>\n   <td style=\"text-align:right;\"> 1.75e+08 </td>\n   <td style=\"text-align:right;\"> 39175066 </td>\n   <td style=\"text-align:right;\"> 139950708 </td>\n   <td style=\"text-align:left;\"> Warner Bros. </td>\n   <td style=\"text-align:left;\"> PG-13 </td>\n   <td style=\"text-align:left;\"> Adventure </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:left;\"> 12/25/2013 </td>\n   <td style=\"text-align:left;\"> 47 Ronin </td>\n   <td style=\"text-align:right;\"> 1.75e+08 </td>\n   <td style=\"text-align:right;\"> 38362475 </td>\n   <td style=\"text-align:right;\"> 151716815 </td>\n   <td style=\"text-align:left;\"> Universal </td>\n   <td style=\"text-align:left;\"> PG-13 </td>\n   <td style=\"text-align:left;\"> Action </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:left;\"> 6/22/2018 </td>\n   <td style=\"text-align:left;\"> Jurassic World: Fallen Kingdom </td>\n   <td style=\"text-align:right;\"> 1.70e+08 </td>\n   <td style=\"text-align:right;\"> 416769345 </td>\n   <td style=\"text-align:right;\"> 1304866322 </td>\n   <td style=\"text-align:left;\"> Universal </td>\n   <td style=\"text-align:left;\"> PG-13 </td>\n   <td style=\"text-align:left;\"> Action </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:left;\"> 8/1/2014 </td>\n   <td style=\"text-align:left;\"> Guardians of the Galaxy </td>\n   <td style=\"text-align:right;\"> 1.70e+08 </td>\n   <td style=\"text-align:right;\"> 333172112 </td>\n   <td style=\"text-align:right;\"> 771051335 </td>\n   <td style=\"text-align:left;\"> Walt Disney </td>\n   <td style=\"text-align:left;\"> PG-13 </td>\n   <td style=\"text-align:left;\"> Action </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:left;\"> 5/7/2010 </td>\n   <td style=\"text-align:left;\"> Iron Man 2 </td>\n   <td style=\"text-align:right;\"> 1.70e+08 </td>\n   <td style=\"text-align:right;\"> 312433331 </td>\n   <td style=\"text-align:right;\"> 621156389 </td>\n   <td style=\"text-align:left;\"> Paramount Pictures </td>\n   <td style=\"text-align:left;\"> PG-13 </td>\n   <td style=\"text-align:left;\"> Action </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:left;\"> 4/4/2014 </td>\n   <td style=\"text-align:left;\"> Captain America: The Winter Soldier </td>\n   <td style=\"text-align:right;\"> 1.70e+08 </td>\n   <td style=\"text-align:right;\"> 259746958 </td>\n   <td style=\"text-align:right;\"> 714401889 </td>\n   <td style=\"text-align:left;\"> Walt Disney </td>\n   <td style=\"text-align:left;\"> PG-13 </td>\n   <td style=\"text-align:left;\"> Action </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:left;\"> 7/11/2014 </td>\n   <td style=\"text-align:left;\"> Dawn of the Planet of the Apes </td>\n   <td style=\"text-align:right;\"> 1.70e+08 </td>\n   <td style=\"text-align:right;\"> 208545589 </td>\n   <td style=\"text-align:right;\"> 710644566 </td>\n   <td style=\"text-align:left;\"> 20th Century Fox </td>\n   <td style=\"text-align:left;\"> PG-13 </td>\n   <td style=\"text-align:left;\"> Adventure </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:left;\"> 11/10/2004 </td>\n   <td style=\"text-align:left;\"> The Polar Express </td>\n   <td style=\"text-align:right;\"> 1.70e+08 </td>\n   <td style=\"text-align:right;\"> 186493587 </td>\n   <td style=\"text-align:right;\"> 310634169 </td>\n   <td style=\"text-align:left;\"> Warner Bros. </td>\n   <td style=\"text-align:left;\"> G </td>\n   <td style=\"text-align:left;\"> Adventure </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:left;\"> 6/1/2012 </td>\n   <td style=\"text-align:left;\"> Snow White and the Huntsman </td>\n   <td style=\"text-align:right;\"> 1.70e+08 </td>\n   <td style=\"text-align:right;\"> 155136755 </td>\n   <td style=\"text-align:right;\"> 401021746 </td>\n   <td style=\"text-align:left;\"> Universal </td>\n   <td style=\"text-align:left;\"> PG-13 </td>\n   <td style=\"text-align:left;\"> Adventure </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:left;\"> 7/1/2003 </td>\n   <td style=\"text-align:left;\"> Terminator 3: Rise of the Machines </td>\n   <td style=\"text-align:right;\"> 1.70e+08 </td>\n   <td style=\"text-align:right;\"> 150358296 </td>\n   <td style=\"text-align:right;\"> 433058296 </td>\n   <td style=\"text-align:left;\"> Warner Bros. </td>\n   <td style=\"text-align:left;\"> R </td>\n   <td style=\"text-align:left;\"> Action </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 13 </td>\n   <td style=\"text-align:left;\"> 5/7/2004 </td>\n   <td style=\"text-align:left;\"> Van Helsing </td>\n   <td style=\"text-align:right;\"> 1.70e+08 </td>\n   <td style=\"text-align:right;\"> 120150546 </td>\n   <td style=\"text-align:right;\"> 300150546 </td>\n   <td style=\"text-align:left;\"> Universal </td>\n   <td style=\"text-align:left;\"> PG-13 </td>\n   <td style=\"text-align:left;\"> Action </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 14 </td>\n   <td style=\"text-align:left;\"> 5/22/2015 </td>\n   <td style=\"text-align:left;\"> Tomorrowland </td>\n   <td style=\"text-align:right;\"> 1.70e+08 </td>\n   <td style=\"text-align:right;\"> 93436322 </td>\n   <td style=\"text-align:right;\"> 207283457 </td>\n   <td style=\"text-align:left;\"> Walt Disney </td>\n   <td style=\"text-align:left;\"> PG </td>\n   <td style=\"text-align:left;\"> Adventure </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:left;\"> 5/27/2016 </td>\n   <td style=\"text-align:left;\"> Alice Through the Looking Glass </td>\n   <td style=\"text-align:right;\"> 1.70e+08 </td>\n   <td style=\"text-align:right;\"> 77042381 </td>\n   <td style=\"text-align:right;\"> 276934087 </td>\n   <td style=\"text-align:left;\"> Walt Disney </td>\n   <td style=\"text-align:left;\"> PG </td>\n   <td style=\"text-align:left;\"> Adventure </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 16 </td>\n   <td style=\"text-align:left;\"> 5/21/2010 </td>\n   <td style=\"text-align:left;\"> Shrek Forever After </td>\n   <td style=\"text-align:right;\"> 1.65e+08 </td>\n   <td style=\"text-align:right;\"> 238736787 </td>\n   <td style=\"text-align:right;\"> 756244673 </td>\n   <td style=\"text-align:left;\"> Paramount Pictures </td>\n   <td style=\"text-align:left;\"> PG </td>\n   <td style=\"text-align:left;\"> Adventure </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 17 </td>\n   <td style=\"text-align:left;\"> 11/4/2016 </td>\n   <td style=\"text-align:left;\"> Doctor Strange </td>\n   <td style=\"text-align:right;\"> 1.65e+08 </td>\n   <td style=\"text-align:right;\"> 232641920 </td>\n   <td style=\"text-align:right;\"> 676486457 </td>\n   <td style=\"text-align:left;\"> Walt Disney </td>\n   <td style=\"text-align:left;\"> PG-13 </td>\n   <td style=\"text-align:left;\"> Action </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 18 </td>\n   <td style=\"text-align:left;\"> 11/7/2014 </td>\n   <td style=\"text-align:left;\"> Big Hero 6 </td>\n   <td style=\"text-align:right;\"> 1.65e+08 </td>\n   <td style=\"text-align:right;\"> 222527828 </td>\n   <td style=\"text-align:right;\"> 652127828 </td>\n   <td style=\"text-align:left;\"> Walt Disney </td>\n   <td style=\"text-align:left;\"> PG </td>\n   <td style=\"text-align:left;\"> Adventure </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 19 </td>\n   <td style=\"text-align:left;\"> 3/26/2010 </td>\n   <td style=\"text-align:left;\"> How to Train Your Dragon </td>\n   <td style=\"text-align:right;\"> 1.65e+08 </td>\n   <td style=\"text-align:right;\"> 217581232 </td>\n   <td style=\"text-align:right;\"> 494870992 </td>\n   <td style=\"text-align:left;\"> Paramount Pictures </td>\n   <td style=\"text-align:left;\"> PG </td>\n   <td style=\"text-align:left;\"> Adventure </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20 </td>\n   <td style=\"text-align:left;\"> 11/2/2012 </td>\n   <td style=\"text-align:left;\"> Wreck-It Ralph </td>\n   <td style=\"text-align:right;\"> 1.65e+08 </td>\n   <td style=\"text-align:right;\"> 189412677 </td>\n   <td style=\"text-align:right;\"> 496511521 </td>\n   <td style=\"text-align:left;\"> Walt Disney </td>\n   <td style=\"text-align:left;\"> PG </td>\n   <td style=\"text-align:left;\"> Adventure </td>\n  </tr>\n</tbody>\n</table></div>\n\n`````\n:::\n:::\n\n\n## Movies genre\n\n\n::: {.cell hash='06_factors-groups_cache/revealjs/unnamed-chunk-15_502d543ba444c1a38bb123808ce0ae33'}\n\n```{.r .cell-code}\ngenre_char <- movies$genre\ngenre_fct <- as.factor(movies$genre)\nhead(genre_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Comedy\"    \"Action\"    \"Adventure\" \"Action\"    \"Action\"    \"Action\"   \n```\n:::\n\n```{.r .cell-code}\nhead(genre_fct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Comedy    Action    Adventure Action    Action    Action   \nLevels: Action Adventure Comedy Drama Horror\n```\n:::\n:::\n\n::: {.cell hash='06_factors-groups_cache/revealjs/unnamed-chunk-16_29ab089faef631d4531b6cacb58a3559'}\n\n```{.r .cell-code}\nclass(genre_fct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(genre_fct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n## Size of character and factors\n\nGenerally, the factor representation saves space in memory:\n\n\n::: {.cell hash='06_factors-groups_cache/revealjs/unnamed-chunk-17_b79a8e27fb70d91399c8fdf4be409012'}\n\n```{.r .cell-code}\nobject.size(genre_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n27544 bytes\n```\n:::\n\n```{.r .cell-code}\nobject.size(genre_fct) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14376 bytes\n```\n:::\n:::\n\n\n# The `forcats` package\n\nThe `forcats` package provides helpful functions for working with factors. Consider the following example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forcats)\ncolor_levels <- c(\n  \"red\", \"blue\", \"yellow\"\n)\ncolor_var <- c(\"red\", \"yellow\", \"blue\")\ncolor_fct_1 <- factor(color_var, levels = color_levels)\n```\n:::\n\n\n## `fct_recode()`: recode levels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfct_recode(color_fct_1, ruby = \"red\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] ruby   yellow blue  \nLevels: ruby blue yellow\n```\n:::\n\n```{.r .cell-code}\nfct_recode(color_fct_1, ruby = \"red\", sapphire = \"blue\", topaz = \"yellow\", w = \"d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] ruby     topaz    sapphire\nLevels: ruby sapphire topaz\n```\n:::\n:::\n\n\n## `fct_collapse()`: collapse levels\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor_fct_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] red    yellow blue  \nLevels: red blue yellow\n```\n:::\n\n```{.r .cell-code}\nfct_collapse(color_fct_1, purple = c(\"red\", \"blue\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] purple yellow purple\nLevels: purple yellow\n```\n:::\n:::\n\n\n## `fct_other()`: replace w/ \"Other\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor_fct_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] red    yellow blue  \nLevels: red blue yellow\n```\n:::\n\n```{.r .cell-code}\nfct_other(color_fct_1, keep = \"red\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] red   Other Other\nLevels: red Other\n```\n:::\n:::\n\n\n## `forcats` cheatsheet {.smaller}\n\n-   Create a factor: `factor(..., levels = ...)`\n-   Count levels: `fct_count()`\n-   Unique levels: `fct_unique()`\n-   Combine factor vectors: `fct_c()`\n-   Relevel: `fct_relevel()`\n-   Drop levels: `fct_drop()`\n-   Add levels: `fct_expand()`\n-   Recode levels: `fct_recode()`\n-   Collapse levels: `fct_collapse()`\n-   Other\n\n## Takeaways\n\n-   Don't memorize these functions--read the documentation!\n-   Be efficient! Often someone has written a function that does exactly what you want to do.\n\n# Data manipulation and grouping\n\n## Mutating variables\n\nThe `mutate()` function from the `tidyverse` gives a convenient way to add/change columns in a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nmovies <- movies |>\n  mutate(genre = as.factor(genre)) |>\n  mutate(return = worldwide_gross / production_budget)\n```\n:::\n\n\n## Movies data\n\n\n::: {.cell hash='06_factors-groups_cache/revealjs/unnamed-chunk-23_d21b3767c115288724b0caeb492cccc6'}\n\n```{.r .cell-code}\nmovies$genre = as.factor(movies$genre)\nmovies <- movies |>\n  mutate(genre = fct_collapse(genre,\n                              AA = c(\"Action\", \"Adventure\"))) |>\n  mutate(genre = fct_recode(genre, Scary = \"Horror\"))\n```\n:::\n\n\n## Summarizing variables\n\nRecall that the `summarize()` function can be used to calculate statistics on our entire data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmovies |>\n  summarize(max_gross = max(worldwide_gross, na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n   max_gross\n       <dbl>\n1 1304866322\n```\n:::\n:::\n\n\n## Summaries by group\n\nWhat if we want to learn the max gross for each genre? When we have a character/factor column, we can use the `group_by` function in combination with `summarize()` to calculate group-specific statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmovies |>\n  group_by(genre) |>\n  summarize(highest_gross = max(worldwide_gross)) |>\n  ungroup()\n```\n:::\n\n\n## Challenge\n\nWhat do you think this code returns?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmovies |>\n  group_by(genre) |>\n  summarize(highest_gross = movie[which.max(worldwide_gross)]) |>\n  ungroup()\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  genre  highest_gross                 \n  <fct>  <chr>                         \n1 AA     Jurassic World: Fallen Kingdom\n2 Comedy The Hangover Part II          \n3 Drama  ET: The Extra-Terrestrial     \n4 Scary  It                            \n```\n:::\n:::\n\n\n## Challenge\n\nWhat do you think this code returns?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmovies |>\n  group_by(genre, mpaa_rating) |>\n  summarize(highest_gross = movie[which.max(worldwide_gross)]) |>\n  ungroup()\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19 × 3\n   genre  mpaa_rating highest_gross                 \n   <fct>  <chr>       <chr>                         \n 1 AA     G           The Lion King                 \n 2 AA     PG          Minions                       \n 3 AA     PG-13       Jurassic World: Fallen Kingdom\n 4 AA     R           Deadpool                      \n 5 AA     <NA>        Conan the Barbarian           \n 6 Comedy G           Gnomeo and Juliet             \n 7 Comedy PG          Home Alone                    \n 8 Comedy PG-13       Meet the Fockers              \n 9 Comedy R           The Hangover Part II          \n10 Comedy <NA>        It's a Mad Mad Mad Mad World  \n11 Drama  G           Gone with the Wind            \n12 Drama  PG          ET: The Extra-Terrestrial     \n13 Drama  PG-13       The Twilight Saga: Eclipse    \n14 Drama  R           The Passion of the Christ     \n15 Drama  <NA>        The Postman Always Rings Twice\n16 Scary  PG          Jaws                          \n17 Scary  PG-13       I am Legend                   \n18 Scary  R           It                            \n19 Scary  <NA>        Friday the 13th               \n```\n:::\n:::\n\n\n## Movies data\n\n\n::: {.cell hash='06_factors-groups_cache/revealjs/unnamed-chunk-30_2b727b9bfff4ff9328866bf01195d07f'}\n\n```{.r .cell-code}\ngenre_medians <- movies |>\n  group_by(genre) |>\n  summarize(median_budget = median(production_budget),\n            median_domestic = median(domestic_gross),\n            median_ww = median(worldwide_gross),\n            median_return = median(return)) |>\n  ungroup()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}