{
  "hash": "cba0567bea62d8847fde72b6f78113fe",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Hypothesis Testing\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: visual\n---\n\n\n## Overview of today\n\n-   Simulations for power analysis\n-   P-hacking simulations\n\n## Designing your own hypothesis test\n\nFirst, load the flips using the following code.\n\n\n::: {.cell layout-align=\"center\" hash='23_hypothesis-testing-III_cache/revealjs/load_flips_dummy_c079a89dbe946c2c0fcd1a48649f1a8c'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nflips <- read_csv(\"https://math167r-s24.github.io/static/flips.csv\")\nhead(flips)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  A     B     C     D     E    \n  <chr> <chr> <chr> <chr> <chr>\n1 T     H     H     T     H    \n2 H     H     H     H     H    \n3 T     H     T     H     H    \n4 H     T     H     H     H    \n5 H     T     T     H     T    \n6 T     H     T     T     H    \n```\n:::\n:::\n\n\nCan you tell which is real and which are fake?\n\n\n\n## Visual inspection\n\n\n::: {.cell layout-align=\"center\" hash='23_hypothesis-testing-III_cache/revealjs/visualize_flips_0691d69302128096be5e5e07093ae027'}\n::: {.cell-output-display}\n![](23_hypothesis-testing-III_files/figure-revealjs/visualize_flips-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Visual inspection\n\n\n::: {.cell layout-align=\"center\" hash='23_hypothesis-testing-III_cache/revealjs/visualize_flips_dummy_dc3e765fe4598eb24191be2880bc70e0'}\n\n```{.r .cell-code}\nflips_long <- flips |>\n  mutate(id = 1:200) |>\n  pivot_longer(-id,  names_to = \"Sequence\", values_to = \"Flip\")\n\nflips_long |> \n  ggplot(aes(x = id, y = Flip, group = Sequence)) +\n  geom_line() +\n  geom_point(aes(color = Flip)) +\n  facet_grid(rows = vars(Sequence)) + \n  theme(\n    legend.position = \"none\",\n    axis.title = element_blank()\n  )\n```\n:::\n\n\n\n## A slightly different test: streak length\n\nWe can also consider a different test statistic: longest streak.\n\n\n::: {.cell layout-align=\"center\" hash='23_hypothesis-testing-III_cache/revealjs/streaks_ce186dbc08d0c8fe2cab9c41257948a5'}\n\n```{.r .cell-code}\nflip_streaks <- flips_long |>\n  group_by(Sequence) |>\n  summarize(longest_streak = max(rle(Flip)$length))\nflip_streaks\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  Sequence longest_streak\n  <chr>             <int>\n1 A                     2\n2 B                    14\n3 C                     9\n4 D                     8\n5 E                     6\n```\n:::\n:::\n\n\n## A slightly different test: streak length\n\nWe can then simulate the null distribution of streak length.\n\n\n::: {.cell layout-align=\"center\" hash='23_hypothesis-testing-III_cache/revealjs/streaks_sim_dummy_6796df54ee59229a9333d99f40e06da4'}\n\n```{.r .cell-code}\nsim_streaks <- \n  data.frame(\n    x = replicate(10000, \n                  max(rle(sample(c(\"H\", \"T\"), size = 200, replace = T))$length)\n    )\n  )\nggplot() +\n  geom_histogram(data = sim_streaks, aes(x = x), binwidth = 1) +\n  geom_vline(data = flip_streaks,\n             aes(color = Sequence, xintercept = longest_streak)) +\n  xlab(\"Longest streak\")\n```\n:::\n\n\n## Permutation tests\n\nTypically, for hypothesis testing, we need to know the sampling distribution of the test statistic when the null hypothesis is true.\n\nIn some cases, we can derive the null sampling distribution analytically.\n\n**What if we don't know the sampling distribution under the null?** A permutation test is simple way to estimate the sampling distribution for any test statistic, requiring only some exchangeability assumptions on the data.\n\n## Permutation tests\n\n**Example:** Suppose we want to understand whether carrying a particular genetic variant affects an individual's height $y$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncarrier <- rep(c(0,1), c(100,200))\n\n# an example where y is independent of the gene\nnull_y <- rnorm(300) \n# an example where y is dependent on the gene\nalt_y <- rnorm(300, mean = carrier * 5) \n```\n:::\n\n\n## Permutation tests\n\nIf the null hypothesis is true, the distribution of $Y$ for the carriers should look the same as the distribution for the non-carriers. If we **permute** the labels repeatedly, we can get resampled datasets.\n\nIf the null hypothesis is true, the shuffled data sets will resemble the original dataset. If the null hypothesis is false, the shuffled dataset may not look like the real data.\n\n## Null hypothesis true\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](23_hypothesis-testing-III_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## Null hypothesis false\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](23_hypothesis-testing-III_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## Permutation tests\n\n1.  Calculate a test statistic based on the observed data.\n2.  Repeatedly permute the group labels to create resamples. For each resample, compute the resample test statistic.\n3.  Compare the observed data test statistic with the distribution of resampled test statistics.\n\n## Permutation tests\n\nIn the case of our simulated data, we know the true distribution of the difference of sample means. We can thus use a $t$-test to perform our hypothesis test:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(null_y[carrier == 0], null_y[carrier == 1], var.equal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tTwo Sample t-test\n\ndata:  null_y[carrier == 0] and null_y[carrier == 1]\nt = -0.55208, df = 298, p-value = 0.5813\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -0.3175650  0.1784227\nsample estimates:\n  mean of x   mean of y \n-0.09674072 -0.02716956 \n```\n:::\n:::\n\n\n## Permutation tests\n\nCompare with the $t$-test for the alternative hypothesis data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(alt_y[carrier == 0], alt_y[carrier == 1], var.equal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tTwo Sample t-test\n\ndata:  alt_y[carrier == 0] and alt_y[carrier == 1]\nt = -41.762, df = 298, p-value < 2.2e-16\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -5.246960 -4.774709\nsample estimates:\n mean of x  mean of y \n0.01439314 5.02522740 \n```\n:::\n:::\n\n\n## Permutation tests\n\nFor now, though, let's pretend we don't know the true null sampling distribution of our test statistic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nnull_diff <- mean(null_y[carrier==1]) - mean(null_y[carrier==0])\nsingle_test <- function(label, y) {\n  resample <- sample(label)\n  # resample test statistic\n  mean(y[resample == 1]) - mean(y[resample == 0])\n}\ntest_stats_null <- replicate(1000, single_test(carrier, null_y))\n```\n:::\n\n\n## Permutation tests\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(test_stats_null)\nabline(v = null_diff, lwd=2, col=\"purple\")\n```\n\n::: {.cell-output-display}\n![](23_hypothesis-testing-III_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n\n```{.r .cell-code}\nmean(abs(test_stats_null) > abs(null_diff)) # P-value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.546\n```\n:::\n:::\n\n\n## Permutation tests\n\nCompare with the case where the null hypothesis is false.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nalt_diff <- mean(alt_y[carrier==1]) - mean(alt_y[carrier==0])\ntest_stats_alt <- replicate(1000, single_test(carrier, alt_y))\nhist(test_stats_alt, xlim = c(-0.5, 6))\nabline(v = alt_diff, lwd=2, col=\"purple\")\n```\n\n::: {.cell-output-display}\n![](23_hypothesis-testing-III_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n\n```{.r .cell-code}\nmean(abs(test_stats_alt) > abs(alt_diff)) # P-value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n## Permutation tests: `sleep` data\n\nWhat if we apply this idea to the `sleep` data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(sleep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  extra group ID\n1   0.7     1  1\n2  -1.6     1  2\n3  -0.2     1  3\n4  -1.2     1  4\n5  -0.1     1  5\n6   3.4     1  6\n```\n:::\n:::\n\n\n\n## Permutation tests: `sleep` data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_stat <- mean(sleep$extra[sleep$group == 1]) - \n  mean(sleep$extra[sleep$group == 2])\nsingle_test <- function(label, y) {\n  resample <- sample(label)\n  # resample test statistic\n  mean(y[resample == 1]) - mean(y[resample == 2])\n}\ntest_stats_alt <- replicate(1000, single_test(sleep$group, sleep$extra))\nhist(test_stats_alt)\nabline(v = test_stat, lwd=2, col=\"purple\")\n```\n\n::: {.cell-output-display}\n![](23_hypothesis-testing-III_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n\n```{.r .cell-code}\nmean(abs(test_stats_alt) > abs(test_stat)) # P-value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.099\n```\n:::\n:::\n\n\n## Power analysis\n\nRecall that the power of a hypothesis test is the probability of rejecting the null hypothesis when the null hypothesis is false.\n\nNote the power will depend on the size of the difference between the true sampling distribution and the null hypothesis sampling distribution.\n\n## One sample $z$-test\n\nSuppose that $X_1,\\ldots, X_n\\sim N(\\mu, 1)$.\n\nConsider the hypotheses $H_0:\\mu=0$ and $H_a:\\mu\\neq 0$.\n\nWe reject at the $\\alpha$ significance level if $$|\\overline{X}_n| > \\frac{z_{\\alpha/2}}{\\sqrt{n}}$$\n\nIf $\\mu=\\mu_a\\neq 0$, then $$\\overline{X}_n\\sim N\\left(\\mu_a, \\frac{1}{\\sqrt{n}}\\right)$$\n\n## One sample $z$-test\n\n$$\n\\begin{align}\nP\\left(|\\overline{X}_n| > \\frac{z_{\\alpha/2}}{\\sqrt{n}}\\right)&=P\\left(\\overline{X}_n> \\frac{z_{\\alpha/2}}{\\sqrt{n}}\\right) + P\\left(\\overline{X}_n < -\\frac{z_{\\alpha/2}}{\\sqrt{n}}\\right)\\\\\n&=P\\left(\\frac{\\overline{X}_n-\\mu_a}{1/\\sqrt{n}}> z_{\\alpha/2}-\\frac{\\mu_a}{1/\\sqrt{n}}\\right) \\\\\n&+ P\\left(\\frac{\\overline{X}_n-\\mu_a}{1/\\sqrt{n}}<-z_{\\alpha/2}-\\frac{\\mu_a}{1/\\sqrt{n}}\\right)\\\\\n&=\\left(1-\\Phi\\left(z_{\\alpha/2}-\\frac{\\mu_a}{1/\\sqrt{n}}\\right)\\right)+\\Phi\\left(-z_{\\alpha/2}-\\frac{\\mu_a}{1/\\sqrt{n}}\\right)\n\\end{align}\n$$\n\n## One sample $z$-test\n\n\n::: {.cell}\n\n```{.r .cell-code}\none_sample_z_power <- function(mu_a, alpha, n) {\n  z <- qnorm(1 - alpha / 2)\n  return(1 - pnorm(z - mu_a * sqrt(n)) + pnorm(-z - mu_a * sqrt(n)))\n}\n\n# plot the power function\nx <- data.frame(x = seq(-3, 3, length.out = 1000))\nggplot(x, aes(x = x)) + \n  geom_function(fun = one_sample_z_power, \n                aes(color = \"n = 5\"),\n                args = list(alpha = .05, n = 5)) +\n  geom_function(fun = one_sample_z_power, \n                aes(color = \"n = 10\"),\n                args = list(alpha = .05, n = 10)) +\n  geom_function(fun = one_sample_z_power, \n                aes(color = \"n = 20\"),\n                args = list(alpha = .05, n = 20)) +\n  xlab(\"True population mean\") + ylab(\"Power\") +\n  theme_bw()\n```\n:::\n\n\n## One sample $z$-test\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](23_hypothesis-testing-III_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## Using simulations to estimate power\n\n\n::: {.cell hash='23_hypothesis-testing-III_cache/revealjs/power.sim_145c2348bf5aa41b2d2f30d40abd4a85'}\n\n```{.r .cell-code}\nsimulate_test <- function(mu_a, alpha, n) {\n  Xbar <- mean(rnorm(n, mean = mu_a, sd = 1))\n  Z_score <- Xbar * sqrt(n)\n  return(abs(Z_score) > qnorm(1 - alpha / 2))\n}\npower_sim <- function(mu_a, alpha, n) {\n  return(mean(replicate(1000, simulate_test(mu_a, alpha, n))))\n}\n\nmu_a <- data.frame(mu_a = seq(-2.5, 2.5, length.out = 100))\nsample_sizes <- c(5, 10, 20)\n\n# matrix of simulation results\nsim_results <- \n  sapply(sample_sizes,\n         function(n) \n           sapply(mu_a$mu_a, \n                  function(mu)\n                    power_sim(mu, .05, n)))\n\nggplot(mu_a, aes(x = mu_a)) +\n  geom_line(aes(y = sim_results[, 1], color = \"n = 5\")) +\n  geom_line(aes(y = sim_results[, 2], color = \"n = 10\")) +\n  geom_line(aes(y = sim_results[, 3], color = \"n = 20\")) +\n  xlab(\"True population mean\") + ylab(\"Power\") +\n  theme_bw()\n```\n:::\n\n\n## Using simulations to estimate power\n\n\n::: {.cell hash='23_hypothesis-testing-III_cache/revealjs/power.sim.eval_4ada85d281ae60a43a7486f23e097fbc'}\n::: {.cell-output-display}\n![](23_hypothesis-testing-III_files/figure-revealjs/power.sim.eval-1.png){width=960}\n:::\n:::\n\n\n\n## Exercise: estimating power\n\nIf $X_1,\\ldots X_n\\sim N(1, 1)$, what is the power for a one-sample $t$ test for the hypotheses $H_0:\\mu = 0$ and $H_a:\\mu\\not=0$ if $n=30$?\n\nCreate a simulation to estimate the power.\n\n## P-hacking simulations\n\n**P-hacking** refers to the practice of repeatedly performing hypothesis tests (and potentially manipulating the data) until a statistically significant P-values is obtained. Usually, only this final result is published, without mentioning all of the manipulations that came before.\n\n## P-hacking simulations\n\nSuppose we simulate 25 observations of 8 variables which we know to be uncorrelated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_signal_data <- matrix(rnorm(200), ncol = 8) # 25 x 8 matrix\npairs(no_signal_data) # pairwise scatter plots\n```\n\n::: {.cell-output-display}\n![](23_hypothesis-testing-III_files/figure-revealjs/phack.sim-1.png){width=960}\n:::\n:::\n\n\n## P-hacking simulations\n\n\n::: {.cell hash='23_hypothesis-testing-III_cache/revealjs/phack.sim.eval_037964407f914c55a0f2dfa1b5d7ca4f'}\n\n```{.r .cell-code}\nno_signal_data <- matrix(rnorm(200), ncol = 8) # 25 x 8 matrix\npairs(no_signal_data) # pairwise scatter plots\n```\n\n::: {.cell-output-display}\n![](23_hypothesis-testing-III_files/figure-revealjs/phack.sim.eval-1.png){width=960}\n:::\n:::\n\n\n## Multiple testing simulations\n\nWhat if we perform a hypothesis test to test whether the correlation is zero between each pair of variables using `cor.test()`? With only 8 variables, we have 28 potential comparisons, the probability that we will (falsely) reject the null is already:\n\n\n::: {.cell hash='23_hypothesis-testing-III_cache/revealjs/comp_bfb8b7b186496dffdaf5c750df367d01'}\n\n```{.r .cell-code}\n1 - (0.95) ^ 28\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7621731\n```\n:::\n:::\n\n\n## Multiple testing simulations\n\n\n::: {.cell hash='23_hypothesis-testing-III_cache/revealjs/phack.sim.p_07d0e5b9f9a2832c58435dff44a60332'}\n\n```{.r .cell-code}\nset.seed(1029)\nno_signal_data<- matrix(rnorm(200), ncol = 8) # 25 x 8 matrix\npairs_to_compare <- combn(8, 2) # all combinations of 2 numbers from 1-8\np_values <- c()\nfor (i in 1:ncol(pairs_to_compare)) {\n  index_1 <- pairs_to_compare[1, i]\n  index_2 <- pairs_to_compare[2, i]\n  test_res <- \n    cor.test(no_signal_data[, index_1],\n             no_signal_data[, index_2])\n  p_values <- c(p_values, test_res$p.value)\n}\nprint(min(p_values))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.006656272\n```\n:::\n:::\n\n\n## Multiple testing simulations\n\nFor this reason it is common to perform a correction to the p-values when many hypothesis tests are conducted.\n\n**Example**: The Bonferroni correction divides $\\alpha$ by the number of tests performed to get the corrected significance level.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}